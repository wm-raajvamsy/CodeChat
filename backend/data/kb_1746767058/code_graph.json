{"nodes": [{"id": "wavemaker-rn-codegen/jest.config.js", "type": "file", "name": "jest.config.js"}, {"id": "wavemaker-rn-codegen/index.ts", "type": "file", "name": "index.ts"}, {"id": "wavemaker-rn-codegen/command.ts", "type": "file", "name": "command.ts"}, {"id": "wavemaker-rn-codegen/test/theme/rn-stylesheet.transpiler.test.ts", "type": "file", "name": "rn-stylesheet.transpiler.test.ts"}, {"id": "wavemaker-rn-codegen/style-docs/doc.generator.js", "type": "file", "name": "doc.generator.js"}, {"id": "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.esm.js", "type": "file", "name": "bootstrap.esm.js"}, {"id": "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.bundle.js", "type": "file", "name": "bootstrap.bundle.js"}, {"id": "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.js", "type": "file", "name": "bootstrap.js"}, {"id": "wavemaker-rn-codegen/style-docs/js/custom.js", "type": "file", "name": "custom.js"}, {"id": "wavemaker-rn-codegen/scripts/build.js", "type": "file", "name": "build.js"}, {"id": "wavemaker-rn-codegen/scripts/npm-publish.js", "type": "file", "name": "npm-publish.js"}, {"id": "wavemaker-rn-codegen/scripts/post-build.js", "type": "file", "name": "post-build.js"}, {"id": "wavemaker-rn-codegen/src/project.service.ts", "type": "file", "name": "project.service.ts"}, {"id": "wavemaker-rn-codegen/src/increment-builder.ts", "type": "file", "name": "increment-builder.ts"}, {"id": "wavemaker-rn-codegen/src/handlebar-helpers.ts", "type": "file", "name": "handlebar-helpers.ts"}, {"id": "wavemaker-rn-codegen/src/utils.ts", "type": "file", "name": "utils.ts"}, {"id": "wavemaker-rn-codegen/src/app.generator.ts", "type": "file", "name": "app.generator.ts"}, {"id": "wavemaker-rn-codegen/src/fomatter.ts", "type": "file", "name": "fomatter.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style.transformer.ts", "type": "file", "name": "style.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/bind.ex.transformer.ts", "type": "file", "name": "bind.ex.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/transpile.ts", "type": "file", "name": "transpile.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/property/property-parser.ts", "type": "file", "name": "property-parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/property/base-parser.ts", "type": "file", "name": "base-parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/property/show-in-device.parser.ts", "type": "file", "name": "show-in-device.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/border-width.parser.ts", "type": "file", "name": "border-width.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/horizontal-align.parser.ts", "type": "file", "name": "horizontal-align.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/style.parser.ts", "type": "file", "name": "style.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/padding.parser.ts", "type": "file", "name": "padding.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/multi-dimension-style.parser.ts", "type": "file", "name": "multi-dimension-style.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/dimension-style.parser.ts", "type": "file", "name": "dimension-style.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/numeric-style.parser.ts", "type": "file", "name": "numeric-style.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/background-image.parser.ts", "type": "file", "name": "background-image.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/style/margin.parser.ts", "type": "file", "name": "margin.parser.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/utils.ts", "type": "file", "name": "utils.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/transform-register.ts", "type": "file", "name": "transform-register.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/advanced/network-info-toaster.transformer.ts", "type": "file", "name": "network-info-toaster.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/advanced/carousel.transformer.ts", "type": "file", "name": "carousel.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/advanced/login.transformer.ts", "type": "file", "name": "login.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/advanced/webview.transformer.ts", "type": "file", "name": "webview.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-template.transformer.ts", "type": "file", "name": "carousel-template.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-content.transformer.ts", "type": "file", "name": "carousel-content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer.ts", "type": "file", "name": "partial-container.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/tabbar.transformer.ts", "type": "file", "name": "tabbar.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/content.transformer.ts", "type": "file", "name": "content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/page.transformer.ts", "type": "file", "name": "page.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/left-panel.transformer.ts", "type": "file", "name": "left-panel.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/page-content.transformer.ts", "type": "file", "name": "page-content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/page/partial.transformer.ts", "type": "file", "name": "partial.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/chips.transformer.ts", "type": "file", "name": "chips.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/rating.transformer.ts", "type": "file", "name": "rating.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/toggle.transformer.ts", "type": "file", "name": "toggle.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/checkboxset.transformer.ts", "type": "file", "name": "checkboxset.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/select.transformer.ts", "type": "file", "name": "select.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/fileupload.transformer.ts", "type": "file", "name": "fileupload.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/checkbox.transformer.ts", "type": "file", "name": "checkbox.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/text.transformer.ts", "type": "file", "name": "text.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/number.transformer.ts", "type": "file", "name": "number.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/calendar.transformer.ts", "type": "file", "name": "calendar.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/textarea.transformer.ts", "type": "file", "name": "textarea.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/currency.transformer.ts", "type": "file", "name": "currency.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/slider.transformer.ts", "type": "file", "name": "slider.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/radioset.transformer.ts", "type": "file", "name": "radioset.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/composite.transformer.ts", "type": "file", "name": "composite.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/switch.transformer.ts", "type": "file", "name": "switch.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/epoch/time.transformer.ts", "type": "file", "name": "time.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/epoch/datetime.transformer.ts", "type": "file", "name": "datetime.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/input/epoch/date.transformer.ts", "type": "file", "name": "date.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/line-chart.transformer.ts", "type": "file", "name": "line-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/column-chart.transformer.ts", "type": "file", "name": "column-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/stack-chart.transformer.ts", "type": "file", "name": "stack-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/donut-chart.transformer.ts", "type": "file", "name": "donut-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/area-chart.transformer.ts", "type": "file", "name": "area-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/bubble-chart.transformer.ts", "type": "file", "name": "bubble-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/pie-chart.transformer.ts", "type": "file", "name": "pie-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/chart/bar-chart.transformer.ts", "type": "file", "name": "bar-chart.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/message.transformer.ts", "type": "file", "name": "message.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/progress-bar.transformer.ts", "type": "file", "name": "progress-bar.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/buttongroup.transformer.ts", "type": "file", "name": "buttongroup.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/spinner.transformer.ts", "type": "file", "name": "spinner.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/skeleton.transformer.ts", "type": "file", "name": "skeleton.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/audio.transformer.ts", "type": "file", "name": "audio.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/progress-circle.transformer.ts", "type": "file", "name": "progress-circle.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/picture.transformer.ts", "type": "file", "name": "picture.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/label.transformer.ts", "type": "file", "name": "label.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/lottie.transformer.ts", "type": "file", "name": "lottie.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/video.transformer.ts", "type": "file", "name": "video.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/anchor.transformer.ts", "type": "file", "name": "anchor.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/button.transformer.ts", "type": "file", "name": "button.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/icon.transformer.ts", "type": "file", "name": "icon.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/modal.transformer.ts", "type": "file", "name": "modal.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/search.transformer.ts", "type": "file", "name": "search.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/basic/custom.transformer.ts", "type": "file", "name": "custom.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/navigation/navitem.transformer.ts", "type": "file", "name": "navitem.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/navigation/popover.transformer.ts", "type": "file", "name": "popover.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/navigation/basenav.transformer.ts", "type": "file", "name": "basenav.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/navigation/appnavbar.transformer.ts", "type": "file", "name": "appnavbar.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/navigation/navbar.transformer.ts", "type": "file", "name": "navbar.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/navigation/menu.transformer.ts", "type": "file", "name": "menu.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/tabs.transformer.ts", "type": "file", "name": "tabs.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/panel.transformer.ts", "type": "file", "name": "panel.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid.transformer.ts", "type": "file", "name": "layoutgrid.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/wizard.transformer.ts", "type": "file", "name": "wizard.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/tile.transformer.ts", "type": "file", "name": "tile.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/pane-content.transformer.ts", "type": "file", "name": "pane-content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/linearlayout.transformer.ts", "type": "file", "name": "linearlayout.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/repeat-template.transformer.ts", "type": "file", "name": "repeat-template.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/accordion.transformer.ts", "type": "file", "name": "accordion.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/container.transformer.ts", "type": "file", "name": "container.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabheader.transformer.ts", "type": "file", "name": "tabheader.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabpane.transformer.ts", "type": "file", "name": "tabpane.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridcolumn.transformer.ts", "type": "file", "name": "gridcolumn.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridrow.transformer.ts", "type": "file", "name": "gridrow.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-footer.transformer.ts", "type": "file", "name": "panel-footer.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-content.transformer.ts", "type": "file", "name": "panel-content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/accordion/accordionpane.transformer.ts", "type": "file", "name": "accordionpane.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/wizard/wizardstep.transformer.ts", "type": "file", "name": "wizardstep.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/container/linearlayout/linearlayoutitem.transformer.ts", "type": "file", "name": "linearlayoutitem.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/prefab/prefab-container.transformer.ts", "type": "file", "name": "prefab-container.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/prefab/prefab.transformer.ts", "type": "file", "name": "prefab.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogcontent.transformer.ts", "type": "file", "name": "dialogcontent.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/dialogs/alertdialog.transformer.ts", "type": "file", "name": "alertdialog.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogactions.transformer.ts", "type": "file", "name": "dialogactions.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/dialogs/dialog.transformer.ts", "type": "file", "name": "dialog.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/dialogs/confirmdialog.transformer.ts", "type": "file", "name": "confirmdialog.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/device/barcodescanner.transformer.ts", "type": "file", "name": "barcodescanner.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/device/camera.transformer.ts", "type": "file", "name": "camera.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/list.transformer.ts", "type": "file", "name": "list.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/liveform.transformer.ts", "type": "file", "name": "liveform.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/card.transformer.ts", "type": "file", "name": "card.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/form.transformer.ts", "type": "file", "name": "form.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/form/form-action.transformer.ts", "type": "file", "name": "form-action.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/form/form-footer.transformer.ts", "type": "file", "name": "form-footer.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/form/form-body.transformer.ts", "type": "file", "name": "form-body.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/form/form-field.transformer.ts", "type": "file", "name": "form-field.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/card/card-footer.transformer.ts", "type": "file", "name": "card-footer.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/card/card-content.transformer.ts", "type": "file", "name": "card-content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/list/list-content.transformer.ts", "type": "file", "name": "list-content.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/list/list-template.transformer.ts", "type": "file", "name": "list-template.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/transpile/components/data/list/list-action-template.transformer.ts", "type": "file", "name": "list-action-template.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/theme/font-stylesheet.transpiler.ts", "type": "file", "name": "font-stylesheet.transpiler.ts"}, {"id": "wavemaker-rn-codegen/src/theme/theme.service.ts", "type": "file", "name": "theme.service.ts"}, {"id": "wavemaker-rn-codegen/src/theme/variables.ts", "type": "file", "name": "variables.ts"}, {"id": "wavemaker-rn-codegen/src/theme/runtime-styles.generator.ts", "type": "file", "name": "runtime-styles.generator.ts"}, {"id": "wavemaker-rn-codegen/src/theme/rn-stylesheet.transpiler.ts", "type": "file", "name": "rn-stylesheet.transpiler.ts"}, {"id": "wavemaker-rn-codegen/src/theme/studio-css.generator.ts", "type": "file", "name": "studio-css.generator.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/prefab.styledef.ts", "type": "file", "name": "prefab.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container.styledef.ts", "type": "file", "name": "container.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page.styledef.ts", "type": "file", "name": "page.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/style-definition.provider.ts", "type": "file", "name": "style-definition.provider.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/base-style-definition.ts", "type": "file", "name": "base-style-definition.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/advanced/carousel.styledef.ts", "type": "file", "name": "carousel.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/advanced/login.styledef.ts", "type": "file", "name": "login.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/advanced/webview.styledef.ts", "type": "file", "name": "webview.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/advanced/network-info-toaster.styledef.ts", "type": "file", "name": "network-info-toaster.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-content.styledef.ts", "type": "file", "name": "carousel-content.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-template.styledef.ts", "type": "file", "name": "carousel-template.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page/tabbar.styledef.ts", "type": "file", "name": "tabbar.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page/left-panel.styledef.ts", "type": "file", "name": "left-panel.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page/partial.styledef.ts", "type": "file", "name": "partial.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page/content.styledef.ts", "type": "file", "name": "content.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page/partial-container.styledef.ts", "type": "file", "name": "partial-container.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/page/page-content.styledef.ts", "type": "file", "name": "page-content.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/rating.styledef.ts", "type": "file", "name": "rating.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/slider.styledef.ts", "type": "file", "name": "slider.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/basedataset.styledef.ts", "type": "file", "name": "basedataset.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/basenumber.styledef.ts", "type": "file", "name": "basenumber.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/text.styledef.ts", "type": "file", "name": "text.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/toggle.styledef.ts", "type": "file", "name": "toggle.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/fileupload.styledef.ts", "type": "file", "name": "fileupload.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/composite.styledef.ts", "type": "file", "name": "composite.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/textarea.styledef.ts", "type": "file", "name": "textarea.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/radioset.styledef.ts", "type": "file", "name": "radioset.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/select.styledef.ts", "type": "file", "name": "select.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/chips.styledef.ts", "type": "file", "name": "chips.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/number.styledef.ts", "type": "file", "name": "number.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/checkbox.styledef.ts", "type": "file", "name": "checkbox.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/switch.styledef.ts", "type": "file", "name": "switch.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/checkboxset.styledef.ts", "type": "file", "name": "checkboxset.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/baseinput.styledef.ts", "type": "file", "name": "baseinput.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/currency.styledef.ts", "type": "file", "name": "currency.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/calendar.styledef.ts", "type": "file", "name": "calendar.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/calendar/views.styledef.ts", "type": "file", "name": "views.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/epoch/time.styledef.ts", "type": "file", "name": "time.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/epoch/date.styledef.ts", "type": "file", "name": "date.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/input/epoch/datetime.styledef.ts", "type": "file", "name": "datetime.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/donut-chart.styledef.ts", "type": "file", "name": "donut-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/area-chart.styledef.ts", "type": "file", "name": "area-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/bar-chart.styledef.ts", "type": "file", "name": "bar-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/column-chart.styledef.ts", "type": "file", "name": "column-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/bubble-chart.styledef.ts", "type": "file", "name": "bubble-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/line-chart.styledef.ts", "type": "file", "name": "line-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/chart/pie-chart.styledef.ts", "type": "file", "name": "pie-chart.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/modal.styledef.ts", "type": "file", "name": "modal.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/progress-circle.styledef.ts", "type": "file", "name": "progress-circle.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/message.styledef.ts", "type": "file", "name": "message.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/skeleton.styledef.ts", "type": "file", "name": "skeleton.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/label.styledef.ts", "type": "file", "name": "label.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/lottie.styledef.ts", "type": "file", "name": "lottie.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/search.styledef.ts", "type": "file", "name": "search.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/buttongroup.styledef.ts", "type": "file", "name": "buttongroup.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/spinner.styledef.ts", "type": "file", "name": "spinner.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/audio.styledef.ts", "type": "file", "name": "audio.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/progress-bar.styledef.ts", "type": "file", "name": "progress-bar.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/picture.styledef.ts", "type": "file", "name": "picture.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/icon.styledef.ts", "type": "file", "name": "icon.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/button.styledef.ts", "type": "file", "name": "button.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/anchor.styledef.ts", "type": "file", "name": "anchor.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/custom.styledef.ts", "type": "file", "name": "custom.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/basic/video.styledef.ts", "type": "file", "name": "video.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/navigation/navitem.styledef.ts", "type": "file", "name": "navitem.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/navigation/appnavbar.styledef.ts", "type": "file", "name": "appnavbar.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/navigation/basenav.styledef.ts", "type": "file", "name": "basenav.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/navigation/popover.styledef.ts", "type": "file", "name": "popover.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/navigation/navbar.styledef.ts", "type": "file", "name": "navbar.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/navigation/menu.styledef.ts", "type": "file", "name": "menu.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/tile.styledef.ts", "type": "file", "name": "tile.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/tabs.styledef.ts", "type": "file", "name": "tabs.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/wizard.styledef.ts", "type": "file", "name": "wizard.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/linearlayout.styledef.ts", "type": "file", "name": "linearlayout.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/layoutgrid.styledef.ts", "type": "file", "name": "layoutgrid.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/accordion.styledef.ts", "type": "file", "name": "accordion.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/panel.styledef.ts", "type": "file", "name": "panel.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/tabs/tabpane.styledef.ts", "type": "file", "name": "tabpane.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/tabs/tabheader.styledef.ts", "type": "file", "name": "tabheader.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridrow.styledef.ts", "type": "file", "name": "gridrow.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridcolumn.styledef.ts", "type": "file", "name": "gridcolumn.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/panel/panel-footer.styledef.ts", "type": "file", "name": "panel-footer.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/panel/panel-content.styledef.ts", "type": "file", "name": "panel-content.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/accordion/accordionpane.styledef.ts", "type": "file", "name": "accordionpane.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/wizard/wizardstep.styledef.ts", "type": "file", "name": "wizardstep.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/container/linearlayout/linearlayoutitem.styledef.ts", "type": "file", "name": "linearlayoutitem.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/dialogs/confirmdialog.styledef.ts", "type": "file", "name": "confirmdialog.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/dialogs/dialogcontent.styledef.ts", "type": "file", "name": "dialogcontent.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/dialogs/dialog.styledef.ts", "type": "file", "name": "dialog.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/dialogs/alertdialog.styledef.ts", "type": "file", "name": "alertdialog.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/dialogs/dialogactions.styledef.ts", "type": "file", "name": "dialogactions.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/device/barcodescanner.styledef.ts", "type": "file", "name": "barcodescanner.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/device/camera.styledef.ts", "type": "file", "name": "camera.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/list.styledef.ts", "type": "file", "name": "list.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/form.styledef.ts", "type": "file", "name": "form.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/card.styledef.ts", "type": "file", "name": "card.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/form/form-footer.styledef.ts", "type": "file", "name": "form-footer.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/form/form-action.styledef.ts", "type": "file", "name": "form-action.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/form/form-field.styledef.ts", "type": "file", "name": "form-field.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/form/form-body.styledef.ts", "type": "file", "name": "form-body.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/card/card-content.styledef.ts", "type": "file", "name": "card-content.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/card/card-footer.styledef.ts", "type": "file", "name": "card-footer.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/list/list-template.styledef.ts", "type": "file", "name": "list-template.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/theme/components/data/list/list-action-template.styledef.ts", "type": "file", "name": "list-action-template.styledef.ts"}, {"id": "wavemaker-rn-codegen/src/variables/variable.transformer.ts", "type": "file", "name": "variable.transformer.ts"}, {"id": "wavemaker-rn-codegen/src/templates/project/polyfills.js", "type": "file", "name": "polyfills.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/index.js", "type": "file", "name": "index.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/font.config.js", "type": "file", "name": "font.config.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/metro.config.js", "type": "file", "name": "metro.config.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/revert-to-1.0.styles.js", "type": "file", "name": "revert-to-1.0.styles.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/wavepulse/constants.js", "type": "file", "name": "constants.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/wavepulse/wavepulse.agent.js", "type": "file", "name": "wavepulse.agent.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/component/dynamic/component-generator.js", "type": "file", "name": "component-generator.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/component/dynamic/form.generator.js", "type": "file", "name": "form.generator.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/scripts/wm-babel.transform.plugin.js", "type": "file", "name": "wm-babel.transform.plugin.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/scripts/post-build.js", "type": "file", "name": "post-build.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/esbuild/esbuild-plugin-babel.js", "type": "file", "name": "esbuild-plugin-babel.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/esbuild/esbuild.script.js", "type": "file", "name": "esbuild.script.js"}, {"id": "wavemaker-rn-codegen/src/templates/project/esbuild/expo-camera-patch/useWebQRScanner.js", "type": "file", "name": "useWebQRScanner.js"}, {"id": "wavemaker-rn-codegen/src/profiles/expo-preview.profile.ts", "type": "file", "name": "expo-preview.profile.ts"}, {"id": "wavemaker-rn-codegen/src/profiles/profile.ts", "type": "file", "name": "profile.ts"}, {"id": "wavemaker-rn-codegen/src/profiles/web-preview.profile.ts", "type": "file", "name": "web-preview.profile.ts"}, {"id": "wavemaker-rn-codegen/src/profiles/expo-web-preview.profile.ts", "type": "file", "name": "expo-web-preview.profile.ts"}, {"id": "wavemaker-rn-codegen/src/profiles/development.profile.ts", "type": "file", "name": "development.profile.ts"}], "edges": {"wavemaker-rn-codegen/index.ts": [{"to": "yargs", "type": "imports"}, {"to": "fs-extra", "type": "imports"}, {"to": "path", "type": "imports"}, {"to": "yargs/helpers", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/theme.service", "type": "imports"}, {"to": "wavemaker-rn-codegen/command", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/handlebar-helpers", "type": "imports"}, {"to": "Function", "type": "uses_component"}, {"to": "src", "type": "uses_component"}, {"to": "name", "type": "uses_component"}], "wavemaker-rn-codegen/command.ts": [{"to": "wavemaker-rn-codegen/src/transpile/components/transform-register", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/project.service", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/handlebar-helpers", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/app.generator", "type": "imports"}, {"to": "execa", "type": "imports"}, {"to": "fs-extra", "type": "imports"}, {"to": "crypto", "type": "imports"}, {"to": "os", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/development.profile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/expo-preview.profile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/web-preview.profile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/expo-web-preview.profile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/increment-builder", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/utils", "type": "imports"}], "wavemaker-rn-codegen/test/theme/rn-stylesheet.transpiler.test.ts": [{"to": "@jest/globals", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/rn-stylesheet.transpiler", "type": "imports"}], "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.esm.js": [{"to": "@popperjs/core", "type": "imports"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "a", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "div", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "div", "type": "uses_component"}, {"to": "Tooltip", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "ul", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}], "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.bundle.js": [{"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "a", "type": "uses_component"}, {"to": "html", "type": "uses_component"}, {"to": "html", "type": "uses_component"}, {"to": "html", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "div", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "div", "type": "uses_component"}, {"to": "Tooltip", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "ul", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}], "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.js": [{"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "a", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "div", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "div", "type": "uses_component"}, {"to": "Tooltip", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}, {"to": "ul", "type": "uses_component"}, {"to": "BaseComponent", "type": "extends"}, {"to": "BaseComponent", "type": "extends"}], "wavemaker-rn-codegen/src/project.service.ts": [{"to": "axios", "type": "imports"}, {"to": "fs-extra", "type": "imports"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "PageConfig", "type": "uses_component"}, {"to": "PageInfo", "type": "uses_component"}, {"to": "PrefabInfo", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "PageConfig", "type": "uses_component"}, {"to": "PageConfig", "type": "uses_component"}, {"to": "PageInfo", "type": "uses_component"}, {"to": "PrefabInfo", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "PageConfig", "type": "uses_component"}, {"to": "PageConfig", "type": "uses_component"}, {"to": "PageInfo", "type": "uses_component"}, {"to": "PrefabInfo", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "void", "type": "uses_component"}], "wavemaker-rn-codegen/src/increment-builder.ts": [{"to": "fs-extra", "type": "imports"}], "wavemaker-rn-codegen/src/handlebar-helpers.ts": [{"to": "handlebars", "type": "imports"}, {"to": "lodash", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/fomatter", "type": "imports"}], "wavemaker-rn-codegen/src/utils.ts": [{"to": "fs-extra", "type": "imports"}, {"to": "handlebars", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}], "wavemaker-rn-codegen/src/app.generator.ts": [{"to": "fs-extra", "type": "imports"}, {"to": "path", "type": "imports"}, {"to": "lodash", "type": "imports"}, {"to": "execa", "type": "imports"}, {"to": "semver", "type": "imports"}, {"to": "path", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/project.service", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/variables/variable.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/utils", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/bind.ex.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/theme.service", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/increment-builder", "type": "imports"}, {"to": "operationConfig", "type": "uses_component"}, {"to": "string", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "any", "type": "uses_component"}], "wavemaker-rn-codegen/src/fomatter.ts": [{"to": "string", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/style.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/style.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/dimension-style.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/margin.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/padding.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/border-width.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/numeric-style.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/horizontal-align.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/background-image.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/bind.ex.transformer.ts": [{"to": "lodash", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/transpile.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/fomatter", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/property/property-parser", "type": "imports"}, {"to": "Import", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/property/property-parser.ts": [{"to": "lodash", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/dimension-style.parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/property/base-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/property/show-in-device.parser", "type": "imports"}, {"to": "Parser", "type": "extends"}, {"to": "Parser", "type": "extends"}, {"to": "Parser", "type": "extends"}], "wavemaker-rn-codegen/src/transpile/property/show-in-device.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/property/base-parser", "type": "imports"}, {"to": "Parser", "type": "extends"}], "wavemaker-rn-codegen/src/transpile/style/border-width.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/multi-dimension-style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/horizontal-align.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/padding.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/multi-dimension-style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/multi-dimension-style.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/dimension-style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/dimension-style.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/numeric-style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/numeric-style.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/background-image.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/style/style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/style/margin.parser.ts": [{"to": "wavemaker-rn-codegen/src/transpile/style/multi-dimension-style.parser", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/utils.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/bind.ex.transformer", "type": "imports"}, {"to": "WmPartialContainer", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/transform-register.ts": [{"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/anchor.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/button.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/label.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/picture.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/spinner.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/icon.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/container.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridrow.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridcolumn.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/repeat-template.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/list/list-template.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/list.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/appnavbar.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/navbar.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/navitem.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/menu.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/page.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/prefab/prefab.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/prefab/prefab-container.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/page-content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/advanced/webview.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/left-panel.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/tabbar.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/modal.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/buttongroup.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/text.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/epoch/date.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/switch.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/epoch/time.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/epoch/datetime.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/composite.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/number.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/currency.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/slider.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/rating.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/toggle.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/radioset.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/checkboxset.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/linearlayout.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/linearlayout/linearlayoutitem.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/checkbox.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/select.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/form.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/liveform.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/form/form-field.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/textarea.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/tabs.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabpane.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/pane-content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/dialogs/dialog.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogactions.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogcontent.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/dialogs/alertdialog.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/dialogs/confirmdialog.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/accordion.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/accordion/accordionpane.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/panel.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-footer.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/popover.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/tile.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/message.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/card.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/card/card-content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/card/card-footer.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/progress-bar.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/progress-circle.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/advanced/carousel.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-template.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/calendar.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/wizard.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/wizard/wizardstep.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/search.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/chips.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/advanced/login.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/device/camera.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/device/barcodescanner.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/form/form-footer.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/form/form-body.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/form/form-action.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/input/fileupload.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/line-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/bar-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/pie-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/area-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/column-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/donut-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/bubble-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabheader.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/advanced/network-info-toaster.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/skeleton.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/video.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/custom.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/lottie.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/basic/audio.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/chart/stack-chart.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/list/list-action-template.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/list/list-content.transformer", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/advanced/network-info-toaster.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmNetworkInfoToaster", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/advanced/carousel.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmCarousel", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/advanced/login.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmLogin", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/advanced/webview.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmWebview", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-template.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/data/list/list-content.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCarouselTemplate", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCarouselContent", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer.ts": [{"to": "html-entities", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPartialContainer", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/page/tabbar.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/page/content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmContent", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/page/page.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmPage", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/page/left-panel.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "ThemeProvider", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/page/page-content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPageContent", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/page/partial.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPartial", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/chips.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmChips", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/rating.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmRating", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/toggle.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmToggle", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/checkboxset.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmCheckboxset", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/select.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmSelect", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/fileupload.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmFileupload", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/checkbox.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmCheckbox", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/text.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmText", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/number.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmNumber", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/calendar.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCalendar", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/textarea.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmTextarea", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/currency.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmCurrency", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/slider.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/input/radioset.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmRadioset", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/composite.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmComposite", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/switch.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmSwitch", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/epoch/time.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmTime", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/epoch/datetime.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmDatetime", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/input/epoch/date.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmDate", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/line-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmLineChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/column-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmColumnChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/stack-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmStackChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/donut-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmDonutChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/area-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmAreaChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/bubble-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmBubbleChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/pie-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmPieChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/chart/bar-chart.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmBarChart", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/message.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmMessage", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/progress-bar.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmProgressBar", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/buttongroup.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmButtongroup", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/spinner.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmSpinner", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/skeleton.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmSkeleton", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/audio.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmAudio", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/progress-circle.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmProgressCircle", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/picture.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPicture", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/label.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmLabel", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/lottie.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmLottie", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/video.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmVideo", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/anchor.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmAnchor", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/button.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmButton", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/icon.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmIcon", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/modal.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmModal", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/search.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmSearch", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/basic/custom.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCustom", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/navigation/navitem.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/navigation/popover.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "WmPopover", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/navigation/basenav.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/navigation/appnavbar.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmAppNavbar", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/navigation/navbar.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/basenav.transformer", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/navigation/menu.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/navigation/basenav.transformer", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/container/tabs.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmTabs", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/panel.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmPanel", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmLayoutgrid", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/wizard.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmWizard", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/tile.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmTile", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/pane-content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "ScrollView", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/linearlayout.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmLinearlayout", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/repeat-template.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/container/accordion.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmAccordion", "type": "uses_component"}, {"to": "WmAccordion", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/container.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "WmContainer", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabheader.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmTabheader", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabpane.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "WmTabpane", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridcolumn.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmGridcolumn", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridrow.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmGridrow", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-footer.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPanelFooter", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPanelContent", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/accordion/accordionpane.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "WmAccordionpane", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/wizard/wizardstep.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmWizardstep", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/container/linearlayout/linearlayoutitem.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmLinearlayoutitem", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/prefab/prefab-container.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmPrefabContainer", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/prefab/prefab.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogcontent.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmDialogcontent", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/dialogs/alertdialog.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmAlertdialog", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogactions.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmDialogactions", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/dialogs/dialog.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "node-html-parser/dist/nodes/html", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmDialog", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/dialogs/confirmdialog.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmConfirmdialog", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/device/barcodescanner.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmBarcodescanner", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/device/camera.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCamera", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/list.transformer.ts": [{"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/utils", "type": "imports"}, {"to": "WmList", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/liveform.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmLiveForm", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/card.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCard", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/form.transformer.ts": [{"to": "lodash", "type": "imports"}, {"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmForm", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/form/form-action.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmFormAction", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/form/form-footer.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmFormFooter", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/form/form-body.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmFormBody", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/form/form-field.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmFormField", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/card/card-footer.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmCardFooter", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/card/card-content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer", "type": "imports"}, {"to": "WmCardContent", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/list/list-content.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "lodash", "type": "imports"}], "wavemaker-rn-codegen/src/transpile/components/data/list/list-template.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmListTemplate", "type": "uses_component"}], "wavemaker-rn-codegen/src/transpile/components/data/list/list-action-template.transformer.ts": [{"to": "node-html-parser", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "WmListActionTemplate", "type": "uses_component"}], "wavemaker-rn-codegen/src/theme/font-stylesheet.transpiler.ts": [{"to": "css-tree", "type": "imports"}, {"to": "lodash", "type": "imports"}, {"to": "css-to-react-native-transform", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/style-definition.provider", "type": "imports"}], "wavemaker-rn-codegen/src/theme/theme.service.ts": [{"to": "fs-extra", "type": "imports"}, {"to": "path", "type": "imports"}, {"to": "clean-css", "type": "imports"}, {"to": "rimraf", "type": "imports"}, {"to": "adm-zip", "type": "imports"}, {"to": "puppeteer", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/style-definition.provider", "type": "imports"}, {"to": "lodash", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/variables", "type": "imports"}, {"to": "less", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/utils", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/rn-stylesheet.transpiler", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/font-stylesheet.transpiler", "type": "imports"}, {"to": "void", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "void", "type": "uses_component"}, {"to": "any", "type": "uses_component"}, {"to": "String", "type": "uses_component"}, {"to": "void", "type": "uses_component"}], "wavemaker-rn-codegen/src/theme/rn-stylesheet.transpiler.ts": [{"to": "css-tree", "type": "imports"}, {"to": "lodash", "type": "imports"}, {"to": "css-to-react-native-transform", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/style-definition.provider", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/prefab.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/style-definition.provider.ts": [{"to": "fs-extra", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/utils", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-content.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-template.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/advanced/carousel.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/advanced/login.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/advanced/webview.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/anchor.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/button.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/buttongroup.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/icon.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/label.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/message.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/modal.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/picture.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/progress-bar.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/progress-circle.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/search.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/spinner.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/accordion/accordionpane.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/accordion.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridcolumn.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridrow.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/layoutgrid.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/linearlayout/linearlayoutitem.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/linearlayout.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/panel/panel-content.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/panel/panel-footer.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/panel.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/tabs/tabpane.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/tabs.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/tile.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/wizard/wizardstep.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/wizard.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/card/card-content.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/card/card-footer.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/card.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/form/form-body.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/form/form-field.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/form/form-footer.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/form.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/list/list-template.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/list.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/device/barcodescanner.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/device/camera.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/dialogs/alertdialog.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/dialogs/confirmdialog.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/dialogs/dialog.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/dialogs/dialogactions.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/dialogs/dialogcontent.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/basedataset.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/baseinput.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/basenumber.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/calendar/views.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/calendar.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/checkbox.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/checkboxset.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/chips.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/composite.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/currency.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/epoch/date.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/epoch/datetime.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/epoch/time.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/number.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/radioset.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/rating.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/select.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/slider.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/switch.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/text.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/textarea.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/toggle.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/fileupload.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/navigation/appnavbar.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/navigation/basenav.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/navigation/menu.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/navigation/navbar.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/navigation/navitem.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/navigation/popover.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page/content.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page/left-panel.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page/page-content.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page/partial.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page/partial-container.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page/tabbar.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/page.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/prefab.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/line-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/bar-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/pie-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/area-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/column-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/donut-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/chart/bubble-chart.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/container/tabs/tabheader.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/advanced/network-info-toaster.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/skeleton.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/video.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/custom.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/lottie.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/basic/audio.styledef", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/data/list/list-action-template.styledef", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/advanced/carousel.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/advanced/login.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/advanced/webview.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/advanced/network-info-toaster.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-content.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-template.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page/tabbar.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page/left-panel.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page/partial.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page/content.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page/partial-container.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/page/page-content.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/rating.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/slider.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/basedataset.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/basenumber.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/text.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/toggle.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/fileupload.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/composite.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/textarea.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/radioset.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/select.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/chips.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/number.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/checkbox.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/switch.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/checkboxset.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/baseinput.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/currency.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/calendar.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/calendar/views.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/epoch/time.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/epoch/datetime.styledef", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/epoch/date.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/theme/components/input/epoch/datetime.styledef", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/input/epoch/datetime.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/donut-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/area-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/bar-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/column-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/bubble-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/line-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/chart/pie-chart.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/modal.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/progress-circle.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/message.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/skeleton.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/label.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/lottie.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/search.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/buttongroup.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/spinner.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/audio.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/progress-bar.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/picture.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/icon.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/button.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/anchor.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/custom.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/basic/video.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/navigation/navitem.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/navigation/appnavbar.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/navigation/basenav.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/navigation/popover.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/navigation/navbar.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/navigation/menu.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/tile.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/tabs.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/wizard.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/linearlayout.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/layoutgrid.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/accordion.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/panel.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/tabs/tabpane.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/tabs/tabheader.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridrow.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridcolumn.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/panel/panel-footer.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/panel/panel-content.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/accordion/accordionpane.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/wizard/wizardstep.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/container/linearlayout/linearlayoutitem.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/dialogs/confirmdialog.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/dialogs/dialogcontent.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/dialogs/dialog.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/dialogs/alertdialog.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/dialogs/dialogactions.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/device/barcodescanner.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/device/camera.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/list.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/form.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/card.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/form/form-footer.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/form/form-action.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/form/form-field.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/form/form-body.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/card/card-content.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/card/card-footer.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/list/list-template.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/theme/components/data/list/list-action-template.styledef.ts": [{"to": "wavemaker-rn-codegen/src/theme/components/base-style-definition", "type": "imports"}], "wavemaker-rn-codegen/src/variables/variable.transformer.ts": [{"to": "wavemaker-rn-codegen/src/transpile/bind.ex.transformer", "type": "imports"}, {"to": "lodash", "type": "imports"}], "wavemaker-rn-codegen/src/templates/project/index.js": [{"to": "expo", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/templates/project/App", "type": "imports"}], "wavemaker-rn-codegen/src/templates/project/revert-to-1.0.styles.js": [{"to": "@wavemaker/app-rn-runtime/styles/theme", "type": "imports"}], "wavemaker-rn-codegen/src/templates/project/wavepulse/wavepulse.agent.js": [{"to": "@wavemaker/wavepulse-agent/index", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/templates/project/wavepulse/constants", "type": "imports"}, {"to": "axios", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/templates/project/wavepulse/rn2css.json", "type": "imports"}, {"to": "react-native", "type": "imports"}], "wavemaker-rn-codegen/src/templates/project/component/dynamic/component-generator.js": [{"to": "@wavemaker/app-rn-runtime/components/input/text/text.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/textarea/textarea.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/number/number.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/currency/currency.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/select/select.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/basic/search/search.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/chips/chips.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/checkbox/checkbox.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/checkboxset/checkboxset.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/toggle/toggle.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/switch/switch.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/radioset/radioset.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/epoch/date/date.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/epoch/datetime/datetime.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/epoch/time/time.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/slider/slider.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/input/rating/rating.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/container/layoutgrid/layoutgrid.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/container/layoutgrid/gridrow/gridrow.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/container/layoutgrid/gridcolumn/gridcolumn.component", "type": "imports"}, {"to": "@wavemaker/rn-codegen/src/transpile/components/transform-register", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/data/form/form-field/form-field.component", "type": "imports"}, {"to": "@wavemaker/app-rn-runtime/components/basic/label/label.component", "type": "imports"}, {"to": "@wavemaker/rn-codegen/src/transpile/transpile", "type": "imports"}, {"to": "@babel/standalone", "type": "imports"}, {"to": "react", "type": "imports"}], "wavemaker-rn-codegen/src/templates/project/component/dynamic/form.generator.js": [{"to": "wavemaker-rn-codegen/src/templates/project/component/dynamic/component-generator", "type": "imports"}, {"to": "lodash", "type": "imports"}], "wavemaker-rn-codegen/src/templates/project/esbuild/esbuild.script.js": [{"to": "number", "type": "uses_component"}, {"to": "PackagerAsset", "type": "uses_component"}, {"to": "Value", "type": "uses_component"}], "wavemaker-rn-codegen/src/templates/project/esbuild/expo-camera-patch/useWebQRScanner.js": [{"to": "react", "type": "imports"}, {"to": "wavemaker-rn-codegen/src/templates/project/esbuild/expo-camera-patch/WebCameraUtils", "type": "imports"}], "wavemaker-rn-codegen/src/profiles/expo-preview.profile.ts": [{"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}], "wavemaker-rn-codegen/src/profiles/profile.ts": [{"to": "lodash", "type": "imports"}], "wavemaker-rn-codegen/src/profiles/web-preview.profile.ts": [{"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}], "wavemaker-rn-codegen/src/profiles/expo-web-preview.profile.ts": [{"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}], "wavemaker-rn-codegen/src/profiles/development.profile.ts": [{"to": "wavemaker-rn-codegen/src/profiles/profile", "type": "imports"}]}, "file_contents": {"wavemaker-rn-codegen/jest.config.js": "module.exports = {\n    preset: 'ts-jest',\n    testEnvironment: 'node',\n};", "wavemaker-rn-codegen/index.ts": "#!/usr/bin/env node\nimport yargs from 'yargs';\nimport fs from 'fs-extra';\nimport Path from 'path';\nimport { hideBin } from 'yargs/helpers';\nimport { ThemeService } from './src/theme/theme.service';\nimport { buildCmd } from './command';\nimport registerHelpers from './src/handlebar-helpers';\n\nconst envConfig: any = process.env;\n\nconst extractDArgs = (cmd: string) => {\n    const dArgs: any = {};\n    const regex = /-D(\\w+\\.\\w+)=([^\\s]+)/g;\n    cmd.match(regex)?.forEach(arg => {\n        const [key, value] = arg.slice(2).split('=');\n        dArgs[key] = value;\n    });\n    return dArgs;\n};\n  \nconst getConfigOptions = (args: any) =>{\n    const mvnArgs = envConfig && envConfig[\"MAVEN_CMD_LINE_ARGS\"] && extractDArgs(envConfig[\"MAVEN_CMD_LINE_ARGS\"]);\n    let options = {\n        appId: args.appId,\n        serverUrl: args.serverUrl\n    }\n    if(mvnArgs){\n        options = {\n            appId: mvnArgs[\"mobile.appId\"],\n            serverUrl: mvnArgs[\"mobile.serverUrl\"]\n        }\n    }\n    return options;\n}\n\nconst getBuildCmd = (dest: string, onlyLocal = false): Promise<Function> => {\n     if (!onlyLocal) {\n        return Promise.resolve((args: any) => {\n            args.options= getConfigOptions(args);\n            return buildCmd(args)\n                // try local build if exists\n                .then(() => getBuildCmd(dest, true))\n                .then(buildCmd => buildCmd({...args, autoClean: false}));\n        });\n    } else {\n        return Promise.resolve(() => {});\n    }\n};\n\nconst updateThemeArtifacts = (artifactsPath: string) => {\n    const themeService = new ThemeService();\n    const themeParentFolder = `${artifactsPath}/default/themes`;\n    const themesInfo = fs.readdirSync(themeParentFolder, {\n        withFileTypes: true\n    }).filter(info => {\n        const p = `${themeParentFolder}/${info.name}`;\n        if (info.isDirectory()) {\n            const text = fs.readFileSync(`${p}/.wmproject.properties`, 'utf-8');\n            return text.indexOf('NATIVE_MOBILE') > 0;\n        }\n        return false;\n    }).map(info => ({\n        path: `${themeParentFolder}/${info.name}`,\n        name: info.name\n    }));\n    return Promise.all(themesInfo.map(themeInfo => {\n        const path = themeInfo.path;\n        const theme = themeInfo.name;\n        return themeService.update(path)\n            .then(() => console.log(`${theme} updated`))\n            .then(() => themeService.compile(path))\n            .then(() => {\n                console.log(`${theme} compiled`);\n                fs.removeSync(`${path}/build`);\n                if (fs.existsSync(`${path}/artifact`)) {\n                    fs.removeSync(`${path}/artifact`);\n                }\n                fs.moveSync(`${path}/dist`, `${path}/artifact`);\n                console.log(`${theme} created`);\n            });\n    })).then(() => {\n        console.log(`Themes at ${artifactsPath} are updated.`);\n    });\n};\n\nyargs(hideBin(process.argv))\n    .command('transpile <src> <dest>',\n        'to create a react native project out of WaveMaker project',\n        (yargs) => {\n            yargs.positional('src', {\n                describe: 'url of the project src',\n                type: 'string',\n                normalize: false,\n                coerce: (path) => Path.resolve(path)\n            }).positional('dest', {\n                describe: 'location at which the project',\n                type: 'string',\n                normalize: true,\n                coerce: (path) => Path.resolve(path)\n            }).options({\n                profile: {\n                    describe: \"code generation profile \",\n                    type: 'string',\n                    choices: ['default', 'development', 'web-preview', 'expo-preview', 'expo-web-preview', 'skip-build'],\n                    alias: 'p',\n                    default: 'default'\n                },\n                autoClean: {\n                    describe: \"Clean the dest folder, if required.\",\n                    type: \"boolean\",\n                    default: true\n                },\n                rnAppPath: {\n                    describe: \"Location of the rn-app-template to use.\",\n                    type: \"string\",\n                    default: ''\n                },\n                page: {\n                    describe: \"Genrates only the given page or partail and prefabs included in those pages.\",\n                    type: \"string\"\n                },\n                incrementalBuild: {\n                    describe: \"Transpile only the modified content since last build.\",\n                    type: \"boolean\",\n                    default: true\n                },\n            });\n        }, (argv: any) => {\n            console.time('transpile')\n            return getBuildCmd(argv.dest)\n                .then(buildCmd => buildCmd(argv))\n                .then(() => {\n                    console.timeEnd('transpile')\n                });\n        })\n    .command('theme', 'Theme commands',\n        (yargs) => {\n            const themeService = new ThemeService();\n            registerHelpers();\n            yargs.command('generate <name> [path]',\n                'to generate theme',\n                (yargs) => {\n                    yargs.positional('name', {\n                        describe: 'name of the theme',\n                        type: 'string'\n                    }).positional('path', {\n                        describe: 'Folder at which the theme has to be created.',\n                        type: 'string',\n                        default: '.',\n                        normalize: true,\n                        coerce: (path) => Path.resolve(path)\n                    });\n            }, (argv: any) => {\n                return themeService.generate(argv.name, argv.path).then(() => {\n                    console.log(`${argv.name} theme is generated at ${argv.path}.`);\n                });\n            }).command('compile [path]',\n                'to compile theme',\n                (yargs) => {\n                    yargs.positional('path', {\n                        describe: 'path of theme project',\n                        type: 'string',\n                        default: '.',\n                        normalize: true,\n                        coerce: (path) => Path.resolve(path)\n                    }).option('updatePlatform', {\n                        describe: 'path of theme project',\n                        type: 'string',\n                        default: false,\n                        normalize: true\n                    });\n                }, (argv: any) => {\n                return Promise.resolve().then(() => {\n                    if (argv.updatePlatform) {\n                        return themeService.update(argv.path);\n                    }\n                }).then(() => themeService.compile(argv.path))\n                .then(() => themeService.zipTheme(argv.path))\n                .then(() => console.log('Theme compiled successfully.'));\n            }).command('update [path]',\n                'to update wavemaker theme',\n                (yargs) => {\n                    yargs.positional('path', {\n                        describe: 'path of theme project',\n                        type: 'string',\n                        default: '.',\n                        normalize: true,\n                        coerce: (path) => Path.resolve(path)\n                    });\n                }, (argv: any) => {\n                return themeService.update(argv.path).then(() => {\n                    console.log('Theme updated successfully.');\n                });\n            }).command('update-artifacts [path]',\n                'to update themes in artifacts.',\n                (yargs) => {\n                    yargs.positional('path', {\n                        describe: 'path to the folder in which themes are found',\n                        type: 'string',\n                        default: __dirname + '/../../wavemaker-artifacts',\n                        normalize: true\n                    });\n                }, (argv: any) => updateThemeArtifacts(argv.path));\n        })\n        .showHelpOnFail(false)\n        .argv;\n", "wavemaker-rn-codegen/command.ts": "import registerTransformers from './src/transpile/components/transform-register';\nimport getProjectService from './src/project.service';\nimport registerHelpers from './src/handlebar-helpers';\nimport AppGenerator from './src/app.generator';\nimport execa from 'execa';\nimport fs from 'fs-extra';\nimport crypto from 'crypto';\nimport { homedir } from 'os';\nimport _profile, { setProfile } from './src/profiles/profile';\nimport developmentProfile from './src/profiles/development.profile';\nimport expoProfile from './src/profiles/expo-preview.profile';\nimport webPreviewProfile from './src/profiles/web-preview.profile';\nimport expoWebPreviewProfile from './src/profiles/expo-web-preview.profile';\nimport { IncrementalBuilder } from './src/increment-builder';\nimport { readAndReplaceFileContent, writeFile } from './src/utils';\n\n\nconst version = require('./package.json').version;\nconst sampleProjectPath = `${homedir()}/.wm/node_modules/wm-rn-sample-app/${version}/`;\n\nconst isConnectedToInternet = () => {\n    return new Promise((resolve) => {\n        const req = require('https').get('https://npmjs.com', {timeout: 5000}, () => {\n            resolve(true);\n        });\n        req.on('error', (e: any) => {\n            console.error(e);\n            resolve(false);\n        });\n        req.on('timeout', (e: any) => {\n            console.error('npmjs request timed out.');\n            resolve(false);\n        });\n    });\n};\n\nconst npmInstall = (src: string) => {\n    // After npm proxy, there is no need to check for internet before npm install\n    console.time('npm install');\n    console.log('Installing node modules at ' + src);\n    return execa('npm', ['install'], {\n        cwd:  src,\n        stdio: [process.stdin, process.stdout, process.stderr]\n    }).then(() => {\n        console.timeEnd('npm install');\n    });\n};\n\nconst getLastModifiedDate = (p: string) => {\n    try {\n        return fs.statSync(p).mtime;\n    } catch (error) {\n        return 0;\n    }\n};\n\nconst cleanNodeModulesIfNecessary = (src: string, dest: string, forceClean = false) => {\n    const packageJSON = `${dest}/package.json`;\n    const dependencies = `${dest}/dependencies.info`;\n    const nodeModules = `${dest}/node_modules`;\n    let clean = forceClean;\n    if (!fs.existsSync(dependencies) || !fs.existsSync(nodeModules)) {\n        clean = true;\n    }\n    const data = fs.readFileSync(dest + '/package.json', 'utf-8');\n    const hash = crypto.createHash('md5').update(data, 'utf-8').digest('hex');\n    let dependenciesData = {\n        packageHash: '',\n        cleanInstall: 0\n    };\n    if (!clean) {\n        try {\n            dependenciesData = JSON.parse(fs.readFileSync(dependencies,  'utf-8'));\n            clean = dependenciesData.packageHash !== hash;\n        } catch(e) {\n            console.error(e);\n            clean = true;\n        }\n    }\n    if (!clean && fs.existsSync(packageJSON)) {\n        const _package = require(packageJSON) as any;\n        let files: string[] = [];\n        if (_package.dependencies) {\n            files.push(...Object.values(_package.dependencies) as string[]);\n        }\n        if (_package.devDependencies) {\n            files.push(...Object.values(_package.devDependencies) as string[]);\n        }\n        files = files.filter((f: string) => f.startsWith('file:')).map(f => `${src}/${f.replace('file:', '')}`);\n        const dependenciesLastModifiedTime = files.map(p => getLastModifiedDate(p)).reduce((m, c) => m > c ? m : c, 0) as number;\n        clean = dependenciesData.cleanInstall < dependenciesLastModifiedTime;\n    }\n    if (clean) {\n        if (fs.existsSync(nodeModules)) {\n            fs.rmdirSync(nodeModules, {\n                recursive: true\n            });\n        }\n        fs.mkdirpSync(nodeModules);\n        fs.writeFileSync(dependencies, JSON.stringify({\n            packageHash: hash,\n            cleanInstall: Date.now()\n        }, null, 4));\n    }\n    return clean;\n};\n\nconst installDependencies = (src: string, dest: string, force = false) => {\n    if(!cleanNodeModulesIfNecessary(src, dest, force)) {\n        return Promise.resolve(false);\n    }\n    return Promise.resolve().then(() => {\n       return npmInstall(dest);\n    }) \n    .then(() => true);\n}\n\nconst generateWebCmd = (src: string, dest: string) => {\n    updatePackagesForEsBuild(dest);\n    return installDependencies(src, dest)\n    .then((updated) => {\n        if (updated || !fs.existsSync(`${dest}/esbuild/node_modules`)) {\n            return execa('node', ['./esbuild/esbuild.script.js', '--prepare-lib'], {\n                cwd:  dest,\n                stdio: [process.stdin, process.stdout, process.stderr]\n            });\n        }\n    })\n    .then(() => console.time('web preview build'))\n    //.then(() => execa('expo', ['build:web', '-d', '--no-pwa'], {\n    .then(() => execa('node', ['esbuild/esbuild.script.js'], {\n        cwd: dest,\n        stdio: [process.stdin, process.stdout, process.stderr]\n    })).then(() => {\n        const data = fs.readFileSync(dest + '/web-build/index.html', 'utf-8');\n        const modData = data.replace(new RegExp('\"/static', 'g'), '\"./static');\n        fs.writeFileSync(dest + '/web-build/index.html', modData);\n        if (!src.startsWith('http')) {\n            fs.copySync(dest + '/web-build', src + '/rn-bundle');\n        }\n        console.timeEnd('web preview build');\n    });\n};\n\n// This method is added as reanimated plugin is updated to latest version to support expo sdk 45.\n// once esbuild works with latest version then this can be removed.\nconst updatePackagesForEsBuild = (dest: string) => {\n    let content = fs.readFileSync(`${dest}/babel.config.js`, 'utf-8');\n    content = content.replace(`'transform-remove-console',`, '');  \n    fs.writeFileSync(`${dest}/babel.config.js`, content);\n}\n\nconst removeEsBuildFiles = (dest: string) => {\n    fs.removeSync(`${dest}/esbuild`);\n    const packageJson = fs.readJSONSync(`${dest}/package.json`);\n    delete packageJson['dependencies']['@unimodules/react-native-adapter'];\n    delete packageJson['devDependencies']['esbuild'];\n    delete packageJson['devDependencies']['fs-extra'];\n    fs.writeFileSync(`${dest}/package.json`, JSON.stringify(packageJson, null, 4));\n};\n\nconst installLocalDependencies = (dest: string) => {\n    const packageInfo = fs.readJsonSync(`${dest}/package.json`, {encoding: 'utf-8'});\n    if (packageInfo?.dependencies['@wavemaker/app-rn-runtime']?.indexOf('.yalc') > 0) {\n        return execa('yalc', ['add', '@wavemaker/variables', '@wavemaker/app-rn-runtime', '@wavemaker/rn-codegen' ], {\n            cwd: dest\n        });\n    }\n};\n\nconst isCleanNecessary = (dest: string) => {\n    const file = `${__dirname}/.wm_lock`;\n    if (!fs.existsSync(file)) {\n        fs.writeFileSync(file, '');\n        return true;\n    }\n    const platformUpdatedOn = getLastModifiedDate(file);\n    const destCreatedOn = getLastModifiedDate(dest);\n    return platformUpdatedOn > destCreatedOn;\n};\n\nconst updateAppId = (dest:string, appId: string) => {\n    const wm_rn_config = fs.readJsonSync(`${dest}/wm_rn_config.json`, {\n        encoding: 'utf8'\n    });\n    wm_rn_config.id = appId;\n    writeFile(`${dest}/wm_rn_config.json`, JSON.stringify(wm_rn_config, null, 4));\n    const app_config = fs.readJsonSync(`${dest}/app.json`, {\n        encoding: 'utf8'\n    });\n    app_config[\"expo\"][\"ios\"][\"bundleIdentifier\"] = appId;\n    app_config[\"expo\"][\"android\"][\"package\"] = appId;\n    writeFile(`${dest}/app.json`, JSON.stringify(app_config, null, 4));\n}\n\nexport const buildCmd = ({src, dest, page, profile, autoClean, incrementalBuild, options, rnAppPath}:\n        {src: string, dest: string, page: string, profile: string, autoClean : boolean, incrementalBuild: boolean, options: any, rnAppPath: string}) => {\n    const isRemoteProvider = src.startsWith('http');\n    const appUrl = isRemoteProvider ? src: '..';\n    const buildDataPath = `${dest}/.build`;\n    let buildData = {} as any;\n    let buildStartTime = Date.now();\n    registerTransformers();\n    registerHelpers();\n    console.log(`Generating the project from \"${src}\".`);\n    const projectService = getProjectService({'src': src});\n    let incBuilder = undefined;\n    if(options.appId){\n        updateAppId(dest, options.appId);\n    }\n    if (!src.startsWith('http') && fs.existsSync(buildDataPath)) {\n        buildData = fs.readJSONSync(buildDataPath) || {};\n        if (profile !== 'web-preview' && incrementalBuild && buildData.lastBuildTime) {\n            incBuilder = new IncrementalBuilder(src, buildData.lastBuildTime);\n        }\n    }\n    const generator = new AppGenerator(dest, projectService, appUrl, undefined, incBuilder, options);\n    const rnBundle = `${src}/rn-bundle`;\n    const buildInfo = `${__dirname}/src/templates/build-info`;\n    console.time('App creation');\n    if (profile === 'expo-preview') {\n        setProfile(expoProfile);\n    } else if (profile === 'expo-web-preview') {\n        setProfile(expoWebPreviewProfile);\n    } else if (profile === 'web-preview') {\n        setProfile(webPreviewProfile);\n    } else if (isRemoteProvider || profile === 'development') {\n        setProfile(developmentProfile);\n    } else if (profile === 'skip-build') {\n        const data = fs.readFileSync(`${buildInfo}/info.html`, 'utf-8');\n        const modData = data.replace(/\\{\\{modified_date\\}\\}/g, Date.now() + '');\n        fs.mkdirpSync(rnBundle);\n        fs.writeFileSync(`${rnBundle}/index.html`, modData);\n        return Promise.resolve();\n    }\n    if (rnAppPath) {\n        if (profile === 'expo-preview') {\n            _profile.packageLockFilePath = `${rnAppPath}/expo/package-lock.json`;\n            _profile.yarnLockFilePath = `${rnAppPath}/expo/yarn.lock`;\n        } else {\n            _profile.packageLockFilePath = `${rnAppPath}/web/package-lock.json`;\n        }\n    }\n    return Promise.resolve().then(() => {\n        if (_profile.generateWeb) {\n            if (autoClean \n                && fs.existsSync(dest)\n                && isCleanNecessary(dest)) {\n                fs.removeSync(dest);\n                fs.mkdirpSync(dest);\n            }\n            if (fs.existsSync(rnBundle)) {\n                fs.removeSync(rnBundle);\n            }\n            fs.mkdirpSync(rnBundle);\n            fs.copyFileSync(`${buildInfo}/index.html`, `${rnBundle}/index.html`);\n        }\n    }).then(() => {\n        if (page) {\n            return generator.generateFragment(page as string)\n        }\n        return generator.generateApp();\n    }).then(() => {\n        buildData.lastBuildTime = buildStartTime;\n        fs.writeJSONSync(buildDataPath, buildData);\n        console.timeEnd('App creation');\n    })\n    .then(() => installLocalDependencies(dest))\n    .then(() => {\n        const localFile = `${dest}/.yalc/@wavemaker/rn-codegen/src/utils.js`;\n        readAndReplaceFileContent(localFile, (c: string)=>{\n            c = c.replace('const fs_extra', '//const fs_extra');\n            return c;\n        })\n        if (!fs.existsSync(localFile)) {\n            readAndReplaceFileContent(`${dest}/node_modules/@wavemaker/rn-codegen/src/utils.js`, (c: string)=>{\n                c = c.replace('const fs_extra', '//const fs_extra');\n                return c;\n            });\n        }\n        if (_profile.generateWeb) {\n            return generateWebCmd(src, dest);\n        } else if (_profile.targetPlatform === 'native') {\n            return removeEsBuildFiles(dest);\n        }\n    }).catch((e) => {\n        if (_profile.generateWeb) {\n            fs.mkdirpSync(rnBundle);\n            fs.copyFileSync(`${buildInfo}/error.html`, `${rnBundle}/index.html`);\n        }\n        Promise.reject(e);\n    });\n};\n", "wavemaker-rn-codegen/test/theme/rn-stylesheet.transpiler.test.ts": "import { describe, test, expect } from '@jest/globals';\n\nimport {RnStylesheetTranspiler } from '../../src/theme/rn-stylesheet.transpiler';\n\nconst instance = new RnStylesheetTranspiler();\n\ndescribe('Check design style generation', () => {\n    const prefix = '.wm-studio .wm-right-panel-container .file-container-pane .wm-file-container .wm-workspace .workspace-content .canvas-panel ';\n    test('basic style', () => {\n        const input = `\n            .app-linearlayout {\n                margin-top: 8px;\n                padding: 6px;\n            }\n        `;\n\n        const output = instance.toDesignStyles(input);\n        expect(output).toEqual(prefix + ' .app-linear-layout{margin-top:8px;padding:6px;}');\n    });\n    test('class selector style', () => {\n        const input = `\n            .mylayout.app-linearlayout {\n                margin-top: 8px\n            }\n        `;\n\n        const output = instance.toDesignStyles(input);\n        expect(output).toEqual(prefix + ' .mylayout.app-linear-layout{margin-top:8px;}');\n    });\n\n    test('inner child style', () => {\n        const input = `\n            .mybtn.app-button-icon.app-icon-text {\n                margin-top: 10px\n            }\n        `;\n\n        const output = instance.toDesignStyles(input);\n        expect(output).toEqual(prefix + ' .mybtn.app-button .app-icon+.app-label{margin-top:10px;}');\n    });\n\n    test('multi selector', () => {\n        const input = `\n        .mybtn.app-button-icon.app-icon-shape,\n        .mybtn.app-button-icon.app-icon-text {\n                margin-top: 13px\n            }\n        `;\n\n        const output = instance.toDesignStyles(input);\n        expect(output).toEqual(prefix + ' .mybtn.app-button .app-icon,' \n            + prefix + ' .mybtn.app-button .app-icon+.app-label{margin-top:13px;}');\n    });\n\n    test('prefab style', () => {\n        const input = `\n            .my-prefab.app-prefab.mybtn.app-button-icon.app-icon-shape {\n                margin-top: 11px\n            }\n        `;\n\n        const output = instance.toDesignStyles(input);\n        expect(output).toEqual(prefix + ' .my-prefab.app-prefab .mybtn.app-button .app-icon{margin-top:11px;}');\n    });\n\n    test('partial style', () => {\n        const input = `\n            .my-partial.app-partial.mybtn.app-button-icon.app-icon-shape {\n                margin-top: 12px\n            }\n        `;\n\n        const output = instance.toDesignStyles(input);\n        expect(output).toEqual(prefix + ' .my-partial.app-partial .mybtn.app-button .app-icon{margin-top:12px;}');\n    });\n});\n\ndescribe('Check react native style generation', () => {\n    test('basic style', () => {\n        const input = `\n            .app-label {\n                margin-top: 8px\n            }\n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        expect(output['app-label'].root.marginTop).toEqual(8);\n    });\n\n    test('class selector style', () => {\n        const input = `\n            .title.app-label {\n                margin-top: 8px\n            }\n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        expect(output.title.root.marginTop).toEqual(8);\n    });\n\n    test('inner child style', () => {\n        const input = `\n            .mybtn.app-button-icon.app-icon-text {\n                margin-top: 10px\n            }\n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        expect(output.mybtn.icon.text.marginTop).toEqual(10);\n    });\n\n    test('multi selector', () => {\n        const input = `\n        .success-container .app-container,\n        .danger-container .app-container {   \n            width: 100%;\n            height: 40px;\n            margin: 4px 0;\n        }\n        .success-container .app-container {\n            background-color: #00ff00;\n        }\n        .danger-container .app-container { \n            background-color: #ff0000;\n        }\n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        expect(output['success-container'].root.marginTop).toEqual(4);\n        expect(output['danger-container'].root.marginTop).toEqual(4);\n        expect(output['success-container'].root.backgroundColor).toEqual('#00ff00');\n        expect(output['danger-container'].root.backgroundColor).toEqual('#ff0000');\n    });\n\n    test('prefab style', () => {\n        const input = `\n            .my-prefab.app-prefab.mybtn.app-button-icon.app-icon-shape {\n                margin-top: 11px\n            }\n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        expect(output['my-prefab']['mybtn'].icon.icon.marginTop).toEqual(11);\n    });\n\n    test('partial style', () => {\n        const input = `\n            .my-partial.app-partial.mybtn.app-button-icon.app-icon-shape {\n                margin-top: 12px\n            }\n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        expect(output['my-partial']['mybtn'].icon.icon.marginTop).toEqual(12);\n    });\n});\n\ndescribe('Style Play ground', () => {\n    test('test', () => {\n        const input = `\n        \n        `;\n\n        const output = instance.toReactNativeStyles(input);\n        console.log(output);\n    });\n});", "wavemaker-rn-codegen/style-docs/doc.generator.js": "const Eleventy = require(\"@11ty/eleventy\");\nconst eleventyNavigationPlugin = require(\"@11ty/eleventy-navigation\");\nconst { JSDOM } = require('jsdom');\nnew Eleventy( \".\", \"../dist/style-docs\", {\n    quietMode: true,\n    config: (eleventyConfig) => {\n        let markdownIt = require(\"markdown-it\");\n        eleventyConfig.addPassthroughCopy(\"./css/\");\n        eleventyConfig.addPassthroughCopy(\"./images/\");\n        eleventyConfig.addPassthroughCopy(\"./js/\");\n        eleventyConfig.addPlugin(eleventyNavigationPlugin);\n        eleventyConfig.setTemplateFormats([\"md\"]);\n        eleventyConfig.addLiquidTag(\"relativeUrl\", function(url) {\n            return {\n              parse: function(tagToken, remainingTokens) {\n                this.str = tagToken.args;\n              },\n              render: async function(scope, hash) {\n                var path = scope.environments.page.inputPath;\n                path = path.replace('./', '');\n                path = path.split('/').map(c => '..').join('/');\n                return path + (await this.liquid.evalValue(this.str, scope));\n              }\n            };\n          });\n        let options = {\n            html: true,\n            breaks: true,\n            linkify: true\n        };\n        eleventyConfig.addTransform(\n            'lazy-load-images',\n            (content, outputPath) => {\n                if (outputPath.endsWith('.html')) {\n                    const dom = new JSDOM(content)\n                    const document = dom.window.document\n      \n                    const [...tables] = document.getElementsByTagName('table');\n      \n                    tables.forEach((table) => {\n                        table.setAttribute('class', 'table table-bordered')\n                    });\n      \n                    return document.documentElement.outerHTML\n                } else {\n                    return content\n                }\n            });\n        eleventyConfig.setLibrary(\"md\", markdownIt(options));\n\n    }\n}).write();", "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.esm.js": "/*!\n  * Bootstrap v5.1.3 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\nimport * as Popper from '@popperjs/core';\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst MAX_UID = 1000000;\nconst MILLISECONDS_MULTIPLIER = 1000;\nconst TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\nconst toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`;\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n};\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID);\n  } while (document.getElementById(prefix));\n\n  return prefix;\n};\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target');\n\n  if (!selector || selector === '#') {\n    let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n\n    if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {\n      return null;\n    } // Just in case some CMS puts out a full URL with the anchor appended\n\n\n    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n      hrefAttr = `#${hrefAttr.split('#')[1]}`;\n    }\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n  }\n\n  return selector;\n};\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element);\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null;\n  }\n\n  return null;\n};\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element);\n  return selector ? document.querySelector(selector) : null;\n};\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0;\n  } // Get transition-duration of the element\n\n\n  let {\n    transitionDuration,\n    transitionDelay\n  } = window.getComputedStyle(element);\n  const floatTransitionDuration = Number.parseFloat(transitionDuration);\n  const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0;\n  } // If multiple durations are defined, take the first\n\n\n  transitionDuration = transitionDuration.split(',')[0];\n  transitionDelay = transitionDelay.split(',')[0];\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n};\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END));\n};\n\nconst isElement = obj => {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n\n  if (typeof obj.jquery !== 'undefined') {\n    obj = obj[0];\n  }\n\n  return typeof obj.nodeType !== 'undefined';\n};\n\nconst getElement = obj => {\n  if (isElement(obj)) {\n    // it's a jQuery object or a node element\n    return obj.jquery ? obj[0] : obj;\n  }\n\n  if (typeof obj === 'string' && obj.length > 0) {\n    return document.querySelector(obj);\n  }\n\n  return null;\n};\n\nconst typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes).forEach(property => {\n    const expectedTypes = configTypes[property];\n    const value = config[property];\n    const valueType = value && isElement(value) ? 'element' : toType(value);\n\n    if (!new RegExp(expectedTypes).test(valueType)) {\n      throw new TypeError(`${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n    }\n  });\n};\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false;\n  }\n\n  return getComputedStyle(element).getPropertyValue('visibility') === 'visible';\n};\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true;\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true;\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled;\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n};\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null;\n  } // Can find the shadow root otherwise it'll return the document\n\n\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode();\n    return root instanceof ShadowRoot ? root : null;\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element;\n  } // when we don't find a shadow root\n\n\n  if (!element.parentNode) {\n    return null;\n  }\n\n  return findShadowRoot(element.parentNode);\n};\n\nconst noop = () => {};\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\n\n\nconst reflow = element => {\n  // eslint-disable-next-line no-unused-expressions\n  element.offsetHeight;\n};\n\nconst getjQuery = () => {\n  const {\n    jQuery\n  } = window;\n\n  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return jQuery;\n  }\n\n  return null;\n};\n\nconst DOMContentLoadedCallbacks = [];\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        DOMContentLoadedCallbacks.forEach(callback => callback());\n      });\n    }\n\n    DOMContentLoadedCallbacks.push(callback);\n  } else {\n    callback();\n  }\n};\n\nconst isRTL = () => document.documentElement.dir === 'rtl';\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery();\n    /* istanbul ignore if */\n\n    if ($) {\n      const name = plugin.NAME;\n      const JQUERY_NO_CONFLICT = $.fn[name];\n      $.fn[name] = plugin.jQueryInterface;\n      $.fn[name].Constructor = plugin;\n\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT;\n        return plugin.jQueryInterface;\n      };\n    }\n  });\n};\n\nconst execute = callback => {\n  if (typeof callback === 'function') {\n    callback();\n  }\n};\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback);\n    return;\n  }\n\n  const durationPadding = 5;\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n  let called = false;\n\n  const handler = ({\n    target\n  }) => {\n    if (target !== transitionElement) {\n      return;\n    }\n\n    called = true;\n    transitionElement.removeEventListener(TRANSITION_END, handler);\n    execute(callback);\n  };\n\n  transitionElement.addEventListener(TRANSITION_END, handler);\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement);\n    }\n  }, emulatedDuration);\n};\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\n\n\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n\n  if (index === -1) {\n    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];\n  }\n\n  const listLength = list.length;\n  index += shouldGetNext ? 1 : -1;\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength;\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))];\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\nconst stripNameRegex = /\\..*/;\nconst stripUidRegex = /::\\d+$/;\nconst eventRegistry = {}; // Events storage\n\nlet uidEvent = 1;\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n};\nconst customEventsRegex = /^(mouseenter|mouseleave)/i;\nconst nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n/**\n * ------------------------------------------------------------------------\n * Private methods\n * ------------------------------------------------------------------------\n */\n\nfunction getUidEvent(element, uid) {\n  return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n}\n\nfunction getEvent(element) {\n  const uid = getUidEvent(element);\n  element.uidEvent = uid;\n  eventRegistry[uid] = eventRegistry[uid] || {};\n  return eventRegistry[uid];\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    event.delegateTarget = element;\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn);\n    }\n\n    return fn.apply(element, [event]);\n  };\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector);\n\n    for (let {\n      target\n    } = event; target && target !== this; target = target.parentNode) {\n      for (let i = domElements.length; i--;) {\n        if (domElements[i] === target) {\n          event.delegateTarget = target;\n\n          if (handler.oneOff) {\n            EventHandler.off(element, event.type, selector, fn);\n          }\n\n          return fn.apply(target, [event]);\n        }\n      }\n    } // To please ESLint\n\n\n    return null;\n  };\n}\n\nfunction findHandler(events, handler, delegationSelector = null) {\n  const uidEventList = Object.keys(events);\n\n  for (let i = 0, len = uidEventList.length; i < len; i++) {\n    const event = events[uidEventList[i]];\n\n    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n      return event;\n    }\n  }\n\n  return null;\n}\n\nfunction normalizeParams(originalTypeEvent, handler, delegationFn) {\n  const delegation = typeof handler === 'string';\n  const originalHandler = delegation ? delegationFn : handler;\n  let typeEvent = getTypeEvent(originalTypeEvent);\n  const isNative = nativeEvents.has(typeEvent);\n\n  if (!isNative) {\n    typeEvent = originalTypeEvent;\n  }\n\n  return [delegation, originalHandler, typeEvent];\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return;\n  }\n\n  if (!handler) {\n    handler = delegationFn;\n    delegationFn = null;\n  } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n\n  if (customEventsRegex.test(originalTypeEvent)) {\n    const wrapFn = fn => {\n      return function (event) {\n        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n          return fn.call(this, event);\n        }\n      };\n    };\n\n    if (delegationFn) {\n      delegationFn = wrapFn(delegationFn);\n    } else {\n      handler = wrapFn(handler);\n    }\n  }\n\n  const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n  const events = getEvent(element);\n  const handlers = events[typeEvent] || (events[typeEvent] = {});\n  const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n  if (previousFn) {\n    previousFn.oneOff = previousFn.oneOff && oneOff;\n    return;\n  }\n\n  const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n  const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n  fn.delegationSelector = delegation ? handler : null;\n  fn.originalHandler = originalHandler;\n  fn.oneOff = oneOff;\n  fn.uidEvent = uid;\n  handlers[uid] = fn;\n  element.addEventListener(typeEvent, fn, delegation);\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n  if (!fn) {\n    return;\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n  delete events[typeEvent][fn.uidEvent];\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {};\n  Object.keys(storeElementEvent).forEach(handlerKey => {\n    if (handlerKey.includes(namespace)) {\n      const event = storeElementEvent[handlerKey];\n      removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n    }\n  });\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '');\n  return customEvents[event] || event;\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFn) {\n    addHandler(element, event, handler, delegationFn, false);\n  },\n\n  one(element, event, handler, delegationFn) {\n    addHandler(element, event, handler, delegationFn, true);\n  },\n\n  off(element, originalTypeEvent, handler, delegationFn) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n    const inNamespace = typeEvent !== originalTypeEvent;\n    const events = getEvent(element);\n    const isNamespace = originalTypeEvent.startsWith('.');\n\n    if (typeof originalHandler !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!events || !events[typeEvent]) {\n        return;\n      }\n\n      removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n      return;\n    }\n\n    if (isNamespace) {\n      Object.keys(events).forEach(elementEvent => {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n      });\n    }\n\n    const storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(keyHandlers => {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        const event = storeElementEvent[keyHandlers];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null;\n    }\n\n    const $ = getjQuery();\n    const typeEvent = getTypeEvent(event);\n    const inNamespace = event !== typeEvent;\n    const isNative = nativeEvents.has(typeEvent);\n    let jQueryEvent;\n    let bubbles = true;\n    let nativeDispatch = true;\n    let defaultPrevented = false;\n    let evt = null;\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args);\n      $(element).trigger(jQueryEvent);\n      bubbles = !jQueryEvent.isPropagationStopped();\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n      defaultPrevented = jQueryEvent.isDefaultPrevented();\n    }\n\n    if (isNative) {\n      evt = document.createEvent('HTMLEvents');\n      evt.initEvent(typeEvent, bubbles, true);\n    } else {\n      evt = new CustomEvent(event, {\n        bubbles,\n        cancelable: true\n      });\n    } // merge custom information in our event\n\n\n    if (typeof args !== 'undefined') {\n      Object.keys(args).forEach(key => {\n        Object.defineProperty(evt, key, {\n          get() {\n            return args[key];\n          }\n\n        });\n      });\n    }\n\n    if (defaultPrevented) {\n      evt.preventDefault();\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt);\n    }\n\n    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n      jQueryEvent.preventDefault();\n    }\n\n    return evt;\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\nconst elementMap = new Map();\nconst Data = {\n  set(element, key, instance) {\n    if (!elementMap.has(element)) {\n      elementMap.set(element, new Map());\n    }\n\n    const instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n      return;\n    }\n\n    instanceMap.set(key, instance);\n  },\n\n  get(element, key) {\n    if (elementMap.has(element)) {\n      return elementMap.get(element).get(key) || null;\n    }\n\n    return null;\n  },\n\n  remove(element, key) {\n    if (!elementMap.has(element)) {\n      return;\n    }\n\n    const instanceMap = elementMap.get(element);\n    instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n    if (instanceMap.size === 0) {\n      elementMap.delete(element);\n    }\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst VERSION = '5.1.3';\n\nclass BaseComponent {\n  constructor(element) {\n    element = getElement(element);\n\n    if (!element) {\n      return;\n    }\n\n    this._element = element;\n    Data.set(this._element, this.constructor.DATA_KEY, this);\n  }\n\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY);\n    EventHandler.off(this._element, this.constructor.EVENT_KEY);\n    Object.getOwnPropertyNames(this).forEach(propertyName => {\n      this[propertyName] = null;\n    });\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated);\n  }\n  /** Static */\n\n\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY);\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n  }\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!');\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`;\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n  const name = component.NAME;\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const target = getElementFromSelector(this) || this.closest(`.${name}`);\n    const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n    instance[method]();\n  });\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$d = 'alert';\nconst DATA_KEY$c = 'bs.alert';\nconst EVENT_KEY$c = `.${DATA_KEY$c}`;\nconst EVENT_CLOSE = `close${EVENT_KEY$c}`;\nconst EVENT_CLOSED = `closed${EVENT_KEY$c}`;\nconst CLASS_NAME_FADE$5 = 'fade';\nconst CLASS_NAME_SHOW$8 = 'show';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Alert extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME$d;\n  } // Public\n\n\n  close() {\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n\n    if (closeEvent.defaultPrevented) {\n      return;\n    }\n\n    this._element.classList.remove(CLASS_NAME_SHOW$8);\n\n    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);\n  } // Private\n\n\n  _destroyElement() {\n    this._element.remove();\n\n    EventHandler.trigger(this._element, EVENT_CLOSED);\n    this.dispose();\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Alert.getOrCreateInstance(this);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](this);\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nenableDismissTrigger(Alert, 'close');\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Alert to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Alert);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$c = 'button';\nconst DATA_KEY$b = 'bs.button';\nconst EVENT_KEY$b = `.${DATA_KEY$b}`;\nconst DATA_API_KEY$7 = '.data-api';\nconst CLASS_NAME_ACTIVE$3 = 'active';\nconst SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\nconst EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$b}${DATA_API_KEY$7}`;\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME$c;\n  } // Public\n\n\n  toggle() {\n    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Button.getOrCreateInstance(this);\n\n      if (config === 'toggle') {\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {\n  event.preventDefault();\n  const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n  const data = Button.getOrCreateInstance(button);\n  data.toggle();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Button to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Button);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nfunction normalizeData(val) {\n  if (val === 'true') {\n    return true;\n  }\n\n  if (val === 'false') {\n    return false;\n  }\n\n  if (val === Number(val).toString()) {\n    return Number(val);\n  }\n\n  if (val === '' || val === 'null') {\n    return null;\n  }\n\n  return val;\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {};\n    }\n\n    const attributes = {};\n    Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {\n      let pureKey = key.replace(/^bs/, '');\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n      attributes[pureKey] = normalizeData(element.dataset[key]);\n    });\n    return attributes;\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n  },\n\n  offset(element) {\n    const rect = element.getBoundingClientRect();\n    return {\n      top: rect.top + window.pageYOffset,\n      left: rect.left + window.pageXOffset\n    };\n  },\n\n  position(element) {\n    return {\n      top: element.offsetTop,\n      left: element.offsetLeft\n    };\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst NODE_TEXT = 3;\nconst SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector);\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector));\n  },\n\n  parents(element, selector) {\n    const parents = [];\n    let ancestor = element.parentNode;\n\n    while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n      if (ancestor.matches(selector)) {\n        parents.push(ancestor);\n      }\n\n      ancestor = ancestor.parentNode;\n    }\n\n    return parents;\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling;\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous];\n      }\n\n      previous = previous.previousElementSibling;\n    }\n\n    return [];\n  },\n\n  next(element, selector) {\n    let next = element.nextElementSibling;\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next];\n      }\n\n      next = next.nextElementSibling;\n    }\n\n    return [];\n  },\n\n  focusableChildren(element) {\n    const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(', ');\n    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));\n  }\n\n};\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$b = 'carousel';\nconst DATA_KEY$a = 'bs.carousel';\nconst EVENT_KEY$a = `.${DATA_KEY$a}`;\nconst DATA_API_KEY$6 = '.data-api';\nconst ARROW_LEFT_KEY = 'ArrowLeft';\nconst ARROW_RIGHT_KEY = 'ArrowRight';\nconst TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\nconst SWIPE_THRESHOLD = 40;\nconst Default$a = {\n  interval: 5000,\n  keyboard: true,\n  slide: false,\n  pause: 'hover',\n  wrap: true,\n  touch: true\n};\nconst DefaultType$a = {\n  interval: '(number|boolean)',\n  keyboard: 'boolean',\n  slide: '(boolean|string)',\n  pause: '(string|boolean)',\n  wrap: 'boolean',\n  touch: 'boolean'\n};\nconst ORDER_NEXT = 'next';\nconst ORDER_PREV = 'prev';\nconst DIRECTION_LEFT = 'left';\nconst DIRECTION_RIGHT = 'right';\nconst KEY_TO_DIRECTION = {\n  [ARROW_LEFT_KEY]: DIRECTION_RIGHT,\n  [ARROW_RIGHT_KEY]: DIRECTION_LEFT\n};\nconst EVENT_SLIDE = `slide${EVENT_KEY$a}`;\nconst EVENT_SLID = `slid${EVENT_KEY$a}`;\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY$a}`;\nconst EVENT_MOUSEENTER = `mouseenter${EVENT_KEY$a}`;\nconst EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY$a}`;\nconst EVENT_TOUCHSTART = `touchstart${EVENT_KEY$a}`;\nconst EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$a}`;\nconst EVENT_TOUCHEND = `touchend${EVENT_KEY$a}`;\nconst EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$a}`;\nconst EVENT_POINTERUP = `pointerup${EVENT_KEY$a}`;\nconst EVENT_DRAG_START = `dragstart${EVENT_KEY$a}`;\nconst EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$a}${DATA_API_KEY$6}`;\nconst EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;\nconst CLASS_NAME_CAROUSEL = 'carousel';\nconst CLASS_NAME_ACTIVE$2 = 'active';\nconst CLASS_NAME_SLIDE = 'slide';\nconst CLASS_NAME_END = 'carousel-item-end';\nconst CLASS_NAME_START = 'carousel-item-start';\nconst CLASS_NAME_NEXT = 'carousel-item-next';\nconst CLASS_NAME_PREV = 'carousel-item-prev';\nconst CLASS_NAME_POINTER_EVENT = 'pointer-event';\nconst SELECTOR_ACTIVE$1 = '.active';\nconst SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\nconst SELECTOR_ITEM = '.carousel-item';\nconst SELECTOR_ITEM_IMG = '.carousel-item img';\nconst SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\nconst SELECTOR_INDICATORS = '.carousel-indicators';\nconst SELECTOR_INDICATOR = '[data-bs-target]';\nconst SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\nconst SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\nconst POINTER_TYPE_TOUCH = 'touch';\nconst POINTER_TYPE_PEN = 'pen';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Carousel extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._items = null;\n    this._interval = null;\n    this._activeElement = null;\n    this._isPaused = false;\n    this._isSliding = false;\n    this.touchTimeout = null;\n    this.touchStartX = 0;\n    this.touchDeltaX = 0;\n    this._config = this._getConfig(config);\n    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n    this._pointerEvent = Boolean(window.PointerEvent);\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get Default() {\n    return Default$a;\n  }\n\n  static get NAME() {\n    return NAME$b;\n  } // Public\n\n\n  next() {\n    this._slide(ORDER_NEXT);\n  }\n\n  nextWhenVisible() {\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && isVisible(this._element)) {\n      this.next();\n    }\n  }\n\n  prev() {\n    this._slide(ORDER_PREV);\n  }\n\n  pause(event) {\n    if (!event) {\n      this._isPaused = true;\n    }\n\n    if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {\n      triggerTransitionEnd(this._element);\n      this.cycle(true);\n    }\n\n    clearInterval(this._interval);\n    this._interval = null;\n  }\n\n  cycle(event) {\n    if (!event) {\n      this._isPaused = false;\n    }\n\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n\n    if (this._config && this._config.interval && !this._isPaused) {\n      this._updateInterval();\n\n      this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n    }\n  }\n\n  to(index) {\n    this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n    const activeIndex = this._getItemIndex(this._activeElement);\n\n    if (index > this._items.length - 1 || index < 0) {\n      return;\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.to(index));\n      return;\n    }\n\n    if (activeIndex === index) {\n      this.pause();\n      this.cycle();\n      return;\n    }\n\n    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n\n    this._slide(order, this._items[index]);\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default$a,\n      ...Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' ? config : {})\n    };\n    typeCheckConfig(NAME$b, config, DefaultType$a);\n    return config;\n  }\n\n  _handleSwipe() {\n    const absDeltax = Math.abs(this.touchDeltaX);\n\n    if (absDeltax <= SWIPE_THRESHOLD) {\n      return;\n    }\n\n    const direction = absDeltax / this.touchDeltaX;\n    this.touchDeltaX = 0;\n\n    if (!direction) {\n      return;\n    }\n\n    this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));\n    }\n\n    if (this._config.pause === 'hover') {\n      EventHandler.on(this._element, EVENT_MOUSEENTER, event => this.pause(event));\n      EventHandler.on(this._element, EVENT_MOUSELEAVE, event => this.cycle(event));\n    }\n\n    if (this._config.touch && this._touchSupported) {\n      this._addTouchEventListeners();\n    }\n  }\n\n  _addTouchEventListeners() {\n    const hasPointerPenTouch = event => {\n      return this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n    };\n\n    const start = event => {\n      if (hasPointerPenTouch(event)) {\n        this.touchStartX = event.clientX;\n      } else if (!this._pointerEvent) {\n        this.touchStartX = event.touches[0].clientX;\n      }\n    };\n\n    const move = event => {\n      // ensure swiping with one touch and not pinching\n      this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;\n    };\n\n    const end = event => {\n      if (hasPointerPenTouch(event)) {\n        this.touchDeltaX = event.clientX - this.touchStartX;\n      }\n\n      this._handleSwipe();\n\n      if (this._config.pause === 'hover') {\n        // If it's a touch-enabled device, mouseenter/leave are fired as\n        // part of the mouse compatibility events on first tap - the carousel\n        // would stop cycling until user tapped out of it;\n        // here, we listen for touchend, explicitly pause the carousel\n        // (as if it's the second time we tap on it, mouseenter compat event\n        // is NOT fired) and after a timeout (to allow for mouse compatibility\n        // events to fire) we explicitly restart cycling\n        this.pause();\n\n        if (this.touchTimeout) {\n          clearTimeout(this.touchTimeout);\n        }\n\n        this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n      }\n    };\n\n    SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(itemImg => {\n      EventHandler.on(itemImg, EVENT_DRAG_START, event => event.preventDefault());\n    });\n\n    if (this._pointerEvent) {\n      EventHandler.on(this._element, EVENT_POINTERDOWN, event => start(event));\n      EventHandler.on(this._element, EVENT_POINTERUP, event => end(event));\n\n      this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n    } else {\n      EventHandler.on(this._element, EVENT_TOUCHSTART, event => start(event));\n      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => move(event));\n      EventHandler.on(this._element, EVENT_TOUCHEND, event => end(event));\n    }\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return;\n    }\n\n    const direction = KEY_TO_DIRECTION[event.key];\n\n    if (direction) {\n      event.preventDefault();\n\n      this._slide(direction);\n    }\n  }\n\n  _getItemIndex(element) {\n    this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];\n    return this._items.indexOf(element);\n  }\n\n  _getItemByOrder(order, activeElement) {\n    const isNext = order === ORDER_NEXT;\n    return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);\n  }\n\n  _triggerSlideEvent(relatedTarget, eventDirectionName) {\n    const targetIndex = this._getItemIndex(relatedTarget);\n\n    const fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));\n\n    return EventHandler.trigger(this._element, EVENT_SLIDE, {\n      relatedTarget,\n      direction: eventDirectionName,\n      from: fromIndex,\n      to: targetIndex\n    });\n  }\n\n  _setActiveIndicatorElement(element) {\n    if (this._indicatorsElement) {\n      const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);\n      activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n      activeIndicator.removeAttribute('aria-current');\n      const indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);\n\n      for (let i = 0; i < indicators.length; i++) {\n        if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {\n          indicators[i].classList.add(CLASS_NAME_ACTIVE$2);\n          indicators[i].setAttribute('aria-current', 'true');\n          break;\n        }\n      }\n    }\n  }\n\n  _updateInterval() {\n    const element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n    if (!element) {\n      return;\n    }\n\n    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n\n    if (elementInterval) {\n      this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n      this._config.interval = elementInterval;\n    } else {\n      this._config.interval = this._config.defaultInterval || this._config.interval;\n    }\n  }\n\n  _slide(directionOrOrder, element) {\n    const order = this._directionToOrder(directionOrOrder);\n\n    const activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n    const activeElementIndex = this._getItemIndex(activeElement);\n\n    const nextElement = element || this._getItemByOrder(order, activeElement);\n\n    const nextElementIndex = this._getItemIndex(nextElement);\n\n    const isCycling = Boolean(this._interval);\n    const isNext = order === ORDER_NEXT;\n    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n\n    const eventDirectionName = this._orderToDirection(order);\n\n    if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {\n      this._isSliding = false;\n      return;\n    }\n\n    if (this._isSliding) {\n      return;\n    }\n\n    const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n    if (slideEvent.defaultPrevented) {\n      return;\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      return;\n    }\n\n    this._isSliding = true;\n\n    if (isCycling) {\n      this.pause();\n    }\n\n    this._setActiveIndicatorElement(nextElement);\n\n    this._activeElement = nextElement;\n\n    const triggerSlidEvent = () => {\n      EventHandler.trigger(this._element, EVENT_SLID, {\n        relatedTarget: nextElement,\n        direction: eventDirectionName,\n        from: activeElementIndex,\n        to: nextElementIndex\n      });\n    };\n\n    if (this._element.classList.contains(CLASS_NAME_SLIDE)) {\n      nextElement.classList.add(orderClassName);\n      reflow(nextElement);\n      activeElement.classList.add(directionalClassName);\n      nextElement.classList.add(directionalClassName);\n\n      const completeCallBack = () => {\n        nextElement.classList.remove(directionalClassName, orderClassName);\n        nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n        activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n        this._isSliding = false;\n        setTimeout(triggerSlidEvent, 0);\n      };\n\n      this._queueCallback(completeCallBack, activeElement, true);\n    } else {\n      activeElement.classList.remove(CLASS_NAME_ACTIVE$2);\n      nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n      this._isSliding = false;\n      triggerSlidEvent();\n    }\n\n    if (isCycling) {\n      this.cycle();\n    }\n  }\n\n  _directionToOrder(direction) {\n    if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {\n      return direction;\n    }\n\n    if (isRTL()) {\n      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n    }\n\n    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n  }\n\n  _orderToDirection(order) {\n    if (![ORDER_NEXT, ORDER_PREV].includes(order)) {\n      return order;\n    }\n\n    if (isRTL()) {\n      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n  } // Static\n\n\n  static carouselInterface(element, config) {\n    const data = Carousel.getOrCreateInstance(element, config);\n    let {\n      _config\n    } = data;\n\n    if (typeof config === 'object') {\n      _config = { ..._config,\n        ...config\n      };\n    }\n\n    const action = typeof config === 'string' ? config : _config.slide;\n\n    if (typeof config === 'number') {\n      data.to(config);\n    } else if (typeof action === 'string') {\n      if (typeof data[action] === 'undefined') {\n        throw new TypeError(`No method named \"${action}\"`);\n      }\n\n      data[action]();\n    } else if (_config.interval && _config.ride) {\n      data.pause();\n      data.cycle();\n    }\n  }\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      Carousel.carouselInterface(this, config);\n    });\n  }\n\n  static dataApiClickHandler(event) {\n    const target = getElementFromSelector(this);\n\n    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n      return;\n    }\n\n    const config = { ...Manipulator.getDataAttributes(target),\n      ...Manipulator.getDataAttributes(this)\n    };\n    const slideIndex = this.getAttribute('data-bs-slide-to');\n\n    if (slideIndex) {\n      config.interval = false;\n    }\n\n    Carousel.carouselInterface(target, config);\n\n    if (slideIndex) {\n      Carousel.getInstance(target).to(slideIndex);\n    }\n\n    event.preventDefault();\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);\nEventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {\n  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n  for (let i = 0, len = carousels.length; i < len; i++) {\n    Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));\n  }\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Carousel to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Carousel);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$a = 'collapse';\nconst DATA_KEY$9 = 'bs.collapse';\nconst EVENT_KEY$9 = `.${DATA_KEY$9}`;\nconst DATA_API_KEY$5 = '.data-api';\nconst Default$9 = {\n  toggle: true,\n  parent: null\n};\nconst DefaultType$9 = {\n  toggle: 'boolean',\n  parent: '(null|element)'\n};\nconst EVENT_SHOW$5 = `show${EVENT_KEY$9}`;\nconst EVENT_SHOWN$5 = `shown${EVENT_KEY$9}`;\nconst EVENT_HIDE$5 = `hide${EVENT_KEY$9}`;\nconst EVENT_HIDDEN$5 = `hidden${EVENT_KEY$9}`;\nconst EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$9}${DATA_API_KEY$5}`;\nconst CLASS_NAME_SHOW$7 = 'show';\nconst CLASS_NAME_COLLAPSE = 'collapse';\nconst CLASS_NAME_COLLAPSING = 'collapsing';\nconst CLASS_NAME_COLLAPSED = 'collapsed';\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\nconst WIDTH = 'width';\nconst HEIGHT = 'height';\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\nconst SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._isTransitioning = false;\n    this._config = this._getConfig(config);\n    this._triggerArray = [];\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n\n    for (let i = 0, len = toggleList.length; i < len; i++) {\n      const elem = toggleList[i];\n      const selector = getSelectorFromElement(elem);\n      const filterElement = SelectorEngine.find(selector).filter(foundElem => foundElem === this._element);\n\n      if (selector !== null && filterElement.length) {\n        this._selector = selector;\n\n        this._triggerArray.push(elem);\n      }\n    }\n\n    this._initializeChildren();\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n    }\n\n    if (this._config.toggle) {\n      this.toggle();\n    }\n  } // Getters\n\n\n  static get Default() {\n    return Default$9;\n  }\n\n  static get NAME() {\n    return NAME$a;\n  } // Public\n\n\n  toggle() {\n    if (this._isShown()) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return;\n    }\n\n    let actives = [];\n    let activesData;\n\n    if (this._config.parent) {\n      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n      actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth\n    }\n\n    const container = SelectorEngine.findOne(this._selector);\n\n    if (actives.length) {\n      const tempActiveData = actives.find(elem => container !== elem);\n      activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;\n\n      if (activesData && activesData._isTransitioning) {\n        return;\n      }\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);\n\n    if (startEvent.defaultPrevented) {\n      return;\n    }\n\n    actives.forEach(elemActive => {\n      if (container !== elemActive) {\n        Collapse.getOrCreateInstance(elemActive, {\n          toggle: false\n        }).hide();\n      }\n\n      if (!activesData) {\n        Data.set(elemActive, DATA_KEY$9, null);\n      }\n    });\n\n    const dimension = this._getDimension();\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n    this._element.style[dimension] = 0;\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n    this._isTransitioning = true;\n\n    const complete = () => {\n      this._isTransitioning = false;\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n      this._element.style[dimension] = '';\n      EventHandler.trigger(this._element, EVENT_SHOWN$5);\n    };\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n    const scrollSize = `scroll${capitalizedDimension}`;\n\n    this._queueCallback(complete, this._element, true);\n\n    this._element.style[dimension] = `${this._element[scrollSize]}px`;\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return;\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);\n\n    if (startEvent.defaultPrevented) {\n      return;\n    }\n\n    const dimension = this._getDimension();\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n    reflow(this._element);\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n    const triggerArrayLength = this._triggerArray.length;\n\n    for (let i = 0; i < triggerArrayLength; i++) {\n      const trigger = this._triggerArray[i];\n      const elem = getElementFromSelector(trigger);\n\n      if (elem && !this._isShown(elem)) {\n        this._addAriaAndCollapsedClass([trigger], false);\n      }\n    }\n\n    this._isTransitioning = true;\n\n    const complete = () => {\n      this._isTransitioning = false;\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSE);\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN$5);\n    };\n\n    this._element.style[dimension] = '';\n\n    this._queueCallback(complete, this._element, true);\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW$7);\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default$9,\n      ...Manipulator.getDataAttributes(this._element),\n      ...config\n    };\n    config.toggle = Boolean(config.toggle); // Coerce string values\n\n    config.parent = getElement(config.parent);\n    typeCheckConfig(NAME$a, config, DefaultType$9);\n    return config;\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return;\n    }\n\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n    SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {\n      const selected = getElementFromSelector(element);\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected));\n      }\n    });\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return;\n    }\n\n    triggerArray.forEach(elem => {\n      if (isOpen) {\n        elem.classList.remove(CLASS_NAME_COLLAPSED);\n      } else {\n        elem.classList.add(CLASS_NAME_COLLAPSED);\n      }\n\n      elem.setAttribute('aria-expanded', isOpen);\n    });\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const _config = {};\n\n      if (typeof config === 'string' && /show|hide/.test(config)) {\n        _config.toggle = false;\n      }\n\n      const data = Collapse.getOrCreateInstance(this, _config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n    event.preventDefault();\n  }\n\n  const selector = getSelectorFromElement(this);\n  const selectorElements = SelectorEngine.find(selector);\n  selectorElements.forEach(element => {\n    Collapse.getOrCreateInstance(element, {\n      toggle: false\n    }).toggle();\n  });\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Collapse to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Collapse);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$9 = 'dropdown';\nconst DATA_KEY$8 = 'bs.dropdown';\nconst EVENT_KEY$8 = `.${DATA_KEY$8}`;\nconst DATA_API_KEY$4 = '.data-api';\nconst ESCAPE_KEY$2 = 'Escape';\nconst SPACE_KEY = 'Space';\nconst TAB_KEY$1 = 'Tab';\nconst ARROW_UP_KEY = 'ArrowUp';\nconst ARROW_DOWN_KEY = 'ArrowDown';\nconst RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\nconst REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY$2}`);\nconst EVENT_HIDE$4 = `hide${EVENT_KEY$8}`;\nconst EVENT_HIDDEN$4 = `hidden${EVENT_KEY$8}`;\nconst EVENT_SHOW$4 = `show${EVENT_KEY$8}`;\nconst EVENT_SHOWN$4 = `shown${EVENT_KEY$8}`;\nconst EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$8}${DATA_API_KEY$4}`;\nconst EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$8}${DATA_API_KEY$4}`;\nconst EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$8}${DATA_API_KEY$4}`;\nconst CLASS_NAME_SHOW$6 = 'show';\nconst CLASS_NAME_DROPUP = 'dropup';\nconst CLASS_NAME_DROPEND = 'dropend';\nconst CLASS_NAME_DROPSTART = 'dropstart';\nconst CLASS_NAME_NAVBAR = 'navbar';\nconst SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]';\nconst SELECTOR_MENU = '.dropdown-menu';\nconst SELECTOR_NAVBAR_NAV = '.navbar-nav';\nconst SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\nconst PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\nconst PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\nconst PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\nconst PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\nconst PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\nconst PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\nconst Default$8 = {\n  offset: [0, 2],\n  boundary: 'clippingParents',\n  reference: 'toggle',\n  display: 'dynamic',\n  popperConfig: null,\n  autoClose: true\n};\nconst DefaultType$8 = {\n  offset: '(array|string|function)',\n  boundary: '(string|element)',\n  reference: '(string|element|object)',\n  display: 'string',\n  popperConfig: '(null|object|function)',\n  autoClose: '(boolean|string)'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Dropdown extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._popper = null;\n    this._config = this._getConfig(config);\n    this._menu = this._getMenuElement();\n    this._inNavbar = this._detectNavbar();\n  } // Getters\n\n\n  static get Default() {\n    return Default$8;\n  }\n\n  static get DefaultType() {\n    return DefaultType$8;\n  }\n\n  static get NAME() {\n    return NAME$9;\n  } // Public\n\n\n  toggle() {\n    return this._isShown() ? this.hide() : this.show();\n  }\n\n  show() {\n    if (isDisabled(this._element) || this._isShown(this._menu)) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar\n\n    if (this._inNavbar) {\n      Manipulator.setDataAttribute(this._menu, 'popper', 'none');\n    } else {\n      this._createPopper(parent);\n    } // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n    if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {\n      [].concat(...document.body.children).forEach(elem => EventHandler.on(elem, 'mouseover', noop));\n    }\n\n    this._element.focus();\n\n    this._element.setAttribute('aria-expanded', true);\n\n    this._menu.classList.add(CLASS_NAME_SHOW$6);\n\n    this._element.classList.add(CLASS_NAME_SHOW$6);\n\n    EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);\n  }\n\n  hide() {\n    if (isDisabled(this._element) || !this._isShown(this._menu)) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n\n    this._completeHide(relatedTarget);\n  }\n\n  dispose() {\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    super.dispose();\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar();\n\n    if (this._popper) {\n      this._popper.update();\n    }\n  } // Private\n\n\n  _completeHide(relatedTarget) {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    } // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n\n\n    if ('ontouchstart' in document.documentElement) {\n      [].concat(...document.body.children).forEach(elem => EventHandler.off(elem, 'mouseover', noop));\n    }\n\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    this._menu.classList.remove(CLASS_NAME_SHOW$6);\n\n    this._element.classList.remove(CLASS_NAME_SHOW$6);\n\n    this._element.setAttribute('aria-expanded', 'false');\n\n    Manipulator.removeDataAttribute(this._menu, 'popper');\n    EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);\n  }\n\n  _getConfig(config) {\n    config = { ...this.constructor.Default,\n      ...Manipulator.getDataAttributes(this._element),\n      ...config\n    };\n    typeCheckConfig(NAME$9, config, this.constructor.DefaultType);\n\n    if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n      // Popper virtual elements require a getBoundingClientRect method\n      throw new TypeError(`${NAME$9.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n    }\n\n    return config;\n  }\n\n  _createPopper(parent) {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n    }\n\n    let referenceElement = this._element;\n\n    if (this._config.reference === 'parent') {\n      referenceElement = parent;\n    } else if (isElement(this._config.reference)) {\n      referenceElement = getElement(this._config.reference);\n    } else if (typeof this._config.reference === 'object') {\n      referenceElement = this._config.reference;\n    }\n\n    const popperConfig = this._getPopperConfig();\n\n    const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);\n    this._popper = Popper.createPopper(referenceElement, this._menu, popperConfig);\n\n    if (isDisplayStatic) {\n      Manipulator.setDataAttribute(this._menu, 'popper', 'static');\n    }\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW$6);\n  }\n\n  _getMenuElement() {\n    return SelectorEngine.next(this._element, SELECTOR_MENU)[0];\n  }\n\n  _getPlacement() {\n    const parentDropdown = this._element.parentNode;\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n      return PLACEMENT_RIGHT;\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n      return PLACEMENT_LEFT;\n    } // We need to trim the value because custom properties can also include spaces\n\n\n    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n    }\n\n    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n  }\n\n  _detectNavbar() {\n    return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;\n  }\n\n  _getOffset() {\n    const {\n      offset\n    } = this._config;\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(val => Number.parseInt(val, 10));\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element);\n    }\n\n    return offset;\n  }\n\n  _getPopperConfig() {\n    const defaultBsPopperConfig = {\n      placement: this._getPlacement(),\n      modifiers: [{\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      }, {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }]\n    }; // Disable Popper if we have a static display\n\n    if (this._config.display === 'static') {\n      defaultBsPopperConfig.modifiers = [{\n        name: 'applyStyles',\n        enabled: false\n      }];\n    }\n\n    return { ...defaultBsPopperConfig,\n      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n    };\n  }\n\n  _selectMenuItem({\n    key,\n    target\n  }) {\n    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);\n\n    if (!items.length) {\n      return;\n    } // if target isn't included in items (e.g. when expanding the dropdown)\n    // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n\n    getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Dropdown.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n  static clearMenus(event) {\n    if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {\n      return;\n    }\n\n    const toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);\n\n    for (let i = 0, len = toggles.length; i < len; i++) {\n      const context = Dropdown.getInstance(toggles[i]);\n\n      if (!context || context._config.autoClose === false) {\n        continue;\n      }\n\n      if (!context._isShown()) {\n        continue;\n      }\n\n      const relatedTarget = {\n        relatedTarget: context._element\n      };\n\n      if (event) {\n        const composedPath = event.composedPath();\n        const isMenuTarget = composedPath.includes(context._menu);\n\n        if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n          continue;\n        } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n\n        if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n          continue;\n        }\n\n        if (event.type === 'click') {\n          relatedTarget.clickEvent = event;\n        }\n      }\n\n      context._completeHide(relatedTarget);\n    }\n  }\n\n  static getParentFromElement(element) {\n    return getElementFromSelector(element) || element.parentNode;\n  }\n\n  static dataApiKeydownHandler(event) {\n    // If not input/textarea:\n    //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n    // If input/textarea:\n    //  - If space key => not a dropdown command\n    //  - If key is other than escape\n    //    - If key is not up or down => not a dropdown command\n    //    - If trigger inside the menu => not a dropdown command\n    if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {\n      return;\n    }\n\n    const isActive = this.classList.contains(CLASS_NAME_SHOW$6);\n\n    if (!isActive && event.key === ESCAPE_KEY$2) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];\n    const instance = Dropdown.getOrCreateInstance(getToggleButton);\n\n    if (event.key === ESCAPE_KEY$2) {\n      instance.hide();\n      return;\n    }\n\n    if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {\n      if (!isActive) {\n        instance.show();\n      }\n\n      instance._selectMenuItem(event);\n\n      return;\n    }\n\n    if (!isActive || event.key === SPACE_KEY) {\n      Dropdown.clearMenus();\n    }\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\nEventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\nEventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\nEventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n  event.preventDefault();\n  Dropdown.getOrCreateInstance(this).toggle();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Dropdown to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Dropdown);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\nconst SELECTOR_STICKY_CONTENT = '.sticky-top';\n\nclass ScrollBarHelper {\n  constructor() {\n    this._element = document.body;\n  }\n\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth;\n    return Math.abs(window.innerWidth - documentWidth);\n  }\n\n  hide() {\n    const width = this.getWidth();\n\n    this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n    this._setElementAttributes(this._element, 'paddingRight', calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n    this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', calculatedValue => calculatedValue + width);\n\n    this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', calculatedValue => calculatedValue - width);\n  }\n\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow');\n\n    this._element.style.overflow = 'hidden';\n  }\n\n  _setElementAttributes(selector, styleProp, callback) {\n    const scrollbarWidth = this.getWidth();\n\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return;\n      }\n\n      this._saveInitialAttribute(element, styleProp);\n\n      const calculatedValue = window.getComputedStyle(element)[styleProp];\n      element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;\n    };\n\n    this._applyManipulationCallback(selector, manipulationCallBack);\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow');\n\n    this._resetElementAttributes(this._element, 'paddingRight');\n\n    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');\n\n    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');\n  }\n\n  _saveInitialAttribute(element, styleProp) {\n    const actualValue = element.style[styleProp];\n\n    if (actualValue) {\n      Manipulator.setDataAttribute(element, styleProp, actualValue);\n    }\n  }\n\n  _resetElementAttributes(selector, styleProp) {\n    const manipulationCallBack = element => {\n      const value = Manipulator.getDataAttribute(element, styleProp);\n\n      if (typeof value === 'undefined') {\n        element.style.removeProperty(styleProp);\n      } else {\n        Manipulator.removeDataAttribute(element, styleProp);\n        element.style[styleProp] = value;\n      }\n    };\n\n    this._applyManipulationCallback(selector, manipulationCallBack);\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if (isElement(selector)) {\n      callBack(selector);\n    } else {\n      SelectorEngine.find(selector, this._element).forEach(callBack);\n    }\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/backdrop.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst Default$7 = {\n  className: 'modal-backdrop',\n  isVisible: true,\n  // if false, we use the backdrop helper without adding any element to the dom\n  isAnimated: false,\n  rootElement: 'body',\n  // give the choice to place backdrop under different elements\n  clickCallback: null\n};\nconst DefaultType$7 = {\n  className: 'string',\n  isVisible: 'boolean',\n  isAnimated: 'boolean',\n  rootElement: '(element|string)',\n  clickCallback: '(function|null)'\n};\nconst NAME$8 = 'backdrop';\nconst CLASS_NAME_FADE$4 = 'fade';\nconst CLASS_NAME_SHOW$5 = 'show';\nconst EVENT_MOUSEDOWN = `mousedown.bs.${NAME$8}`;\n\nclass Backdrop {\n  constructor(config) {\n    this._config = this._getConfig(config);\n    this._isAppended = false;\n    this._element = null;\n  }\n\n  show(callback) {\n    if (!this._config.isVisible) {\n      execute(callback);\n      return;\n    }\n\n    this._append();\n\n    if (this._config.isAnimated) {\n      reflow(this._getElement());\n    }\n\n    this._getElement().classList.add(CLASS_NAME_SHOW$5);\n\n    this._emulateAnimation(() => {\n      execute(callback);\n    });\n  }\n\n  hide(callback) {\n    if (!this._config.isVisible) {\n      execute(callback);\n      return;\n    }\n\n    this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n\n    this._emulateAnimation(() => {\n      this.dispose();\n      execute(callback);\n    });\n  } // Private\n\n\n  _getElement() {\n    if (!this._element) {\n      const backdrop = document.createElement('div');\n      backdrop.className = this._config.className;\n\n      if (this._config.isAnimated) {\n        backdrop.classList.add(CLASS_NAME_FADE$4);\n      }\n\n      this._element = backdrop;\n    }\n\n    return this._element;\n  }\n\n  _getConfig(config) {\n    config = { ...Default$7,\n      ...(typeof config === 'object' ? config : {})\n    }; // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n\n    config.rootElement = getElement(config.rootElement);\n    typeCheckConfig(NAME$8, config, DefaultType$7);\n    return config;\n  }\n\n  _append() {\n    if (this._isAppended) {\n      return;\n    }\n\n    this._config.rootElement.append(this._getElement());\n\n    EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, () => {\n      execute(this._config.clickCallback);\n    });\n    this._isAppended = true;\n  }\n\n  dispose() {\n    if (!this._isAppended) {\n      return;\n    }\n\n    EventHandler.off(this._element, EVENT_MOUSEDOWN);\n\n    this._element.remove();\n\n    this._isAppended = false;\n  }\n\n  _emulateAnimation(callback) {\n    executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst Default$6 = {\n  trapElement: null,\n  // The element to trap focus inside of\n  autofocus: true\n};\nconst DefaultType$6 = {\n  trapElement: 'element',\n  autofocus: 'boolean'\n};\nconst NAME$7 = 'focustrap';\nconst DATA_KEY$7 = 'bs.focustrap';\nconst EVENT_KEY$7 = `.${DATA_KEY$7}`;\nconst EVENT_FOCUSIN$1 = `focusin${EVENT_KEY$7}`;\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$7}`;\nconst TAB_KEY = 'Tab';\nconst TAB_NAV_FORWARD = 'forward';\nconst TAB_NAV_BACKWARD = 'backward';\n\nclass FocusTrap {\n  constructor(config) {\n    this._config = this._getConfig(config);\n    this._isActive = false;\n    this._lastTabNavDirection = null;\n  }\n\n  activate() {\n    const {\n      trapElement,\n      autofocus\n    } = this._config;\n\n    if (this._isActive) {\n      return;\n    }\n\n    if (autofocus) {\n      trapElement.focus();\n    }\n\n    EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop\n\n    EventHandler.on(document, EVENT_FOCUSIN$1, event => this._handleFocusin(event));\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n    this._isActive = true;\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return;\n    }\n\n    this._isActive = false;\n    EventHandler.off(document, EVENT_KEY$7);\n  } // Private\n\n\n  _handleFocusin(event) {\n    const {\n      target\n    } = event;\n    const {\n      trapElement\n    } = this._config;\n\n    if (target === document || target === trapElement || trapElement.contains(target)) {\n      return;\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement);\n\n    if (elements.length === 0) {\n      trapElement.focus();\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus();\n    } else {\n      elements[0].focus();\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return;\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n  }\n\n  _getConfig(config) {\n    config = { ...Default$6,\n      ...(typeof config === 'object' ? config : {})\n    };\n    typeCheckConfig(NAME$7, config, DefaultType$6);\n    return config;\n  }\n\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$6 = 'modal';\nconst DATA_KEY$6 = 'bs.modal';\nconst EVENT_KEY$6 = `.${DATA_KEY$6}`;\nconst DATA_API_KEY$3 = '.data-api';\nconst ESCAPE_KEY$1 = 'Escape';\nconst Default$5 = {\n  backdrop: true,\n  keyboard: true,\n  focus: true\n};\nconst DefaultType$5 = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  focus: 'boolean'\n};\nconst EVENT_HIDE$3 = `hide${EVENT_KEY$6}`;\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$6}`;\nconst EVENT_HIDDEN$3 = `hidden${EVENT_KEY$6}`;\nconst EVENT_SHOW$3 = `show${EVENT_KEY$6}`;\nconst EVENT_SHOWN$3 = `shown${EVENT_KEY$6}`;\nconst EVENT_RESIZE = `resize${EVENT_KEY$6}`;\nconst EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$6}`;\nconst EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$6}`;\nconst EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY$6}`;\nconst EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$6}`;\nconst EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;\nconst CLASS_NAME_OPEN = 'modal-open';\nconst CLASS_NAME_FADE$3 = 'fade';\nconst CLASS_NAME_SHOW$4 = 'show';\nconst CLASS_NAME_STATIC = 'modal-static';\nconst OPEN_SELECTOR$1 = '.modal.show';\nconst SELECTOR_DIALOG = '.modal-dialog';\nconst SELECTOR_MODAL_BODY = '.modal-body';\nconst SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Modal extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._config = this._getConfig(config);\n    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);\n    this._backdrop = this._initializeBackDrop();\n    this._focustrap = this._initializeFocusTrap();\n    this._isShown = false;\n    this._ignoreBackdropClick = false;\n    this._isTransitioning = false;\n    this._scrollBar = new ScrollBarHelper();\n  } // Getters\n\n\n  static get Default() {\n    return Default$5;\n  }\n\n  static get NAME() {\n    return NAME$6;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n      relatedTarget\n    });\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = true;\n\n    if (this._isAnimated()) {\n      this._isTransitioning = true;\n    }\n\n    this._scrollBar.hide();\n\n    document.body.classList.add(CLASS_NAME_OPEN);\n\n    this._adjustDialog();\n\n    this._setEscapeEvent();\n\n    this._setResizeEvent();\n\n    EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {\n      EventHandler.one(this._element, EVENT_MOUSEUP_DISMISS, event => {\n        if (event.target === this._element) {\n          this._ignoreBackdropClick = true;\n        }\n      });\n    });\n\n    this._showBackdrop(() => this._showElement(relatedTarget));\n  }\n\n  hide() {\n    if (!this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = false;\n\n    const isAnimated = this._isAnimated();\n\n    if (isAnimated) {\n      this._isTransitioning = true;\n    }\n\n    this._setEscapeEvent();\n\n    this._setResizeEvent();\n\n    this._focustrap.deactivate();\n\n    this._element.classList.remove(CLASS_NAME_SHOW$4);\n\n    EventHandler.off(this._element, EVENT_CLICK_DISMISS);\n    EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);\n\n    this._queueCallback(() => this._hideModal(), this._element, isAnimated);\n  }\n\n  dispose() {\n    [window, this._dialog].forEach(htmlElement => EventHandler.off(htmlElement, EVENT_KEY$6));\n\n    this._backdrop.dispose();\n\n    this._focustrap.deactivate();\n\n    super.dispose();\n  }\n\n  handleUpdate() {\n    this._adjustDialog();\n  } // Private\n\n\n  _initializeBackDrop() {\n    return new Backdrop({\n      isVisible: Boolean(this._config.backdrop),\n      // 'static' option will be translated to true, and booleans will keep their value\n      isAnimated: this._isAnimated()\n    });\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    });\n  }\n\n  _getConfig(config) {\n    config = { ...Default$5,\n      ...Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' ? config : {})\n    };\n    typeCheckConfig(NAME$6, config, DefaultType$5);\n    return config;\n  }\n\n  _showElement(relatedTarget) {\n    const isAnimated = this._isAnimated();\n\n    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n      // Don't move modal's DOM position\n      document.body.append(this._element);\n    }\n\n    this._element.style.display = 'block';\n\n    this._element.removeAttribute('aria-hidden');\n\n    this._element.setAttribute('aria-modal', true);\n\n    this._element.setAttribute('role', 'dialog');\n\n    this._element.scrollTop = 0;\n\n    if (modalBody) {\n      modalBody.scrollTop = 0;\n    }\n\n    if (isAnimated) {\n      reflow(this._element);\n    }\n\n    this._element.classList.add(CLASS_NAME_SHOW$4);\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._focustrap.activate();\n      }\n\n      this._isTransitioning = false;\n      EventHandler.trigger(this._element, EVENT_SHOWN$3, {\n        relatedTarget\n      });\n    };\n\n    this._queueCallback(transitionComplete, this._dialog, isAnimated);\n  }\n\n  _setEscapeEvent() {\n    if (this._isShown) {\n      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {\n        if (this._config.keyboard && event.key === ESCAPE_KEY$1) {\n          event.preventDefault();\n          this.hide();\n        } else if (!this._config.keyboard && event.key === ESCAPE_KEY$1) {\n          this._triggerBackdropTransition();\n        }\n      });\n    } else {\n      EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);\n    }\n  }\n\n  _setResizeEvent() {\n    if (this._isShown) {\n      EventHandler.on(window, EVENT_RESIZE, () => this._adjustDialog());\n    } else {\n      EventHandler.off(window, EVENT_RESIZE);\n    }\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none';\n\n    this._element.setAttribute('aria-hidden', true);\n\n    this._element.removeAttribute('aria-modal');\n\n    this._element.removeAttribute('role');\n\n    this._isTransitioning = false;\n\n    this._backdrop.hide(() => {\n      document.body.classList.remove(CLASS_NAME_OPEN);\n\n      this._resetAdjustments();\n\n      this._scrollBar.reset();\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN$3);\n    });\n  }\n\n  _showBackdrop(callback) {\n    EventHandler.on(this._element, EVENT_CLICK_DISMISS, event => {\n      if (this._ignoreBackdropClick) {\n        this._ignoreBackdropClick = false;\n        return;\n      }\n\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      if (this._config.backdrop === true) {\n        this.hide();\n      } else if (this._config.backdrop === 'static') {\n        this._triggerBackdropTransition();\n      }\n    });\n\n    this._backdrop.show(callback);\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_FADE$3);\n  }\n\n  _triggerBackdropTransition() {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const {\n      classList,\n      scrollHeight,\n      style\n    } = this._element;\n    const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed\n\n    if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {\n      return;\n    }\n\n    if (!isModalOverflowing) {\n      style.overflowY = 'hidden';\n    }\n\n    classList.add(CLASS_NAME_STATIC);\n\n    this._queueCallback(() => {\n      classList.remove(CLASS_NAME_STATIC);\n\n      if (!isModalOverflowing) {\n        this._queueCallback(() => {\n          style.overflowY = '';\n        }, this._dialog);\n      }\n    }, this._dialog);\n\n    this._element.focus();\n  } // ----------------------------------------------------------------------\n  // the following methods are used to handle overflowing modals\n  // ----------------------------------------------------------------------\n\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n    const scrollbarWidth = this._scrollBar.getWidth();\n\n    const isBodyOverflowing = scrollbarWidth > 0;\n\n    if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {\n      this._element.style.paddingLeft = `${scrollbarWidth}px`;\n    }\n\n    if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {\n      this._element.style.paddingRight = `${scrollbarWidth}px`;\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = '';\n    this._element.style.paddingRight = '';\n  } // Static\n\n\n  static jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      const data = Modal.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](relatedTarget);\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n  const target = getElementFromSelector(this);\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  EventHandler.one(target, EVENT_SHOW$3, showEvent => {\n    if (showEvent.defaultPrevented) {\n      // only register focus restorer if modal will actually get shown\n      return;\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN$3, () => {\n      if (isVisible(this)) {\n        this.focus();\n      }\n    });\n  }); // avoid conflict when clicking moddal toggler while another one is open\n\n  const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n\n  if (allReadyOpen) {\n    Modal.getInstance(allReadyOpen).hide();\n  }\n\n  const data = Modal.getOrCreateInstance(target);\n  data.toggle(this);\n});\nenableDismissTrigger(Modal);\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Modal to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Modal);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): offcanvas.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$5 = 'offcanvas';\nconst DATA_KEY$5 = 'bs.offcanvas';\nconst EVENT_KEY$5 = `.${DATA_KEY$5}`;\nconst DATA_API_KEY$2 = '.data-api';\nconst EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$5}${DATA_API_KEY$2}`;\nconst ESCAPE_KEY = 'Escape';\nconst Default$4 = {\n  backdrop: true,\n  keyboard: true,\n  scroll: false\n};\nconst DefaultType$4 = {\n  backdrop: 'boolean',\n  keyboard: 'boolean',\n  scroll: 'boolean'\n};\nconst CLASS_NAME_SHOW$3 = 'show';\nconst CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\nconst OPEN_SELECTOR = '.offcanvas.show';\nconst EVENT_SHOW$2 = `show${EVENT_KEY$5}`;\nconst EVENT_SHOWN$2 = `shown${EVENT_KEY$5}`;\nconst EVENT_HIDE$2 = `hide${EVENT_KEY$5}`;\nconst EVENT_HIDDEN$2 = `hidden${EVENT_KEY$5}`;\nconst EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$5}${DATA_API_KEY$2}`;\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$5}`;\nconst SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Offcanvas extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._config = this._getConfig(config);\n    this._isShown = false;\n    this._backdrop = this._initializeBackDrop();\n    this._focustrap = this._initializeFocusTrap();\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get NAME() {\n    return NAME$5;\n  }\n\n  static get Default() {\n    return Default$4;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown) {\n      return;\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {\n      relatedTarget\n    });\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._isShown = true;\n    this._element.style.visibility = 'visible';\n\n    this._backdrop.show();\n\n    if (!this._config.scroll) {\n      new ScrollBarHelper().hide();\n    }\n\n    this._element.removeAttribute('aria-hidden');\n\n    this._element.setAttribute('aria-modal', true);\n\n    this._element.setAttribute('role', 'dialog');\n\n    this._element.classList.add(CLASS_NAME_SHOW$3);\n\n    const completeCallBack = () => {\n      if (!this._config.scroll) {\n        this._focustrap.activate();\n      }\n\n      EventHandler.trigger(this._element, EVENT_SHOWN$2, {\n        relatedTarget\n      });\n    };\n\n    this._queueCallback(completeCallBack, this._element, true);\n  }\n\n  hide() {\n    if (!this._isShown) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._focustrap.deactivate();\n\n    this._element.blur();\n\n    this._isShown = false;\n\n    this._element.classList.remove(CLASS_NAME_SHOW$3);\n\n    this._backdrop.hide();\n\n    const completeCallback = () => {\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._element.style.visibility = 'hidden';\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().reset();\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN$2);\n    };\n\n    this._queueCallback(completeCallback, this._element, true);\n  }\n\n  dispose() {\n    this._backdrop.dispose();\n\n    this._focustrap.deactivate();\n\n    super.dispose();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default$4,\n      ...Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' ? config : {})\n    };\n    typeCheckConfig(NAME$5, config, DefaultType$4);\n    return config;\n  }\n\n  _initializeBackDrop() {\n    return new Backdrop({\n      className: CLASS_NAME_BACKDROP,\n      isVisible: this._config.backdrop,\n      isAnimated: true,\n      rootElement: this._element.parentNode,\n      clickCallback: () => this.hide()\n    });\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    });\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (this._config.keyboard && event.key === ESCAPE_KEY) {\n        this.hide();\n      }\n    });\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Offcanvas.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config](this);\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n  const target = getElementFromSelector(this);\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  if (isDisabled(this)) {\n    return;\n  }\n\n  EventHandler.one(target, EVENT_HIDDEN$2, () => {\n    // focus on trigger when it is closed\n    if (isVisible(this)) {\n      this.focus();\n    }\n  }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n  const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n\n  if (allReadyOpen && allReadyOpen !== target) {\n    Offcanvas.getInstance(allReadyOpen).hide();\n  }\n\n  const data = Offcanvas.getOrCreateInstance(target);\n  data.toggle(this);\n});\nEventHandler.on(window, EVENT_LOAD_DATA_API$1, () => SelectorEngine.find(OPEN_SELECTOR).forEach(el => Offcanvas.getOrCreateInstance(el).show()));\nenableDismissTrigger(Offcanvas);\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\ndefineJQueryPlugin(Offcanvas);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nconst uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\n\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n *\n * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n */\n\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\nconst allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase();\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if (uriAttributes.has(attributeName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n    }\n\n    return true;\n  }\n\n  const regExp = allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp); // Check if a regular expression validates the attribute.\n\n  for (let i = 0, len = regExp.length; i < len; i++) {\n    if (regExp[i].test(attributeName)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  div: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n};\nfunction sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml;\n  }\n\n  if (sanitizeFn && typeof sanitizeFn === 'function') {\n    return sanitizeFn(unsafeHtml);\n  }\n\n  const domParser = new window.DOMParser();\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'));\n\n  for (let i = 0, len = elements.length; i < len; i++) {\n    const element = elements[i];\n    const elementName = element.nodeName.toLowerCase();\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove();\n      continue;\n    }\n\n    const attributeList = [].concat(...element.attributes);\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n    attributeList.forEach(attribute => {\n      if (!allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName);\n      }\n    });\n  }\n\n  return createdDocument.body.innerHTML;\n}\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$4 = 'tooltip';\nconst DATA_KEY$4 = 'bs.tooltip';\nconst EVENT_KEY$4 = `.${DATA_KEY$4}`;\nconst CLASS_PREFIX$1 = 'bs-tooltip';\nconst DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\nconst DefaultType$3 = {\n  animation: 'boolean',\n  template: 'string',\n  title: '(string|element|function)',\n  trigger: 'string',\n  delay: '(number|object)',\n  html: 'boolean',\n  selector: '(string|boolean)',\n  placement: '(string|function)',\n  offset: '(array|string|function)',\n  container: '(string|element|boolean)',\n  fallbackPlacements: 'array',\n  boundary: '(string|element)',\n  customClass: '(string|function)',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  allowList: 'object',\n  popperConfig: '(null|object|function)'\n};\nconst AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: isRTL() ? 'left' : 'right',\n  BOTTOM: 'bottom',\n  LEFT: isRTL() ? 'right' : 'left'\n};\nconst Default$3 = {\n  animation: true,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n  trigger: 'hover focus',\n  title: '',\n  delay: 0,\n  html: false,\n  selector: false,\n  placement: 'top',\n  offset: [0, 0],\n  container: false,\n  fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n  boundary: 'clippingParents',\n  customClass: '',\n  sanitize: true,\n  sanitizeFn: null,\n  allowList: DefaultAllowlist,\n  popperConfig: null\n};\nconst Event$2 = {\n  HIDE: `hide${EVENT_KEY$4}`,\n  HIDDEN: `hidden${EVENT_KEY$4}`,\n  SHOW: `show${EVENT_KEY$4}`,\n  SHOWN: `shown${EVENT_KEY$4}`,\n  INSERTED: `inserted${EVENT_KEY$4}`,\n  CLICK: `click${EVENT_KEY$4}`,\n  FOCUSIN: `focusin${EVENT_KEY$4}`,\n  FOCUSOUT: `focusout${EVENT_KEY$4}`,\n  MOUSEENTER: `mouseenter${EVENT_KEY$4}`,\n  MOUSELEAVE: `mouseleave${EVENT_KEY$4}`\n};\nconst CLASS_NAME_FADE$2 = 'fade';\nconst CLASS_NAME_MODAL = 'modal';\nconst CLASS_NAME_SHOW$2 = 'show';\nconst HOVER_STATE_SHOW = 'show';\nconst HOVER_STATE_OUT = 'out';\nconst SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\nconst SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;\nconst EVENT_MODAL_HIDE = 'hide.bs.modal';\nconst TRIGGER_HOVER = 'hover';\nconst TRIGGER_FOCUS = 'focus';\nconst TRIGGER_CLICK = 'click';\nconst TRIGGER_MANUAL = 'manual';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Tooltip extends BaseComponent {\n  constructor(element, config) {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n    }\n\n    super(element); // private\n\n    this._isEnabled = true;\n    this._timeout = 0;\n    this._hoverState = '';\n    this._activeTrigger = {};\n    this._popper = null; // Protected\n\n    this._config = this._getConfig(config);\n    this.tip = null;\n\n    this._setListeners();\n  } // Getters\n\n\n  static get Default() {\n    return Default$3;\n  }\n\n  static get NAME() {\n    return NAME$4;\n  }\n\n  static get Event() {\n    return Event$2;\n  }\n\n  static get DefaultType() {\n    return DefaultType$3;\n  } // Public\n\n\n  enable() {\n    this._isEnabled = true;\n  }\n\n  disable() {\n    this._isEnabled = false;\n  }\n\n  toggleEnabled() {\n    this._isEnabled = !this._isEnabled;\n  }\n\n  toggle(event) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    if (event) {\n      const context = this._initializeOnDelegatedTarget(event);\n\n      context._activeTrigger.click = !context._activeTrigger.click;\n\n      if (context._isWithActiveTrigger()) {\n        context._enter(null, context);\n      } else {\n        context._leave(null, context);\n      }\n    } else {\n      if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {\n        this._leave(null, this);\n\n        return;\n      }\n\n      this._enter(null, this);\n    }\n  }\n\n  dispose() {\n    clearTimeout(this._timeout);\n    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n    if (this.tip) {\n      this.tip.remove();\n    }\n\n    this._disposePopper();\n\n    super.dispose();\n  }\n\n  show() {\n    if (this._element.style.display === 'none') {\n      throw new Error('Please use show on visible elements');\n    }\n\n    if (!(this.isWithContent() && this._isEnabled)) {\n      return;\n    }\n\n    const showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);\n    const shadowRoot = findShadowRoot(this._element);\n    const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);\n\n    if (showEvent.defaultPrevented || !isInTheDom) {\n      return;\n    } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`\n    // This will be removed later in favor of a `setContent` method\n\n\n    if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {\n      this._disposePopper();\n\n      this.tip.remove();\n      this.tip = null;\n    }\n\n    const tip = this.getTipElement();\n    const tipId = getUID(this.constructor.NAME);\n    tip.setAttribute('id', tipId);\n\n    this._element.setAttribute('aria-describedby', tipId);\n\n    if (this._config.animation) {\n      tip.classList.add(CLASS_NAME_FADE$2);\n    }\n\n    const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n\n    const attachment = this._getAttachment(placement);\n\n    this._addAttachmentClass(attachment);\n\n    const {\n      container\n    } = this._config;\n    Data.set(tip, this.constructor.DATA_KEY, this);\n\n    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n      container.append(tip);\n      EventHandler.trigger(this._element, this.constructor.Event.INSERTED);\n    }\n\n    if (this._popper) {\n      this._popper.update();\n    } else {\n      this._popper = Popper.createPopper(this._element, tip, this._getPopperConfig(attachment));\n    }\n\n    tip.classList.add(CLASS_NAME_SHOW$2);\n\n    const customClass = this._resolvePossibleFunction(this._config.customClass);\n\n    if (customClass) {\n      tip.classList.add(...customClass.split(' '));\n    } // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n    if ('ontouchstart' in document.documentElement) {\n      [].concat(...document.body.children).forEach(element => {\n        EventHandler.on(element, 'mouseover', noop);\n      });\n    }\n\n    const complete = () => {\n      const prevHoverState = this._hoverState;\n      this._hoverState = null;\n      EventHandler.trigger(this._element, this.constructor.Event.SHOWN);\n\n      if (prevHoverState === HOVER_STATE_OUT) {\n        this._leave(null, this);\n      }\n    };\n\n    const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n    this._queueCallback(complete, this.tip, isAnimated);\n  }\n\n  hide() {\n    if (!this._popper) {\n      return;\n    }\n\n    const tip = this.getTipElement();\n\n    const complete = () => {\n      if (this._isWithActiveTrigger()) {\n        return;\n      }\n\n      if (this._hoverState !== HOVER_STATE_SHOW) {\n        tip.remove();\n      }\n\n      this._cleanTipClass();\n\n      this._element.removeAttribute('aria-describedby');\n\n      EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);\n\n      this._disposePopper();\n    };\n\n    const hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n\n    if ('ontouchstart' in document.documentElement) {\n      [].concat(...document.body.children).forEach(element => EventHandler.off(element, 'mouseover', noop));\n    }\n\n    this._activeTrigger[TRIGGER_CLICK] = false;\n    this._activeTrigger[TRIGGER_FOCUS] = false;\n    this._activeTrigger[TRIGGER_HOVER] = false;\n    const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n    this._queueCallback(complete, this.tip, isAnimated);\n\n    this._hoverState = '';\n  }\n\n  update() {\n    if (this._popper !== null) {\n      this._popper.update();\n    }\n  } // Protected\n\n\n  isWithContent() {\n    return Boolean(this.getTitle());\n  }\n\n  getTipElement() {\n    if (this.tip) {\n      return this.tip;\n    }\n\n    const element = document.createElement('div');\n    element.innerHTML = this._config.template;\n    const tip = element.children[0];\n    this.setContent(tip);\n    tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n    this.tip = tip;\n    return this.tip;\n  }\n\n  setContent(tip) {\n    this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);\n  }\n\n  _sanitizeAndSetContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template);\n\n    if (!content && templateElement) {\n      templateElement.remove();\n      return;\n    } // we use append for html objects to maintain js events\n\n\n    this.setElementContent(templateElement, content);\n  }\n\n  setElementContent(element, content) {\n    if (element === null) {\n      return;\n    }\n\n    if (isElement(content)) {\n      content = getElement(content); // content is a DOM node or a jQuery\n\n      if (this._config.html) {\n        if (content.parentNode !== element) {\n          element.innerHTML = '';\n          element.append(content);\n        }\n      } else {\n        element.textContent = content.textContent;\n      }\n\n      return;\n    }\n\n    if (this._config.html) {\n      if (this._config.sanitize) {\n        content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);\n      }\n\n      element.innerHTML = content;\n    } else {\n      element.textContent = content;\n    }\n  }\n\n  getTitle() {\n    const title = this._element.getAttribute('data-bs-original-title') || this._config.title;\n\n    return this._resolvePossibleFunction(title);\n  }\n\n  updateAttachment(attachment) {\n    if (attachment === 'right') {\n      return 'end';\n    }\n\n    if (attachment === 'left') {\n      return 'start';\n    }\n\n    return attachment;\n  } // Private\n\n\n  _initializeOnDelegatedTarget(event, context) {\n    return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n  }\n\n  _getOffset() {\n    const {\n      offset\n    } = this._config;\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(val => Number.parseInt(val, 10));\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element);\n    }\n\n    return offset;\n  }\n\n  _resolvePossibleFunction(content) {\n    return typeof content === 'function' ? content.call(this._element) : content;\n  }\n\n  _getPopperConfig(attachment) {\n    const defaultBsPopperConfig = {\n      placement: attachment,\n      modifiers: [{\n        name: 'flip',\n        options: {\n          fallbackPlacements: this._config.fallbackPlacements\n        }\n      }, {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }, {\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      }, {\n        name: 'arrow',\n        options: {\n          element: `.${this.constructor.NAME}-arrow`\n        }\n      }, {\n        name: 'onChange',\n        enabled: true,\n        phase: 'afterWrite',\n        fn: data => this._handlePopperPlacementChange(data)\n      }],\n      onFirstUpdate: data => {\n        if (data.options.placement !== data.placement) {\n          this._handlePopperPlacementChange(data);\n        }\n      }\n    };\n    return { ...defaultBsPopperConfig,\n      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n    };\n  }\n\n  _addAttachmentClass(attachment) {\n    this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);\n  }\n\n  _getAttachment(placement) {\n    return AttachmentMap[placement.toUpperCase()];\n  }\n\n  _setListeners() {\n    const triggers = this._config.trigger.split(' ');\n\n    triggers.forEach(trigger => {\n      if (trigger === 'click') {\n        EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, event => this.toggle(event));\n      } else if (trigger !== TRIGGER_MANUAL) {\n        const eventIn = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;\n        const eventOut = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n        EventHandler.on(this._element, eventIn, this._config.selector, event => this._enter(event));\n        EventHandler.on(this._element, eventOut, this._config.selector, event => this._leave(event));\n      }\n    });\n\n    this._hideModalHandler = () => {\n      if (this._element) {\n        this.hide();\n      }\n    };\n\n    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n    if (this._config.selector) {\n      this._config = { ...this._config,\n        trigger: 'manual',\n        selector: ''\n      };\n    } else {\n      this._fixTitle();\n    }\n  }\n\n  _fixTitle() {\n    const title = this._element.getAttribute('title');\n\n    const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');\n\n    if (title || originalTitleType !== 'string') {\n      this._element.setAttribute('data-bs-original-title', title || '');\n\n      if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {\n        this._element.setAttribute('aria-label', title);\n      }\n\n      this._element.setAttribute('title', '');\n    }\n  }\n\n  _enter(event, context) {\n    context = this._initializeOnDelegatedTarget(event, context);\n\n    if (event) {\n      context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n    }\n\n    if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {\n      context._hoverState = HOVER_STATE_SHOW;\n      return;\n    }\n\n    clearTimeout(context._timeout);\n    context._hoverState = HOVER_STATE_SHOW;\n\n    if (!context._config.delay || !context._config.delay.show) {\n      context.show();\n      return;\n    }\n\n    context._timeout = setTimeout(() => {\n      if (context._hoverState === HOVER_STATE_SHOW) {\n        context.show();\n      }\n    }, context._config.delay.show);\n  }\n\n  _leave(event, context) {\n    context = this._initializeOnDelegatedTarget(event, context);\n\n    if (event) {\n      context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n    }\n\n    if (context._isWithActiveTrigger()) {\n      return;\n    }\n\n    clearTimeout(context._timeout);\n    context._hoverState = HOVER_STATE_OUT;\n\n    if (!context._config.delay || !context._config.delay.hide) {\n      context.hide();\n      return;\n    }\n\n    context._timeout = setTimeout(() => {\n      if (context._hoverState === HOVER_STATE_OUT) {\n        context.hide();\n      }\n    }, context._config.delay.hide);\n  }\n\n  _isWithActiveTrigger() {\n    for (const trigger in this._activeTrigger) {\n      if (this._activeTrigger[trigger]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _getConfig(config) {\n    const dataAttributes = Manipulator.getDataAttributes(this._element);\n    Object.keys(dataAttributes).forEach(dataAttr => {\n      if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {\n        delete dataAttributes[dataAttr];\n      }\n    });\n    config = { ...this.constructor.Default,\n      ...dataAttributes,\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    config.container = config.container === false ? document.body : getElement(config.container);\n\n    if (typeof config.delay === 'number') {\n      config.delay = {\n        show: config.delay,\n        hide: config.delay\n      };\n    }\n\n    if (typeof config.title === 'number') {\n      config.title = config.title.toString();\n    }\n\n    if (typeof config.content === 'number') {\n      config.content = config.content.toString();\n    }\n\n    typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n\n    if (config.sanitize) {\n      config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);\n    }\n\n    return config;\n  }\n\n  _getDelegateConfig() {\n    const config = {};\n\n    for (const key in this._config) {\n      if (this.constructor.Default[key] !== this._config[key]) {\n        config[key] = this._config[key];\n      }\n    } // In the future can be replaced with:\n    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n    // `Object.fromEntries(keysWithDifferentValues)`\n\n\n    return config;\n  }\n\n  _cleanTipClass() {\n    const tip = this.getTipElement();\n    const basicClassPrefixRegex = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, 'g');\n    const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);\n\n    if (tabClass !== null && tabClass.length > 0) {\n      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));\n    }\n  }\n\n  _getBasicClassPrefix() {\n    return CLASS_PREFIX$1;\n  }\n\n  _handlePopperPlacementChange(popperData) {\n    const {\n      state\n    } = popperData;\n\n    if (!state) {\n      return;\n    }\n\n    this.tip = state.elements.popper;\n\n    this._cleanTipClass();\n\n    this._addAttachmentClass(this._getAttachment(state.placement));\n  }\n\n  _disposePopper() {\n    if (this._popper) {\n      this._popper.destroy();\n\n      this._popper = null;\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tooltip.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Tooltip to jQuery only if jQuery is present\n */\n\n\ndefineJQueryPlugin(Tooltip);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$3 = 'popover';\nconst DATA_KEY$3 = 'bs.popover';\nconst EVENT_KEY$3 = `.${DATA_KEY$3}`;\nconst CLASS_PREFIX = 'bs-popover';\nconst Default$2 = { ...Tooltip.Default,\n  placement: 'right',\n  offset: [0, 8],\n  trigger: 'click',\n  content: '',\n  template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>'\n};\nconst DefaultType$2 = { ...Tooltip.DefaultType,\n  content: '(string|element|function)'\n};\nconst Event$1 = {\n  HIDE: `hide${EVENT_KEY$3}`,\n  HIDDEN: `hidden${EVENT_KEY$3}`,\n  SHOW: `show${EVENT_KEY$3}`,\n  SHOWN: `shown${EVENT_KEY$3}`,\n  INSERTED: `inserted${EVENT_KEY$3}`,\n  CLICK: `click${EVENT_KEY$3}`,\n  FOCUSIN: `focusin${EVENT_KEY$3}`,\n  FOCUSOUT: `focusout${EVENT_KEY$3}`,\n  MOUSEENTER: `mouseenter${EVENT_KEY$3}`,\n  MOUSELEAVE: `mouseleave${EVENT_KEY$3}`\n};\nconst SELECTOR_TITLE = '.popover-header';\nconst SELECTOR_CONTENT = '.popover-body';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Popover extends Tooltip {\n  // Getters\n  static get Default() {\n    return Default$2;\n  }\n\n  static get NAME() {\n    return NAME$3;\n  }\n\n  static get Event() {\n    return Event$1;\n  }\n\n  static get DefaultType() {\n    return DefaultType$2;\n  } // Overrides\n\n\n  isWithContent() {\n    return this.getTitle() || this._getContent();\n  }\n\n  setContent(tip) {\n    this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);\n\n    this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);\n  } // Private\n\n\n  _getContent() {\n    return this._resolvePossibleFunction(this._config.content);\n  }\n\n  _getBasicClassPrefix() {\n    return CLASS_PREFIX;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Popover.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Popover to jQuery only if jQuery is present\n */\n\n\ndefineJQueryPlugin(Popover);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$2 = 'scrollspy';\nconst DATA_KEY$2 = 'bs.scrollspy';\nconst EVENT_KEY$2 = `.${DATA_KEY$2}`;\nconst DATA_API_KEY$1 = '.data-api';\nconst Default$1 = {\n  offset: 10,\n  method: 'auto',\n  target: ''\n};\nconst DefaultType$1 = {\n  offset: 'number',\n  method: 'string',\n  target: '(string|element)'\n};\nconst EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;\nconst EVENT_SCROLL = `scroll${EVENT_KEY$2}`;\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY$2}${DATA_API_KEY$1}`;\nconst CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\nconst CLASS_NAME_ACTIVE$1 = 'active';\nconst SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\nconst SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\nconst SELECTOR_NAV_LINKS = '.nav-link';\nconst SELECTOR_NAV_ITEMS = '.nav-item';\nconst SELECTOR_LIST_ITEMS = '.list-group-item';\nconst SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}, .${CLASS_NAME_DROPDOWN_ITEM}`;\nconst SELECTOR_DROPDOWN$1 = '.dropdown';\nconst SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\nconst METHOD_OFFSET = 'offset';\nconst METHOD_POSITION = 'position';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass ScrollSpy extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;\n    this._config = this._getConfig(config);\n    this._offsets = [];\n    this._targets = [];\n    this._activeTarget = null;\n    this._scrollHeight = 0;\n    EventHandler.on(this._scrollElement, EVENT_SCROLL, () => this._process());\n    this.refresh();\n\n    this._process();\n  } // Getters\n\n\n  static get Default() {\n    return Default$1;\n  }\n\n  static get NAME() {\n    return NAME$2;\n  } // Public\n\n\n  refresh() {\n    const autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n    const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n    const offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n    this._offsets = [];\n    this._targets = [];\n    this._scrollHeight = this._getScrollHeight();\n    const targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);\n    targets.map(element => {\n      const targetSelector = getSelectorFromElement(element);\n      const target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;\n\n      if (target) {\n        const targetBCR = target.getBoundingClientRect();\n\n        if (targetBCR.width || targetBCR.height) {\n          return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n        }\n      }\n\n      return null;\n    }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {\n      this._offsets.push(item[0]);\n\n      this._targets.push(item[1]);\n    });\n  }\n\n  dispose() {\n    EventHandler.off(this._scrollElement, EVENT_KEY$2);\n    super.dispose();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default$1,\n      ...Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    config.target = getElement(config.target) || document.documentElement;\n    typeCheckConfig(NAME$2, config, DefaultType$1);\n    return config;\n  }\n\n  _getScrollTop() {\n    return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n  }\n\n  _getScrollHeight() {\n    return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n  }\n\n  _getOffsetHeight() {\n    return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n  }\n\n  _process() {\n    const scrollTop = this._getScrollTop() + this._config.offset;\n\n    const scrollHeight = this._getScrollHeight();\n\n    const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n    if (this._scrollHeight !== scrollHeight) {\n      this.refresh();\n    }\n\n    if (scrollTop >= maxScroll) {\n      const target = this._targets[this._targets.length - 1];\n\n      if (this._activeTarget !== target) {\n        this._activate(target);\n      }\n\n      return;\n    }\n\n    if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n      this._activeTarget = null;\n\n      this._clear();\n\n      return;\n    }\n\n    for (let i = this._offsets.length; i--;) {\n      const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n      if (isActiveTarget) {\n        this._activate(this._targets[i]);\n      }\n    }\n  }\n\n  _activate(target) {\n    this._activeTarget = target;\n\n    this._clear();\n\n    const queries = SELECTOR_LINK_ITEMS.split(',').map(selector => `${selector}[data-bs-target=\"${target}\"],${selector}[href=\"${target}\"]`);\n    const link = SelectorEngine.findOne(queries.join(','), this._config.target);\n    link.classList.add(CLASS_NAME_ACTIVE$1);\n\n    if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);\n    } else {\n      SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(listGroup => {\n        // Set triggered links parents as active\n        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n        SelectorEngine.prev(listGroup, `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1)); // Handle special case when .nav-link is inside .nav-item\n\n        SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(navItem => {\n          SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1));\n        });\n      });\n    }\n\n    EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {\n      relatedTarget: target\n    });\n  }\n\n  _clear() {\n    SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(node => node.classList.contains(CLASS_NAME_ACTIVE$1)).forEach(node => node.classList.remove(CLASS_NAME_ACTIVE$1));\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = ScrollSpy.getOrCreateInstance(this, config);\n\n      if (typeof config !== 'string') {\n        return;\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`);\n      }\n\n      data[config]();\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  SelectorEngine.find(SELECTOR_DATA_SPY).forEach(spy => new ScrollSpy(spy));\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .ScrollSpy to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(ScrollSpy);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME$1 = 'tab';\nconst DATA_KEY$1 = 'bs.tab';\nconst EVENT_KEY$1 = `.${DATA_KEY$1}`;\nconst DATA_API_KEY = '.data-api';\nconst EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;\nconst EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;\nconst EVENT_SHOW$1 = `show${EVENT_KEY$1}`;\nconst EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}${DATA_API_KEY}`;\nconst CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\nconst CLASS_NAME_ACTIVE = 'active';\nconst CLASS_NAME_FADE$1 = 'fade';\nconst CLASS_NAME_SHOW$1 = 'show';\nconst SELECTOR_DROPDOWN = '.dropdown';\nconst SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\nconst SELECTOR_ACTIVE = '.active';\nconst SELECTOR_ACTIVE_UL = ':scope > li > .active';\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]';\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\nconst SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Tab extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME$1;\n  } // Public\n\n\n  show() {\n    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n      return;\n    }\n\n    let previous;\n    const target = getElementFromSelector(this._element);\n\n    const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);\n\n    if (listElement) {\n      const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;\n      previous = SelectorEngine.find(itemSelector, listElement);\n      previous = previous[previous.length - 1];\n    }\n\n    const hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {\n      relatedTarget: this._element\n    }) : null;\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {\n      relatedTarget: previous\n    });\n\n    if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n      return;\n    }\n\n    this._activate(this._element, listElement);\n\n    const complete = () => {\n      EventHandler.trigger(previous, EVENT_HIDDEN$1, {\n        relatedTarget: this._element\n      });\n      EventHandler.trigger(this._element, EVENT_SHOWN$1, {\n        relatedTarget: previous\n      });\n    };\n\n    if (target) {\n      this._activate(target, target.parentNode, complete);\n    } else {\n      complete();\n    }\n  } // Private\n\n\n  _activate(element, container, callback) {\n    const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);\n    const active = activeElements[0];\n    const isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);\n\n    const complete = () => this._transitionComplete(element, active, callback);\n\n    if (active && isTransitioning) {\n      active.classList.remove(CLASS_NAME_SHOW$1);\n\n      this._queueCallback(complete, element, true);\n    } else {\n      complete();\n    }\n  }\n\n  _transitionComplete(element, active, callback) {\n    if (active) {\n      active.classList.remove(CLASS_NAME_ACTIVE);\n      const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n      if (dropdownChild) {\n        dropdownChild.classList.remove(CLASS_NAME_ACTIVE);\n      }\n\n      if (active.getAttribute('role') === 'tab') {\n        active.setAttribute('aria-selected', false);\n      }\n    }\n\n    element.classList.add(CLASS_NAME_ACTIVE);\n\n    if (element.getAttribute('role') === 'tab') {\n      element.setAttribute('aria-selected', true);\n    }\n\n    reflow(element);\n\n    if (element.classList.contains(CLASS_NAME_FADE$1)) {\n      element.classList.add(CLASS_NAME_SHOW$1);\n    }\n\n    let parent = element.parentNode;\n\n    if (parent && parent.nodeName === 'LI') {\n      parent = parent.parentNode;\n    }\n\n    if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n      const dropdownElement = element.closest(SELECTOR_DROPDOWN);\n\n      if (dropdownElement) {\n        SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(dropdown => dropdown.classList.add(CLASS_NAME_ACTIVE));\n      }\n\n      element.setAttribute('aria-expanded', true);\n    }\n\n    if (callback) {\n      callback();\n    }\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tab.getOrCreateInstance(this);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault();\n  }\n\n  if (isDisabled(this)) {\n    return;\n  }\n\n  const data = Tab.getOrCreateInstance(this);\n  data.show();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Tab to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Tab);\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.3): toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'toast';\nconst DATA_KEY = 'bs.toast';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;\nconst EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\nconst EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;\nconst EVENT_HIDE = `hide${EVENT_KEY}`;\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`;\nconst EVENT_SHOW = `show${EVENT_KEY}`;\nconst EVENT_SHOWN = `shown${EVENT_KEY}`;\nconst CLASS_NAME_FADE = 'fade';\nconst CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\nconst CLASS_NAME_SHOW = 'show';\nconst CLASS_NAME_SHOWING = 'showing';\nconst DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n};\nconst Default = {\n  animation: true,\n  autohide: true,\n  delay: 5000\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Toast extends BaseComponent {\n  constructor(element, config) {\n    super(element);\n    this._config = this._getConfig(config);\n    this._timeout = null;\n    this._hasMouseInteraction = false;\n    this._hasKeyboardInteraction = false;\n\n    this._setListeners();\n  } // Getters\n\n\n  static get DefaultType() {\n    return DefaultType;\n  }\n\n  static get Default() {\n    return Default;\n  }\n\n  static get NAME() {\n    return NAME;\n  } // Public\n\n\n  show() {\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    this._clearTimeout();\n\n    if (this._config.animation) {\n      this._element.classList.add(CLASS_NAME_FADE);\n    }\n\n    const complete = () => {\n      this._element.classList.remove(CLASS_NAME_SHOWING);\n\n      EventHandler.trigger(this._element, EVENT_SHOWN);\n\n      this._maybeScheduleHide();\n    };\n\n    this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n\n\n    reflow(this._element);\n\n    this._element.classList.add(CLASS_NAME_SHOW);\n\n    this._element.classList.add(CLASS_NAME_SHOWING);\n\n    this._queueCallback(complete, this._element, this._config.animation);\n  }\n\n  hide() {\n    if (!this._element.classList.contains(CLASS_NAME_SHOW)) {\n      return;\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    const complete = () => {\n      this._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n\n\n      this._element.classList.remove(CLASS_NAME_SHOWING);\n\n      this._element.classList.remove(CLASS_NAME_SHOW);\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN);\n    };\n\n    this._element.classList.add(CLASS_NAME_SHOWING);\n\n    this._queueCallback(complete, this._element, this._config.animation);\n  }\n\n  dispose() {\n    this._clearTimeout();\n\n    if (this._element.classList.contains(CLASS_NAME_SHOW)) {\n      this._element.classList.remove(CLASS_NAME_SHOW);\n    }\n\n    super.dispose();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default,\n      ...Manipulator.getDataAttributes(this._element),\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    typeCheckConfig(NAME, config, this.constructor.DefaultType);\n    return config;\n  }\n\n  _maybeScheduleHide() {\n    if (!this._config.autohide) {\n      return;\n    }\n\n    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n      return;\n    }\n\n    this._timeout = setTimeout(() => {\n      this.hide();\n    }, this._config.delay);\n  }\n\n  _onInteraction(event, isInteracting) {\n    switch (event.type) {\n      case 'mouseover':\n      case 'mouseout':\n        this._hasMouseInteraction = isInteracting;\n        break;\n\n      case 'focusin':\n      case 'focusout':\n        this._hasKeyboardInteraction = isInteracting;\n        break;\n    }\n\n    if (isInteracting) {\n      this._clearTimeout();\n\n      return;\n    }\n\n    const nextElement = event.relatedTarget;\n\n    if (this._element === nextElement || this._element.contains(nextElement)) {\n      return;\n    }\n\n    this._maybeScheduleHide();\n  }\n\n  _setListeners() {\n    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));\n    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));\n    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));\n    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));\n  }\n\n  _clearTimeout() {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n  } // Static\n\n\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Toast.getOrCreateInstance(this, config);\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      }\n    });\n  }\n\n}\n\nenableDismissTrigger(Toast);\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n * add .Toast to jQuery only if jQuery is present\n */\n\ndefineJQueryPlugin(Toast);\n\nexport { Alert, Button, Carousel, Collapse, Dropdown, Modal, Offcanvas, Popover, ScrollSpy, Tab, Toast, Tooltip };\n//# sourceMappingURL=bootstrap.esm.js.map\n", "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.bundle.js": "/*!\n  * Bootstrap v5.1.3 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory());\n})(this, (function () { 'use strict';\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const MAX_UID = 1000000;\n  const MILLISECONDS_MULTIPLIER = 1000;\n  const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  const toType = obj => {\n    if (obj === null || obj === undefined) {\n      return `${obj}`;\n    }\n\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n\n  const getUID = prefix => {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  const getSelector = element => {\n    let selector = element.getAttribute('data-bs-target');\n\n    if (!selector || selector === '#') {\n      let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n      // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n      // `document.querySelector` will rightfully complain it is invalid.\n      // See https://github.com/twbs/bootstrap/issues/32273\n\n      if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {\n        return null;\n      } // Just in case some CMS puts out a full URL with the anchor appended\n\n\n      if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n        hrefAttr = `#${hrefAttr.split('#')[1]}`;\n      }\n\n      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n    }\n\n    return selector;\n  };\n\n  const getSelectorFromElement = element => {\n    const selector = getSelector(element);\n\n    if (selector) {\n      return document.querySelector(selector) ? selector : null;\n    }\n\n    return null;\n  };\n\n  const getElementFromSelector = element => {\n    const selector = getSelector(element);\n    return selector ? document.querySelector(selector) : null;\n  };\n\n  const getTransitionDurationFromElement = element => {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n\n    let {\n      transitionDuration,\n      transitionDelay\n    } = window.getComputedStyle(element);\n    const floatTransitionDuration = Number.parseFloat(transitionDuration);\n    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n\n  const triggerTransitionEnd = element => {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n\n  const isElement$1 = obj => {\n    if (!obj || typeof obj !== 'object') {\n      return false;\n    }\n\n    if (typeof obj.jquery !== 'undefined') {\n      obj = obj[0];\n    }\n\n    return typeof obj.nodeType !== 'undefined';\n  };\n\n  const getElement = obj => {\n    if (isElement$1(obj)) {\n      // it's a jQuery object or a node element\n      return obj.jquery ? obj[0] : obj;\n    }\n\n    if (typeof obj === 'string' && obj.length > 0) {\n      return document.querySelector(obj);\n    }\n\n    return null;\n  };\n\n  const typeCheckConfig = (componentName, config, configTypes) => {\n    Object.keys(configTypes).forEach(property => {\n      const expectedTypes = configTypes[property];\n      const value = config[property];\n      const valueType = value && isElement$1(value) ? 'element' : toType(value);\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(`${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n      }\n    });\n  };\n\n  const isVisible = element => {\n    if (!isElement$1(element) || element.getClientRects().length === 0) {\n      return false;\n    }\n\n    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';\n  };\n\n  const isDisabled = element => {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n\n    if (element.classList.contains('disabled')) {\n      return true;\n    }\n\n    if (typeof element.disabled !== 'undefined') {\n      return element.disabled;\n    }\n\n    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n  };\n\n  const findShadowRoot = element => {\n    if (!document.documentElement.attachShadow) {\n      return null;\n    } // Can find the shadow root otherwise it'll return the document\n\n\n    if (typeof element.getRootNode === 'function') {\n      const root = element.getRootNode();\n      return root instanceof ShadowRoot ? root : null;\n    }\n\n    if (element instanceof ShadowRoot) {\n      return element;\n    } // when we don't find a shadow root\n\n\n    if (!element.parentNode) {\n      return null;\n    }\n\n    return findShadowRoot(element.parentNode);\n  };\n\n  const noop = () => {};\n  /**\n   * Trick to restart an element's animation\n   *\n   * @param {HTMLElement} element\n   * @return void\n   *\n   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n   */\n\n\n  const reflow = element => {\n    // eslint-disable-next-line no-unused-expressions\n    element.offsetHeight;\n  };\n\n  const getjQuery = () => {\n    const {\n      jQuery\n    } = window;\n\n    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n\n  const DOMContentLoadedCallbacks = [];\n\n  const onDOMContentLoaded = callback => {\n    if (document.readyState === 'loading') {\n      // add listener on the first call when the document is in loading state\n      if (!DOMContentLoadedCallbacks.length) {\n        document.addEventListener('DOMContentLoaded', () => {\n          DOMContentLoadedCallbacks.forEach(callback => callback());\n        });\n      }\n\n      DOMContentLoadedCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  };\n\n  const isRTL = () => document.documentElement.dir === 'rtl';\n\n  const defineJQueryPlugin = plugin => {\n    onDOMContentLoaded(() => {\n      const $ = getjQuery();\n      /* istanbul ignore if */\n\n      if ($) {\n        const name = plugin.NAME;\n        const JQUERY_NO_CONFLICT = $.fn[name];\n        $.fn[name] = plugin.jQueryInterface;\n        $.fn[name].Constructor = plugin;\n\n        $.fn[name].noConflict = () => {\n          $.fn[name] = JQUERY_NO_CONFLICT;\n          return plugin.jQueryInterface;\n        };\n      }\n    });\n  };\n\n  const execute = callback => {\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n    if (!waitForTransition) {\n      execute(callback);\n      return;\n    }\n\n    const durationPadding = 5;\n    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n    let called = false;\n\n    const handler = ({\n      target\n    }) => {\n      if (target !== transitionElement) {\n        return;\n      }\n\n      called = true;\n      transitionElement.removeEventListener(TRANSITION_END, handler);\n      execute(callback);\n    };\n\n    transitionElement.addEventListener(TRANSITION_END, handler);\n    setTimeout(() => {\n      if (!called) {\n        triggerTransitionEnd(transitionElement);\n      }\n    }, emulatedDuration);\n  };\n  /**\n   * Return the previous/next element of a list.\n   *\n   * @param {array} list    The list of elements\n   * @param activeElement   The active element\n   * @param shouldGetNext   Choose to get next or previous element\n   * @param isCycleAllowed\n   * @return {Element|elem} The proper element\n   */\n\n\n  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n    let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n\n    if (index === -1) {\n      return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];\n    }\n\n    const listLength = list.length;\n    index += shouldGetNext ? 1 : -1;\n\n    if (isCycleAllowed) {\n      index = (index + listLength) % listLength;\n    }\n\n    return list[Math.max(0, Math.min(index, listLength - 1))];\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  const stripNameRegex = /\\..*/;\n  const stripUidRegex = /::\\d+$/;\n  const eventRegistry = {}; // Events storage\n\n  let uidEvent = 1;\n  const customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  const customEventsRegex = /^(mouseenter|mouseleave)/i;\n  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n  /**\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    const uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      event.delegateTarget = element;\n\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      const domElements = element.querySelectorAll(selector);\n\n      for (let {\n        target\n      } = event; target && target !== this; target = target.parentNode) {\n        for (let i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            event.delegateTarget = target;\n\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, selector, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler, delegationSelector = null) {\n    const uidEventList = Object.keys(events);\n\n    for (let i = 0, len = uidEventList.length; i < len; i++) {\n      const event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    const delegation = typeof handler === 'string';\n    const originalHandler = delegation ? delegationFn : handler;\n    let typeEvent = getTypeEvent(originalTypeEvent);\n    const isNative = nativeEvents.has(typeEvent);\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n    // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n\n    if (customEventsRegex.test(originalTypeEvent)) {\n      const wrapFn = fn => {\n        return function (event) {\n          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n            return fn.call(this, event);\n          }\n        };\n      };\n\n      if (delegationFn) {\n        delegationFn = wrapFn(delegationFn);\n      } else {\n        handler = wrapFn(handler);\n      }\n    }\n\n    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n    const events = getEvent(element);\n    const handlers = events[typeEvent] || (events[typeEvent] = {});\n    const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    const storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(handlerKey => {\n      if (handlerKey.includes(namespace)) {\n        const event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  function getTypeEvent(event) {\n    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n    event = event.replace(stripNameRegex, '');\n    return customEvents[event] || event;\n  }\n\n  const EventHandler = {\n    on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n\n    one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n\n    off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n      const inNamespace = typeEvent !== originalTypeEvent;\n      const events = getEvent(element);\n      const isNamespace = originalTypeEvent.startsWith('.');\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(elementEvent => {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      const storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(keyHandlers => {\n        const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n          const event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n\n    trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      const $ = getjQuery();\n      const typeEvent = getTypeEvent(event);\n      const inNamespace = event !== typeEvent;\n      const isNative = nativeEvents.has(typeEvent);\n      let jQueryEvent;\n      let bubbles = true;\n      let nativeDispatch = true;\n      let defaultPrevented = false;\n      let evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles,\n          cancelable: true\n        });\n      } // merge custom information in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(key => {\n          Object.defineProperty(evt, key, {\n            get() {\n              return args[key];\n            }\n\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const elementMap = new Map();\n  const Data = {\n    set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n\n      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n        return;\n      }\n\n      instanceMap.set(key, instance);\n    },\n\n    get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n\n      return null;\n    },\n\n    remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n\n      const instanceMap = elementMap.get(element);\n      instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n      if (instanceMap.size === 0) {\n        elementMap.delete(element);\n      }\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const VERSION = '5.1.3';\n\n  class BaseComponent {\n    constructor(element) {\n      element = getElement(element);\n\n      if (!element) {\n        return;\n      }\n\n      this._element = element;\n      Data.set(this._element, this.constructor.DATA_KEY, this);\n    }\n\n    dispose() {\n      Data.remove(this._element, this.constructor.DATA_KEY);\n      EventHandler.off(this._element, this.constructor.EVENT_KEY);\n      Object.getOwnPropertyNames(this).forEach(propertyName => {\n        this[propertyName] = null;\n      });\n    }\n\n    _queueCallback(callback, element, isAnimated = true) {\n      executeAfterTransition(callback, element, isAnimated);\n    }\n    /** Static */\n\n\n    static getInstance(element) {\n      return Data.get(getElement(element), this.DATA_KEY);\n    }\n\n    static getOrCreateInstance(element, config = {}) {\n      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n    }\n\n    static get VERSION() {\n      return VERSION;\n    }\n\n    static get NAME() {\n      throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n\n    static get DATA_KEY() {\n      return `bs.${this.NAME}`;\n    }\n\n    static get EVENT_KEY() {\n      return `.${this.DATA_KEY}`;\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/component-functions.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  const enableDismissTrigger = (component, method = 'hide') => {\n    const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n    const name = component.NAME;\n    EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n      if (['A', 'AREA'].includes(this.tagName)) {\n        event.preventDefault();\n      }\n\n      if (isDisabled(this)) {\n        return;\n      }\n\n      const target = getElementFromSelector(this) || this.closest(`.${name}`);\n      const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n      instance[method]();\n    });\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): alert.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$d = 'alert';\n  const DATA_KEY$c = 'bs.alert';\n  const EVENT_KEY$c = `.${DATA_KEY$c}`;\n  const EVENT_CLOSE = `close${EVENT_KEY$c}`;\n  const EVENT_CLOSED = `closed${EVENT_KEY$c}`;\n  const CLASS_NAME_FADE$5 = 'fade';\n  const CLASS_NAME_SHOW$8 = 'show';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Alert extends BaseComponent {\n    // Getters\n    static get NAME() {\n      return NAME$d;\n    } // Public\n\n\n    close() {\n      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n\n      if (closeEvent.defaultPrevented) {\n        return;\n      }\n\n      this._element.classList.remove(CLASS_NAME_SHOW$8);\n\n      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n\n      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);\n    } // Private\n\n\n    _destroyElement() {\n      this._element.remove();\n\n      EventHandler.trigger(this._element, EVENT_CLOSED);\n      this.dispose();\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Alert.getOrCreateInstance(this);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  enableDismissTrigger(Alert, 'close');\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Alert to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Alert);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): button.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$c = 'button';\n  const DATA_KEY$b = 'bs.button';\n  const EVENT_KEY$b = `.${DATA_KEY$b}`;\n  const DATA_API_KEY$7 = '.data-api';\n  const CLASS_NAME_ACTIVE$3 = 'active';\n  const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n  const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$b}${DATA_API_KEY$7}`;\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Button extends BaseComponent {\n    // Getters\n    static get NAME() {\n      return NAME$c;\n    } // Public\n\n\n    toggle() {\n      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n      this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Button.getOrCreateInstance(this);\n\n        if (config === 'toggle') {\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {\n    event.preventDefault();\n    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n    const data = Button.getOrCreateInstance(button);\n    data.toggle();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Button to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Button);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n  }\n\n  const Manipulator = {\n    setDataAttribute(element, key, value) {\n      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n    },\n\n    removeDataAttribute(element, key) {\n      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n    },\n\n    getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      const attributes = {};\n      Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {\n        let pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      });\n      return attributes;\n    },\n\n    getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n    },\n\n    offset(element) {\n      const rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + window.pageYOffset,\n        left: rect.left + window.pageXOffset\n      };\n    },\n\n    position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const NODE_TEXT = 3;\n  const SelectorEngine = {\n    find(selector, element = document.documentElement) {\n      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n    },\n\n    findOne(selector, element = document.documentElement) {\n      return Element.prototype.querySelector.call(element, selector);\n    },\n\n    children(element, selector) {\n      return [].concat(...element.children).filter(child => child.matches(selector));\n    },\n\n    parents(element, selector) {\n      const parents = [];\n      let ancestor = element.parentNode;\n\n      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n        if (ancestor.matches(selector)) {\n          parents.push(ancestor);\n        }\n\n        ancestor = ancestor.parentNode;\n      }\n\n      return parents;\n    },\n\n    prev(element, selector) {\n      let previous = element.previousElementSibling;\n\n      while (previous) {\n        if (previous.matches(selector)) {\n          return [previous];\n        }\n\n        previous = previous.previousElementSibling;\n      }\n\n      return [];\n    },\n\n    next(element, selector) {\n      let next = element.nextElementSibling;\n\n      while (next) {\n        if (next.matches(selector)) {\n          return [next];\n        }\n\n        next = next.nextElementSibling;\n      }\n\n      return [];\n    },\n\n    focusableChildren(element) {\n      const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(', ');\n      return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): carousel.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$b = 'carousel';\n  const DATA_KEY$a = 'bs.carousel';\n  const EVENT_KEY$a = `.${DATA_KEY$a}`;\n  const DATA_API_KEY$6 = '.data-api';\n  const ARROW_LEFT_KEY = 'ArrowLeft';\n  const ARROW_RIGHT_KEY = 'ArrowRight';\n  const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  const SWIPE_THRESHOLD = 40;\n  const Default$a = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true,\n    touch: true\n  };\n  const DefaultType$a = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean',\n    touch: 'boolean'\n  };\n  const ORDER_NEXT = 'next';\n  const ORDER_PREV = 'prev';\n  const DIRECTION_LEFT = 'left';\n  const DIRECTION_RIGHT = 'right';\n  const KEY_TO_DIRECTION = {\n    [ARROW_LEFT_KEY]: DIRECTION_RIGHT,\n    [ARROW_RIGHT_KEY]: DIRECTION_LEFT\n  };\n  const EVENT_SLIDE = `slide${EVENT_KEY$a}`;\n  const EVENT_SLID = `slid${EVENT_KEY$a}`;\n  const EVENT_KEYDOWN = `keydown${EVENT_KEY$a}`;\n  const EVENT_MOUSEENTER = `mouseenter${EVENT_KEY$a}`;\n  const EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY$a}`;\n  const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$a}`;\n  const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$a}`;\n  const EVENT_TOUCHEND = `touchend${EVENT_KEY$a}`;\n  const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$a}`;\n  const EVENT_POINTERUP = `pointerup${EVENT_KEY$a}`;\n  const EVENT_DRAG_START = `dragstart${EVENT_KEY$a}`;\n  const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$a}${DATA_API_KEY$6}`;\n  const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;\n  const CLASS_NAME_CAROUSEL = 'carousel';\n  const CLASS_NAME_ACTIVE$2 = 'active';\n  const CLASS_NAME_SLIDE = 'slide';\n  const CLASS_NAME_END = 'carousel-item-end';\n  const CLASS_NAME_START = 'carousel-item-start';\n  const CLASS_NAME_NEXT = 'carousel-item-next';\n  const CLASS_NAME_PREV = 'carousel-item-prev';\n  const CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  const SELECTOR_ACTIVE$1 = '.active';\n  const SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\n  const SELECTOR_ITEM = '.carousel-item';\n  const SELECTOR_ITEM_IMG = '.carousel-item img';\n  const SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\n  const SELECTOR_INDICATORS = '.carousel-indicators';\n  const SELECTOR_INDICATOR = '[data-bs-target]';\n  const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\n  const SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n  const POINTER_TYPE_TOUCH = 'touch';\n  const POINTER_TYPE_PEN = 'pen';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Carousel extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._items = null;\n      this._interval = null;\n      this._activeElement = null;\n      this._isPaused = false;\n      this._isSliding = false;\n      this.touchTimeout = null;\n      this.touchStartX = 0;\n      this.touchDeltaX = 0;\n      this._config = this._getConfig(config);\n      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      this._pointerEvent = Boolean(window.PointerEvent);\n\n      this._addEventListeners();\n    } // Getters\n\n\n    static get Default() {\n      return Default$a;\n    }\n\n    static get NAME() {\n      return NAME$b;\n    } // Public\n\n\n    next() {\n      this._slide(ORDER_NEXT);\n    }\n\n    nextWhenVisible() {\n      // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n      if (!document.hidden && isVisible(this._element)) {\n        this.next();\n      }\n    }\n\n    prev() {\n      this._slide(ORDER_PREV);\n    }\n\n    pause(event) {\n      if (!event) {\n        this._isPaused = true;\n      }\n\n      if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {\n        triggerTransitionEnd(this._element);\n        this.cycle(true);\n      }\n\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n\n    cycle(event) {\n      if (!event) {\n        this._isPaused = false;\n      }\n\n      if (this._interval) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n\n      if (this._config && this._config.interval && !this._isPaused) {\n        this._updateInterval();\n\n        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n      }\n    }\n\n    to(index) {\n      this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      const activeIndex = this._getItemIndex(this._activeElement);\n\n      if (index > this._items.length - 1 || index < 0) {\n        return;\n      }\n\n      if (this._isSliding) {\n        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));\n        return;\n      }\n\n      if (activeIndex === index) {\n        this.pause();\n        this.cycle();\n        return;\n      }\n\n      const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n\n      this._slide(order, this._items[index]);\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$a,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$b, config, DefaultType$a);\n      return config;\n    }\n\n    _handleSwipe() {\n      const absDeltax = Math.abs(this.touchDeltaX);\n\n      if (absDeltax <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      const direction = absDeltax / this.touchDeltaX;\n      this.touchDeltaX = 0;\n\n      if (!direction) {\n        return;\n      }\n\n      this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n\n    _addEventListeners() {\n      if (this._config.keyboard) {\n        EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));\n      }\n\n      if (this._config.pause === 'hover') {\n        EventHandler.on(this._element, EVENT_MOUSEENTER, event => this.pause(event));\n        EventHandler.on(this._element, EVENT_MOUSELEAVE, event => this.cycle(event));\n      }\n\n      if (this._config.touch && this._touchSupported) {\n        this._addTouchEventListeners();\n      }\n    }\n\n    _addTouchEventListeners() {\n      const hasPointerPenTouch = event => {\n        return this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n      };\n\n      const start = event => {\n        if (hasPointerPenTouch(event)) {\n          this.touchStartX = event.clientX;\n        } else if (!this._pointerEvent) {\n          this.touchStartX = event.touches[0].clientX;\n        }\n      };\n\n      const move = event => {\n        // ensure swiping with one touch and not pinching\n        this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;\n      };\n\n      const end = event => {\n        if (hasPointerPenTouch(event)) {\n          this.touchDeltaX = event.clientX - this.touchStartX;\n        }\n\n        this._handleSwipe();\n\n        if (this._config.pause === 'hover') {\n          // If it's a touch-enabled device, mouseenter/leave are fired as\n          // part of the mouse compatibility events on first tap - the carousel\n          // would stop cycling until user tapped out of it;\n          // here, we listen for touchend, explicitly pause the carousel\n          // (as if it's the second time we tap on it, mouseenter compat event\n          // is NOT fired) and after a timeout (to allow for mouse compatibility\n          // events to fire) we explicitly restart cycling\n          this.pause();\n\n          if (this.touchTimeout) {\n            clearTimeout(this.touchTimeout);\n          }\n\n          this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n        }\n      };\n\n      SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(itemImg => {\n        EventHandler.on(itemImg, EVENT_DRAG_START, event => event.preventDefault());\n      });\n\n      if (this._pointerEvent) {\n        EventHandler.on(this._element, EVENT_POINTERDOWN, event => start(event));\n        EventHandler.on(this._element, EVENT_POINTERUP, event => end(event));\n\n        this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n      } else {\n        EventHandler.on(this._element, EVENT_TOUCHSTART, event => start(event));\n        EventHandler.on(this._element, EVENT_TOUCHMOVE, event => move(event));\n        EventHandler.on(this._element, EVENT_TOUCHEND, event => end(event));\n      }\n    }\n\n    _keydown(event) {\n      if (/input|textarea/i.test(event.target.tagName)) {\n        return;\n      }\n\n      const direction = KEY_TO_DIRECTION[event.key];\n\n      if (direction) {\n        event.preventDefault();\n\n        this._slide(direction);\n      }\n    }\n\n    _getItemIndex(element) {\n      this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];\n      return this._items.indexOf(element);\n    }\n\n    _getItemByOrder(order, activeElement) {\n      const isNext = order === ORDER_NEXT;\n      return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);\n    }\n\n    _triggerSlideEvent(relatedTarget, eventDirectionName) {\n      const targetIndex = this._getItemIndex(relatedTarget);\n\n      const fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));\n\n      return EventHandler.trigger(this._element, EVENT_SLIDE, {\n        relatedTarget,\n        direction: eventDirectionName,\n        from: fromIndex,\n        to: targetIndex\n      });\n    }\n\n    _setActiveIndicatorElement(element) {\n      if (this._indicatorsElement) {\n        const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);\n        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n        activeIndicator.removeAttribute('aria-current');\n        const indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);\n\n        for (let i = 0; i < indicators.length; i++) {\n          if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {\n            indicators[i].classList.add(CLASS_NAME_ACTIVE$2);\n            indicators[i].setAttribute('aria-current', 'true');\n            break;\n          }\n        }\n      }\n    }\n\n    _updateInterval() {\n      const element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      if (!element) {\n        return;\n      }\n\n      const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n\n      if (elementInterval) {\n        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n        this._config.interval = elementInterval;\n      } else {\n        this._config.interval = this._config.defaultInterval || this._config.interval;\n      }\n    }\n\n    _slide(directionOrOrder, element) {\n      const order = this._directionToOrder(directionOrOrder);\n\n      const activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      const activeElementIndex = this._getItemIndex(activeElement);\n\n      const nextElement = element || this._getItemByOrder(order, activeElement);\n\n      const nextElementIndex = this._getItemIndex(nextElement);\n\n      const isCycling = Boolean(this._interval);\n      const isNext = order === ORDER_NEXT;\n      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n\n      const eventDirectionName = this._orderToDirection(order);\n\n      if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {\n        this._isSliding = false;\n        return;\n      }\n\n      if (this._isSliding) {\n        return;\n      }\n\n      const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n      if (slideEvent.defaultPrevented) {\n        return;\n      }\n\n      if (!activeElement || !nextElement) {\n        // Some weirdness is happening, so we bail\n        return;\n      }\n\n      this._isSliding = true;\n\n      if (isCycling) {\n        this.pause();\n      }\n\n      this._setActiveIndicatorElement(nextElement);\n\n      this._activeElement = nextElement;\n\n      const triggerSlidEvent = () => {\n        EventHandler.trigger(this._element, EVENT_SLID, {\n          relatedTarget: nextElement,\n          direction: eventDirectionName,\n          from: activeElementIndex,\n          to: nextElementIndex\n        });\n      };\n\n      if (this._element.classList.contains(CLASS_NAME_SLIDE)) {\n        nextElement.classList.add(orderClassName);\n        reflow(nextElement);\n        activeElement.classList.add(directionalClassName);\n        nextElement.classList.add(directionalClassName);\n\n        const completeCallBack = () => {\n          nextElement.classList.remove(directionalClassName, orderClassName);\n          nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n          this._isSliding = false;\n          setTimeout(triggerSlidEvent, 0);\n        };\n\n        this._queueCallback(completeCallBack, activeElement, true);\n      } else {\n        activeElement.classList.remove(CLASS_NAME_ACTIVE$2);\n        nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n        this._isSliding = false;\n        triggerSlidEvent();\n      }\n\n      if (isCycling) {\n        this.cycle();\n      }\n    }\n\n    _directionToOrder(direction) {\n      if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {\n        return direction;\n      }\n\n      if (isRTL()) {\n        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n      }\n\n      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n    }\n\n    _orderToDirection(order) {\n      if (![ORDER_NEXT, ORDER_PREV].includes(order)) {\n        return order;\n      }\n\n      if (isRTL()) {\n        return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n      }\n\n      return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n    } // Static\n\n\n    static carouselInterface(element, config) {\n      const data = Carousel.getOrCreateInstance(element, config);\n      let {\n        _config\n      } = data;\n\n      if (typeof config === 'object') {\n        _config = { ..._config,\n          ...config\n        };\n      }\n\n      const action = typeof config === 'string' ? config : _config.slide;\n\n      if (typeof config === 'number') {\n        data.to(config);\n      } else if (typeof action === 'string') {\n        if (typeof data[action] === 'undefined') {\n          throw new TypeError(`No method named \"${action}\"`);\n        }\n\n        data[action]();\n      } else if (_config.interval && _config.ride) {\n        data.pause();\n        data.cycle();\n      }\n    }\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        Carousel.carouselInterface(this, config);\n      });\n    }\n\n    static dataApiClickHandler(event) {\n      const target = getElementFromSelector(this);\n\n      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n        return;\n      }\n\n      const config = { ...Manipulator.getDataAttributes(target),\n        ...Manipulator.getDataAttributes(this)\n      };\n      const slideIndex = this.getAttribute('data-bs-slide-to');\n\n      if (slideIndex) {\n        config.interval = false;\n      }\n\n      Carousel.carouselInterface(target, config);\n\n      if (slideIndex) {\n        Carousel.getInstance(target).to(slideIndex);\n      }\n\n      event.preventDefault();\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);\n  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {\n    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n    for (let i = 0, len = carousels.length; i < len; i++) {\n      Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));\n    }\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Carousel to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Carousel);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$a = 'collapse';\n  const DATA_KEY$9 = 'bs.collapse';\n  const EVENT_KEY$9 = `.${DATA_KEY$9}`;\n  const DATA_API_KEY$5 = '.data-api';\n  const Default$9 = {\n    toggle: true,\n    parent: null\n  };\n  const DefaultType$9 = {\n    toggle: 'boolean',\n    parent: '(null|element)'\n  };\n  const EVENT_SHOW$5 = `show${EVENT_KEY$9}`;\n  const EVENT_SHOWN$5 = `shown${EVENT_KEY$9}`;\n  const EVENT_HIDE$5 = `hide${EVENT_KEY$9}`;\n  const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$9}`;\n  const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$9}${DATA_API_KEY$5}`;\n  const CLASS_NAME_SHOW$7 = 'show';\n  const CLASS_NAME_COLLAPSE = 'collapse';\n  const CLASS_NAME_COLLAPSING = 'collapsing';\n  const CLASS_NAME_COLLAPSED = 'collapsed';\n  const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\n  const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n  const WIDTH = 'width';\n  const HEIGHT = 'height';\n  const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n  const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Collapse extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._isTransitioning = false;\n      this._config = this._getConfig(config);\n      this._triggerArray = [];\n      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n\n      for (let i = 0, len = toggleList.length; i < len; i++) {\n        const elem = toggleList[i];\n        const selector = getSelectorFromElement(elem);\n        const filterElement = SelectorEngine.find(selector).filter(foundElem => foundElem === this._element);\n\n        if (selector !== null && filterElement.length) {\n          this._selector = selector;\n\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._initializeChildren();\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n    } // Getters\n\n\n    static get Default() {\n      return Default$9;\n    }\n\n    static get NAME() {\n      return NAME$a;\n    } // Public\n\n\n    toggle() {\n      if (this._isShown()) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n    show() {\n      if (this._isTransitioning || this._isShown()) {\n        return;\n      }\n\n      let actives = [];\n      let activesData;\n\n      if (this._config.parent) {\n        const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n        actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth\n      }\n\n      const container = SelectorEngine.findOne(this._selector);\n\n      if (actives.length) {\n        const tempActiveData = actives.find(elem => container !== elem);\n        activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;\n\n        if (activesData && activesData._isTransitioning) {\n          return;\n        }\n      }\n\n      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      actives.forEach(elemActive => {\n        if (container !== elemActive) {\n          Collapse.getOrCreateInstance(elemActive, {\n            toggle: false\n          }).hide();\n        }\n\n        if (!activesData) {\n          Data.set(elemActive, DATA_KEY$9, null);\n        }\n      });\n\n      const dimension = this._getDimension();\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.style[dimension] = 0;\n\n      this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n      this._isTransitioning = true;\n\n      const complete = () => {\n        this._isTransitioning = false;\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n        this._element.style[dimension] = '';\n        EventHandler.trigger(this._element, EVENT_SHOWN$5);\n      };\n\n      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      const scrollSize = `scroll${capitalizedDimension}`;\n\n      this._queueCallback(complete, this._element, true);\n\n      this._element.style[dimension] = `${this._element[scrollSize]}px`;\n    }\n\n    hide() {\n      if (this._isTransitioning || !this._isShown()) {\n        return;\n      }\n\n      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      const dimension = this._getDimension();\n\n      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n      const triggerArrayLength = this._triggerArray.length;\n\n      for (let i = 0; i < triggerArrayLength; i++) {\n        const trigger = this._triggerArray[i];\n        const elem = getElementFromSelector(trigger);\n\n        if (elem && !this._isShown(elem)) {\n          this._addAriaAndCollapsedClass([trigger], false);\n        }\n      }\n\n      this._isTransitioning = true;\n\n      const complete = () => {\n        this._isTransitioning = false;\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSE);\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN$5);\n      };\n\n      this._element.style[dimension] = '';\n\n      this._queueCallback(complete, this._element, true);\n    }\n\n    _isShown(element = this._element) {\n      return element.classList.contains(CLASS_NAME_SHOW$7);\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$9,\n        ...Manipulator.getDataAttributes(this._element),\n        ...config\n      };\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      config.parent = getElement(config.parent);\n      typeCheckConfig(NAME$a, config, DefaultType$9);\n      return config;\n    }\n\n    _getDimension() {\n      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n    }\n\n    _initializeChildren() {\n      if (!this._config.parent) {\n        return;\n      }\n\n      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n      SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {\n        const selected = getElementFromSelector(element);\n\n        if (selected) {\n          this._addAriaAndCollapsedClass([element], this._isShown(selected));\n        }\n      });\n    }\n\n    _addAriaAndCollapsedClass(triggerArray, isOpen) {\n      if (!triggerArray.length) {\n        return;\n      }\n\n      triggerArray.forEach(elem => {\n        if (isOpen) {\n          elem.classList.remove(CLASS_NAME_COLLAPSED);\n        } else {\n          elem.classList.add(CLASS_NAME_COLLAPSED);\n        }\n\n        elem.setAttribute('aria-expanded', isOpen);\n      });\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const _config = {};\n\n        if (typeof config === 'string' && /show|hide/.test(config)) {\n          _config.toggle = false;\n        }\n\n        const data = Collapse.getOrCreateInstance(this, _config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    const selector = getSelectorFromElement(this);\n    const selectorElements = SelectorEngine.find(selector);\n    selectorElements.forEach(element => {\n      Collapse.getOrCreateInstance(element, {\n        toggle: false\n      }).toggle();\n    });\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Collapse to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Collapse);\n\n  var top = 'top';\n  var bottom = 'bottom';\n  var right = 'right';\n  var left = 'left';\n  var auto = 'auto';\n  var basePlacements = [top, bottom, right, left];\n  var start = 'start';\n  var end = 'end';\n  var clippingParents = 'clippingParents';\n  var viewport = 'viewport';\n  var popper = 'popper';\n  var reference = 'reference';\n  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n    return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n  }, []);\n  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n    return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n  }, []); // modifiers that need to read the DOM\n\n  var beforeRead = 'beforeRead';\n  var read = 'read';\n  var afterRead = 'afterRead'; // pure-logic modifiers\n\n  var beforeMain = 'beforeMain';\n  var main = 'main';\n  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\n  var beforeWrite = 'beforeWrite';\n  var write = 'write';\n  var afterWrite = 'afterWrite';\n  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\n  function getNodeName(element) {\n    return element ? (element.nodeName || '').toLowerCase() : null;\n  }\n\n  function getWindow(node) {\n    if (node == null) {\n      return window;\n    }\n\n    if (node.toString() !== '[object Window]') {\n      var ownerDocument = node.ownerDocument;\n      return ownerDocument ? ownerDocument.defaultView || window : window;\n    }\n\n    return node;\n  }\n\n  function isElement(node) {\n    var OwnElement = getWindow(node).Element;\n    return node instanceof OwnElement || node instanceof Element;\n  }\n\n  function isHTMLElement(node) {\n    var OwnElement = getWindow(node).HTMLElement;\n    return node instanceof OwnElement || node instanceof HTMLElement;\n  }\n\n  function isShadowRoot(node) {\n    // IE 11 has no ShadowRoot\n    if (typeof ShadowRoot === 'undefined') {\n      return false;\n    }\n\n    var OwnElement = getWindow(node).ShadowRoot;\n    return node instanceof OwnElement || node instanceof ShadowRoot;\n  }\n\n  // and applies them to the HTMLElements such as popper and arrow\n\n  function applyStyles(_ref) {\n    var state = _ref.state;\n    Object.keys(state.elements).forEach(function (name) {\n      var style = state.styles[name] || {};\n      var attributes = state.attributes[name] || {};\n      var element = state.elements[name]; // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe[cannot-write]\n\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (name) {\n        var value = attributes[name];\n\n        if (value === false) {\n          element.removeAttribute(name);\n        } else {\n          element.setAttribute(name, value === true ? '' : value);\n        }\n      });\n    });\n  }\n\n  function effect$2(_ref2) {\n    var state = _ref2.state;\n    var initialStyles = {\n      popper: {\n        position: state.options.strategy,\n        left: '0',\n        top: '0',\n        margin: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      },\n      reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n    state.styles = initialStyles;\n\n    if (state.elements.arrow) {\n      Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    }\n\n    return function () {\n      Object.keys(state.elements).forEach(function (name) {\n        var element = state.elements[name];\n        var attributes = state.attributes[name] || {};\n        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n        var style = styleProperties.reduce(function (style, property) {\n          style[property] = '';\n          return style;\n        }, {}); // arrow is optional + virtual elements\n\n        if (!isHTMLElement(element) || !getNodeName(element)) {\n          return;\n        }\n\n        Object.assign(element.style, style);\n        Object.keys(attributes).forEach(function (attribute) {\n          element.removeAttribute(attribute);\n        });\n      });\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const applyStyles$1 = {\n    name: 'applyStyles',\n    enabled: true,\n    phase: 'write',\n    fn: applyStyles,\n    effect: effect$2,\n    requires: ['computeStyles']\n  };\n\n  function getBasePlacement(placement) {\n    return placement.split('-')[0];\n  }\n\n  // import { isHTMLElement } from './instanceOf';\n  function getBoundingClientRect(element, // eslint-disable-next-line unused-imports/no-unused-vars\n  includeScale) {\n\n    var rect = element.getBoundingClientRect();\n    var scaleX = 1;\n    var scaleY = 1; // FIXME:\n    // `offsetWidth` returns an integer while `getBoundingClientRect`\n    // returns a float. This results in `scaleX` or `scaleY` being\n    // non-1 when it should be for elements that aren't a full pixel in\n    // width or height.\n    // if (isHTMLElement(element) && includeScale) {\n    //   const offsetHeight = element.offsetHeight;\n    //   const offsetWidth = element.offsetWidth;\n    //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\n    //   // Fallback to 1 in case both values are `0`\n    //   if (offsetWidth > 0) {\n    //     scaleX = rect.width / offsetWidth || 1;\n    //   }\n    //   if (offsetHeight > 0) {\n    //     scaleY = rect.height / offsetHeight || 1;\n    //   }\n    // }\n\n    return {\n      width: rect.width / scaleX,\n      height: rect.height / scaleY,\n      top: rect.top / scaleY,\n      right: rect.right / scaleX,\n      bottom: rect.bottom / scaleY,\n      left: rect.left / scaleX,\n      x: rect.left / scaleX,\n      y: rect.top / scaleY\n    };\n  }\n\n  // means it doesn't take into account transforms.\n\n  function getLayoutRect(element) {\n    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n    // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n    var width = element.offsetWidth;\n    var height = element.offsetHeight;\n\n    if (Math.abs(clientRect.width - width) <= 1) {\n      width = clientRect.width;\n    }\n\n    if (Math.abs(clientRect.height - height) <= 1) {\n      height = clientRect.height;\n    }\n\n    return {\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      width: width,\n      height: height\n    };\n  }\n\n  function contains(parent, child) {\n    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n    if (parent.contains(child)) {\n      return true;\n    } // then fallback to custom implementation with Shadow DOM support\n    else if (rootNode && isShadowRoot(rootNode)) {\n        var next = child;\n\n        do {\n          if (next && parent.isSameNode(next)) {\n            return true;\n          } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n          next = next.parentNode || next.host;\n        } while (next);\n      } // Give up, the result is false\n\n\n    return false;\n  }\n\n  function getComputedStyle$1(element) {\n    return getWindow(element).getComputedStyle(element);\n  }\n\n  function isTableElement(element) {\n    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n  }\n\n  function getDocumentElement(element) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n    element.document) || window.document).documentElement;\n  }\n\n  function getParentNode(element) {\n    if (getNodeName(element) === 'html') {\n      return element;\n    }\n\n    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n      // $FlowFixMe[incompatible-return]\n      // $FlowFixMe[prop-missing]\n      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n      element.parentNode || ( // DOM Element detected\n      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n      // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n      getDocumentElement(element) // fallback\n\n    );\n  }\n\n  function getTrueOffsetParent(element) {\n    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n    getComputedStyle$1(element).position === 'fixed') {\n      return null;\n    }\n\n    return element.offsetParent;\n  } // `.offsetParent` reports `null` for fixed elements, while absolute elements\n  // return the containing block\n\n\n  function getContainingBlock(element) {\n    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;\n    var isIE = navigator.userAgent.indexOf('Trident') !== -1;\n\n    if (isIE && isHTMLElement(element)) {\n      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n      var elementCss = getComputedStyle$1(element);\n\n      if (elementCss.position === 'fixed') {\n        return null;\n      }\n    }\n\n    var currentNode = getParentNode(element);\n\n    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n      // create a containing block.\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n        return currentNode;\n      } else {\n        currentNode = currentNode.parentNode;\n      }\n    }\n\n    return null;\n  } // Gets the closest ancestor positioned element. Handles some edge cases,\n  // such as table ancestors and cross browser bugs.\n\n\n  function getOffsetParent(element) {\n    var window = getWindow(element);\n    var offsetParent = getTrueOffsetParent(element);\n\n    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n      offsetParent = getTrueOffsetParent(offsetParent);\n    }\n\n    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {\n      return window;\n    }\n\n    return offsetParent || getContainingBlock(element) || window;\n  }\n\n  function getMainAxisFromPlacement(placement) {\n    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n  }\n\n  var max = Math.max;\n  var min = Math.min;\n  var round = Math.round;\n\n  function within(min$1, value, max$1) {\n    return max(min$1, min(value, max$1));\n  }\n\n  function getFreshSideObject() {\n    return {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n\n  function mergePaddingObject(paddingObject) {\n    return Object.assign({}, getFreshSideObject(), paddingObject);\n  }\n\n  function expandToHashMap(value, keys) {\n    return keys.reduce(function (hashMap, key) {\n      hashMap[key] = value;\n      return hashMap;\n    }, {});\n  }\n\n  var toPaddingObject = function toPaddingObject(padding, state) {\n    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n      placement: state.placement\n    })) : padding;\n    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  };\n\n  function arrow(_ref) {\n    var _state$modifiersData$;\n\n    var state = _ref.state,\n        name = _ref.name,\n        options = _ref.options;\n    var arrowElement = state.elements.arrow;\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var basePlacement = getBasePlacement(state.placement);\n    var axis = getMainAxisFromPlacement(basePlacement);\n    var isVertical = [left, right].indexOf(basePlacement) >= 0;\n    var len = isVertical ? 'height' : 'width';\n\n    if (!arrowElement || !popperOffsets) {\n      return;\n    }\n\n    var paddingObject = toPaddingObject(options.padding, state);\n    var arrowRect = getLayoutRect(arrowElement);\n    var minProp = axis === 'y' ? top : left;\n    var maxProp = axis === 'y' ? bottom : right;\n    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n    var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n    var arrowOffsetParent = getOffsetParent(arrowElement);\n    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n    // outside of the popper bounds\n\n    var min = paddingObject[minProp];\n    var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n    var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n    var axisProp = axis;\n    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n  }\n\n  function effect$1(_ref2) {\n    var state = _ref2.state,\n        options = _ref2.options;\n    var _options$element = options.element,\n        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n    if (arrowElement == null) {\n      return;\n    } // CSS selector\n\n\n    if (typeof arrowElement === 'string') {\n      arrowElement = state.elements.popper.querySelector(arrowElement);\n\n      if (!arrowElement) {\n        return;\n      }\n    }\n\n    if (!contains(state.elements.popper, arrowElement)) {\n\n      return;\n    }\n\n    state.elements.arrow = arrowElement;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const arrow$1 = {\n    name: 'arrow',\n    enabled: true,\n    phase: 'main',\n    fn: arrow,\n    effect: effect$1,\n    requires: ['popperOffsets'],\n    requiresIfExists: ['preventOverflow']\n  };\n\n  function getVariation(placement) {\n    return placement.split('-')[1];\n  }\n\n  var unsetSides = {\n    top: 'auto',\n    right: 'auto',\n    bottom: 'auto',\n    left: 'auto'\n  }; // Round the offsets to the nearest suitable subpixel based on the DPR.\n  // Zooming can change the DPR, but it seems to report a value that will\n  // cleanly divide the values into the appropriate subpixels.\n\n  function roundOffsetsByDPR(_ref) {\n    var x = _ref.x,\n        y = _ref.y;\n    var win = window;\n    var dpr = win.devicePixelRatio || 1;\n    return {\n      x: round(round(x * dpr) / dpr) || 0,\n      y: round(round(y * dpr) / dpr) || 0\n    };\n  }\n\n  function mapToStyles(_ref2) {\n    var _Object$assign2;\n\n    var popper = _ref2.popper,\n        popperRect = _ref2.popperRect,\n        placement = _ref2.placement,\n        variation = _ref2.variation,\n        offsets = _ref2.offsets,\n        position = _ref2.position,\n        gpuAcceleration = _ref2.gpuAcceleration,\n        adaptive = _ref2.adaptive,\n        roundOffsets = _ref2.roundOffsets;\n\n    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,\n        _ref3$x = _ref3.x,\n        x = _ref3$x === void 0 ? 0 : _ref3$x,\n        _ref3$y = _ref3.y,\n        y = _ref3$y === void 0 ? 0 : _ref3$y;\n\n    var hasX = offsets.hasOwnProperty('x');\n    var hasY = offsets.hasOwnProperty('y');\n    var sideX = left;\n    var sideY = top;\n    var win = window;\n\n    if (adaptive) {\n      var offsetParent = getOffsetParent(popper);\n      var heightProp = 'clientHeight';\n      var widthProp = 'clientWidth';\n\n      if (offsetParent === getWindow(popper)) {\n        offsetParent = getDocumentElement(popper);\n\n        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {\n          heightProp = 'scrollHeight';\n          widthProp = 'scrollWidth';\n        }\n      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n      offsetParent = offsetParent;\n\n      if (placement === top || (placement === left || placement === right) && variation === end) {\n        sideY = bottom; // $FlowFixMe[prop-missing]\n\n        y -= offsetParent[heightProp] - popperRect.height;\n        y *= gpuAcceleration ? 1 : -1;\n      }\n\n      if (placement === left || (placement === top || placement === bottom) && variation === end) {\n        sideX = right; // $FlowFixMe[prop-missing]\n\n        x -= offsetParent[widthProp] - popperRect.width;\n        x *= gpuAcceleration ? 1 : -1;\n      }\n    }\n\n    var commonStyles = Object.assign({\n      position: position\n    }, adaptive && unsetSides);\n\n    if (gpuAcceleration) {\n      var _Object$assign;\n\n      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n    }\n\n    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n  }\n\n  function computeStyles(_ref4) {\n    var state = _ref4.state,\n        options = _ref4.options;\n    var _options$gpuAccelerat = options.gpuAcceleration,\n        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n        _options$adaptive = options.adaptive,\n        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n        _options$roundOffsets = options.roundOffsets,\n        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n    var commonStyles = {\n      placement: getBasePlacement(state.placement),\n      variation: getVariation(state.placement),\n      popper: state.elements.popper,\n      popperRect: state.rects.popper,\n      gpuAcceleration: gpuAcceleration\n    };\n\n    if (state.modifiersData.popperOffsets != null) {\n      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n        offsets: state.modifiersData.popperOffsets,\n        position: state.options.strategy,\n        adaptive: adaptive,\n        roundOffsets: roundOffsets\n      })));\n    }\n\n    if (state.modifiersData.arrow != null) {\n      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n        offsets: state.modifiersData.arrow,\n        position: 'absolute',\n        adaptive: false,\n        roundOffsets: roundOffsets\n      })));\n    }\n\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n      'data-popper-placement': state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const computeStyles$1 = {\n    name: 'computeStyles',\n    enabled: true,\n    phase: 'beforeWrite',\n    fn: computeStyles,\n    data: {}\n  };\n\n  var passive = {\n    passive: true\n  };\n\n  function effect(_ref) {\n    var state = _ref.state,\n        instance = _ref.instance,\n        options = _ref.options;\n    var _options$scroll = options.scroll,\n        scroll = _options$scroll === void 0 ? true : _options$scroll,\n        _options$resize = options.resize,\n        resize = _options$resize === void 0 ? true : _options$resize;\n    var window = getWindow(state.elements.popper);\n    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.addEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.addEventListener('resize', instance.update, passive);\n    }\n\n    return function () {\n      if (scroll) {\n        scrollParents.forEach(function (scrollParent) {\n          scrollParent.removeEventListener('scroll', instance.update, passive);\n        });\n      }\n\n      if (resize) {\n        window.removeEventListener('resize', instance.update, passive);\n      }\n    };\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const eventListeners = {\n    name: 'eventListeners',\n    enabled: true,\n    phase: 'write',\n    fn: function fn() {},\n    effect: effect,\n    data: {}\n  };\n\n  var hash$1 = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  function getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash$1[matched];\n    });\n  }\n\n  var hash = {\n    start: 'end',\n    end: 'start'\n  };\n  function getOppositeVariationPlacement(placement) {\n    return placement.replace(/start|end/g, function (matched) {\n      return hash[matched];\n    });\n  }\n\n  function getWindowScroll(node) {\n    var win = getWindow(node);\n    var scrollLeft = win.pageXOffset;\n    var scrollTop = win.pageYOffset;\n    return {\n      scrollLeft: scrollLeft,\n      scrollTop: scrollTop\n    };\n  }\n\n  function getWindowScrollBarX(element) {\n    // If <html> has a CSS width greater than the viewport, then this will be\n    // incorrect for RTL.\n    // Popper 1 is broken in this case and never had a bug report so let's assume\n    // it's not an issue. I don't think anyone ever specifies width on <html>\n    // anyway.\n    // Browsers where the left scrollbar doesn't cause an issue report `0` for\n    // this (e.g. Edge 2019, IE11, Safari)\n    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n  }\n\n  function getViewportRect(element) {\n    var win = getWindow(element);\n    var html = getDocumentElement(element);\n    var visualViewport = win.visualViewport;\n    var width = html.clientWidth;\n    var height = html.clientHeight;\n    var x = 0;\n    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n    // can be obscured underneath it.\n    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n    // if it isn't open, so if this isn't available, the popper will be detected\n    // to overflow the bottom of the screen too early.\n\n    if (visualViewport) {\n      width = visualViewport.width;\n      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n      // errors due to floating point numbers, so we need to check precision.\n      // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n      // Feature detection fails in mobile emulation mode in Chrome.\n      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n      // 0.001\n      // Fallback here: \"Not Safari\" userAgent\n\n      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        x = visualViewport.offsetLeft;\n        y = visualViewport.offsetTop;\n      }\n    }\n\n    return {\n      width: width,\n      height: height,\n      x: x + getWindowScrollBarX(element),\n      y: y\n    };\n  }\n\n  // of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\n  function getDocumentRect(element) {\n    var _element$ownerDocumen;\n\n    var html = getDocumentElement(element);\n    var winScroll = getWindowScroll(element);\n    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n    var y = -winScroll.scrollTop;\n\n    if (getComputedStyle$1(body || html).direction === 'rtl') {\n      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n    }\n\n    return {\n      width: width,\n      height: height,\n      x: x,\n      y: y\n    };\n  }\n\n  function isScrollParent(element) {\n    // Firefox wants us to check `-x` and `-y` variations as well\n    var _getComputedStyle = getComputedStyle$1(element),\n        overflow = _getComputedStyle.overflow,\n        overflowX = _getComputedStyle.overflowX,\n        overflowY = _getComputedStyle.overflowY;\n\n    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n  }\n\n  function getScrollParent(node) {\n    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n      // $FlowFixMe[incompatible-return]: assume body is always available\n      return node.ownerDocument.body;\n    }\n\n    if (isHTMLElement(node) && isScrollParent(node)) {\n      return node;\n    }\n\n    return getScrollParent(getParentNode(node));\n  }\n\n  /*\n  given a DOM element, return the list of all scroll parents, up the list of ancesors\n  until we get to the top window object. This list is what we attach scroll listeners\n  to, because if any of these parent elements scroll, we'll need to re-calculate the\n  reference element's position.\n  */\n\n  function listScrollParents(element, list) {\n    var _element$ownerDocumen;\n\n    if (list === void 0) {\n      list = [];\n    }\n\n    var scrollParent = getScrollParent(element);\n    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n    var win = getWindow(scrollParent);\n    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n    var updatedList = list.concat(target);\n    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    updatedList.concat(listScrollParents(getParentNode(target)));\n  }\n\n  function rectToClientRect(rect) {\n    return Object.assign({}, rect, {\n      left: rect.x,\n      top: rect.y,\n      right: rect.x + rect.width,\n      bottom: rect.y + rect.height\n    });\n  }\n\n  function getInnerBoundingClientRect(element) {\n    var rect = getBoundingClientRect(element);\n    rect.top = rect.top + element.clientTop;\n    rect.left = rect.left + element.clientLeft;\n    rect.bottom = rect.top + element.clientHeight;\n    rect.right = rect.left + element.clientWidth;\n    rect.width = element.clientWidth;\n    rect.height = element.clientHeight;\n    rect.x = rect.left;\n    rect.y = rect.top;\n    return rect;\n  }\n\n  function getClientRectFromMixedType(element, clippingParent) {\n    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n  } // A \"clipping parent\" is an overflowable container with the characteristic of\n  // clipping (or hiding) overflowing elements with a position different from\n  // `initial`\n\n\n  function getClippingParents(element) {\n    var clippingParents = listScrollParents(getParentNode(element));\n    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;\n    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n    if (!isElement(clipperElement)) {\n      return [];\n    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n    return clippingParents.filter(function (clippingParent) {\n      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n    });\n  } // Gets the maximum area that the element is visible in due to any number of\n  // clipping parents\n\n\n  function getClippingRect(element, boundary, rootBoundary) {\n    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n    var firstClippingParent = clippingParents[0];\n    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n      var rect = getClientRectFromMixedType(element, clippingParent);\n      accRect.top = max(rect.top, accRect.top);\n      accRect.right = min(rect.right, accRect.right);\n      accRect.bottom = min(rect.bottom, accRect.bottom);\n      accRect.left = max(rect.left, accRect.left);\n      return accRect;\n    }, getClientRectFromMixedType(element, firstClippingParent));\n    clippingRect.width = clippingRect.right - clippingRect.left;\n    clippingRect.height = clippingRect.bottom - clippingRect.top;\n    clippingRect.x = clippingRect.left;\n    clippingRect.y = clippingRect.top;\n    return clippingRect;\n  }\n\n  function computeOffsets(_ref) {\n    var reference = _ref.reference,\n        element = _ref.element,\n        placement = _ref.placement;\n    var basePlacement = placement ? getBasePlacement(placement) : null;\n    var variation = placement ? getVariation(placement) : null;\n    var commonX = reference.x + reference.width / 2 - element.width / 2;\n    var commonY = reference.y + reference.height / 2 - element.height / 2;\n    var offsets;\n\n    switch (basePlacement) {\n      case top:\n        offsets = {\n          x: commonX,\n          y: reference.y - element.height\n        };\n        break;\n\n      case bottom:\n        offsets = {\n          x: commonX,\n          y: reference.y + reference.height\n        };\n        break;\n\n      case right:\n        offsets = {\n          x: reference.x + reference.width,\n          y: commonY\n        };\n        break;\n\n      case left:\n        offsets = {\n          x: reference.x - element.width,\n          y: commonY\n        };\n        break;\n\n      default:\n        offsets = {\n          x: reference.x,\n          y: reference.y\n        };\n    }\n\n    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n    if (mainAxis != null) {\n      var len = mainAxis === 'y' ? 'height' : 'width';\n\n      switch (variation) {\n        case start:\n          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n          break;\n\n        case end:\n          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n          break;\n      }\n    }\n\n    return offsets;\n  }\n\n  function detectOverflow(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        _options$placement = _options.placement,\n        placement = _options$placement === void 0 ? state.placement : _options$placement,\n        _options$boundary = _options.boundary,\n        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n        _options$rootBoundary = _options.rootBoundary,\n        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n        _options$elementConte = _options.elementContext,\n        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n        _options$altBoundary = _options.altBoundary,\n        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n        _options$padding = _options.padding,\n        padding = _options$padding === void 0 ? 0 : _options$padding;\n    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n    var altContext = elementContext === popper ? reference : popper;\n    var popperRect = state.rects.popper;\n    var element = state.elements[altBoundary ? altContext : elementContext];\n    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n    var referenceClientRect = getBoundingClientRect(state.elements.reference);\n    var popperOffsets = computeOffsets({\n      reference: referenceClientRect,\n      element: popperRect,\n      strategy: 'absolute',\n      placement: placement\n    });\n    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n    // 0 or negative = within the clipping rect\n\n    var overflowOffsets = {\n      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n      right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n    };\n    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n    if (elementContext === popper && offsetData) {\n      var offset = offsetData[placement];\n      Object.keys(overflowOffsets).forEach(function (key) {\n        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n        overflowOffsets[key] += offset[axis] * multiply;\n      });\n    }\n\n    return overflowOffsets;\n  }\n\n  function computeAutoPlacement(state, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _options = options,\n        placement = _options.placement,\n        boundary = _options.boundary,\n        rootBoundary = _options.rootBoundary,\n        padding = _options.padding,\n        flipVariations = _options.flipVariations,\n        _options$allowedAutoP = _options.allowedAutoPlacements,\n        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n    var variation = getVariation(placement);\n    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n      return getVariation(placement) === variation;\n    }) : basePlacements;\n    var allowedPlacements = placements$1.filter(function (placement) {\n      return allowedAutoPlacements.indexOf(placement) >= 0;\n    });\n\n    if (allowedPlacements.length === 0) {\n      allowedPlacements = placements$1;\n    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n    var overflows = allowedPlacements.reduce(function (acc, placement) {\n      acc[placement] = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding\n      })[getBasePlacement(placement)];\n      return acc;\n    }, {});\n    return Object.keys(overflows).sort(function (a, b) {\n      return overflows[a] - overflows[b];\n    });\n  }\n\n  function getExpandedFallbackPlacements(placement) {\n    if (getBasePlacement(placement) === auto) {\n      return [];\n    }\n\n    var oppositePlacement = getOppositePlacement(placement);\n    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n  }\n\n  function flip(_ref) {\n    var state = _ref.state,\n        options = _ref.options,\n        name = _ref.name;\n\n    if (state.modifiersData[name]._skip) {\n      return;\n    }\n\n    var _options$mainAxis = options.mainAxis,\n        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n        _options$altAxis = options.altAxis,\n        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n        specifiedFallbackPlacements = options.fallbackPlacements,\n        padding = options.padding,\n        boundary = options.boundary,\n        rootBoundary = options.rootBoundary,\n        altBoundary = options.altBoundary,\n        _options$flipVariatio = options.flipVariations,\n        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n        allowedAutoPlacements = options.allowedAutoPlacements;\n    var preferredPlacement = state.options.placement;\n    var basePlacement = getBasePlacement(preferredPlacement);\n    var isBasePlacement = basePlacement === preferredPlacement;\n    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        padding: padding,\n        flipVariations: flipVariations,\n        allowedAutoPlacements: allowedAutoPlacements\n      }) : placement);\n    }, []);\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var checksMap = new Map();\n    var makeFallbackChecks = true;\n    var firstFittingPlacement = placements[0];\n\n    for (var i = 0; i < placements.length; i++) {\n      var placement = placements[i];\n\n      var _basePlacement = getBasePlacement(placement);\n\n      var isStartVariation = getVariation(placement) === start;\n      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n      var len = isVertical ? 'width' : 'height';\n      var overflow = detectOverflow(state, {\n        placement: placement,\n        boundary: boundary,\n        rootBoundary: rootBoundary,\n        altBoundary: altBoundary,\n        padding: padding\n      });\n      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n      if (referenceRect[len] > popperRect[len]) {\n        mainVariationSide = getOppositePlacement(mainVariationSide);\n      }\n\n      var altVariationSide = getOppositePlacement(mainVariationSide);\n      var checks = [];\n\n      if (checkMainAxis) {\n        checks.push(overflow[_basePlacement] <= 0);\n      }\n\n      if (checkAltAxis) {\n        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n      }\n\n      if (checks.every(function (check) {\n        return check;\n      })) {\n        firstFittingPlacement = placement;\n        makeFallbackChecks = false;\n        break;\n      }\n\n      checksMap.set(placement, checks);\n    }\n\n    if (makeFallbackChecks) {\n      // `2` may be desired in some cases \u2013 research later\n      var numberOfChecks = flipVariations ? 3 : 1;\n\n      var _loop = function _loop(_i) {\n        var fittingPlacement = placements.find(function (placement) {\n          var checks = checksMap.get(placement);\n\n          if (checks) {\n            return checks.slice(0, _i).every(function (check) {\n              return check;\n            });\n          }\n        });\n\n        if (fittingPlacement) {\n          firstFittingPlacement = fittingPlacement;\n          return \"break\";\n        }\n      };\n\n      for (var _i = numberOfChecks; _i > 0; _i--) {\n        var _ret = _loop(_i);\n\n        if (_ret === \"break\") break;\n      }\n    }\n\n    if (state.placement !== firstFittingPlacement) {\n      state.modifiersData[name]._skip = true;\n      state.placement = firstFittingPlacement;\n      state.reset = true;\n    }\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const flip$1 = {\n    name: 'flip',\n    enabled: true,\n    phase: 'main',\n    fn: flip,\n    requiresIfExists: ['offset'],\n    data: {\n      _skip: false\n    }\n  };\n\n  function getSideOffsets(overflow, rect, preventedOffsets) {\n    if (preventedOffsets === void 0) {\n      preventedOffsets = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    return {\n      top: overflow.top - rect.height - preventedOffsets.y,\n      right: overflow.right - rect.width + preventedOffsets.x,\n      bottom: overflow.bottom - rect.height + preventedOffsets.y,\n      left: overflow.left - rect.width - preventedOffsets.x\n    };\n  }\n\n  function isAnySideFullyClipped(overflow) {\n    return [top, right, bottom, left].some(function (side) {\n      return overflow[side] >= 0;\n    });\n  }\n\n  function hide(_ref) {\n    var state = _ref.state,\n        name = _ref.name;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var preventedOffsets = state.modifiersData.preventOverflow;\n    var referenceOverflow = detectOverflow(state, {\n      elementContext: 'reference'\n    });\n    var popperAltOverflow = detectOverflow(state, {\n      altBoundary: true\n    });\n    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n    state.modifiersData[name] = {\n      referenceClippingOffsets: referenceClippingOffsets,\n      popperEscapeOffsets: popperEscapeOffsets,\n      isReferenceHidden: isReferenceHidden,\n      hasPopperEscaped: hasPopperEscaped\n    };\n    state.attributes.popper = Object.assign({}, state.attributes.popper, {\n      'data-popper-reference-hidden': isReferenceHidden,\n      'data-popper-escaped': hasPopperEscaped\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const hide$1 = {\n    name: 'hide',\n    enabled: true,\n    phase: 'main',\n    requiresIfExists: ['preventOverflow'],\n    fn: hide\n  };\n\n  function distanceAndSkiddingToXY(placement, rects, offset) {\n    var basePlacement = getBasePlacement(placement);\n    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n      placement: placement\n    })) : offset,\n        skidding = _ref[0],\n        distance = _ref[1];\n\n    skidding = skidding || 0;\n    distance = (distance || 0) * invertDistance;\n    return [left, right].indexOf(basePlacement) >= 0 ? {\n      x: distance,\n      y: skidding\n    } : {\n      x: skidding,\n      y: distance\n    };\n  }\n\n  function offset(_ref2) {\n    var state = _ref2.state,\n        options = _ref2.options,\n        name = _ref2.name;\n    var _options$offset = options.offset,\n        offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n    var data = placements.reduce(function (acc, placement) {\n      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n      return acc;\n    }, {});\n    var _data$state$placement = data[state.placement],\n        x = _data$state$placement.x,\n        y = _data$state$placement.y;\n\n    if (state.modifiersData.popperOffsets != null) {\n      state.modifiersData.popperOffsets.x += x;\n      state.modifiersData.popperOffsets.y += y;\n    }\n\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const offset$1 = {\n    name: 'offset',\n    enabled: true,\n    phase: 'main',\n    requires: ['popperOffsets'],\n    fn: offset\n  };\n\n  function popperOffsets(_ref) {\n    var state = _ref.state,\n        name = _ref.name;\n    // Offsets are the actual position the popper needs to have to be\n    // properly positioned near its reference element\n    // This is the most basic placement, and will be adjusted by\n    // the modifiers in the next step\n    state.modifiersData[name] = computeOffsets({\n      reference: state.rects.reference,\n      element: state.rects.popper,\n      strategy: 'absolute',\n      placement: state.placement\n    });\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const popperOffsets$1 = {\n    name: 'popperOffsets',\n    enabled: true,\n    phase: 'read',\n    fn: popperOffsets,\n    data: {}\n  };\n\n  function getAltAxis(axis) {\n    return axis === 'x' ? 'y' : 'x';\n  }\n\n  function preventOverflow(_ref) {\n    var state = _ref.state,\n        options = _ref.options,\n        name = _ref.name;\n    var _options$mainAxis = options.mainAxis,\n        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n        _options$altAxis = options.altAxis,\n        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n        boundary = options.boundary,\n        rootBoundary = options.rootBoundary,\n        altBoundary = options.altBoundary,\n        padding = options.padding,\n        _options$tether = options.tether,\n        tether = _options$tether === void 0 ? true : _options$tether,\n        _options$tetherOffset = options.tetherOffset,\n        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n    var overflow = detectOverflow(state, {\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      altBoundary: altBoundary\n    });\n    var basePlacement = getBasePlacement(state.placement);\n    var variation = getVariation(state.placement);\n    var isBasePlacement = !variation;\n    var mainAxis = getMainAxisFromPlacement(basePlacement);\n    var altAxis = getAltAxis(mainAxis);\n    var popperOffsets = state.modifiersData.popperOffsets;\n    var referenceRect = state.rects.reference;\n    var popperRect = state.rects.popper;\n    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n      placement: state.placement\n    })) : tetherOffset;\n    var data = {\n      x: 0,\n      y: 0\n    };\n\n    if (!popperOffsets) {\n      return;\n    }\n\n    if (checkMainAxis || checkAltAxis) {\n      var mainSide = mainAxis === 'y' ? top : left;\n      var altSide = mainAxis === 'y' ? bottom : right;\n      var len = mainAxis === 'y' ? 'height' : 'width';\n      var offset = popperOffsets[mainAxis];\n      var min$1 = popperOffsets[mainAxis] + overflow[mainSide];\n      var max$1 = popperOffsets[mainAxis] - overflow[altSide];\n      var additive = tether ? -popperRect[len] / 2 : 0;\n      var minLen = variation === start ? referenceRect[len] : popperRect[len];\n      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n      // outside the reference bounds\n\n      var arrowElement = state.elements.arrow;\n      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n        width: 0,\n        height: 0\n      };\n      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n      var arrowPaddingMin = arrowPaddingObject[mainSide];\n      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n      // to include its full size in the calculation. If the reference is small\n      // and near the edge of a boundary, the popper can overflow even if the\n      // reference is not overflowing as well (e.g. virtual elements with no\n      // width or height)\n\n      var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n      var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n      var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n      var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n\n      if (checkMainAxis) {\n        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n        popperOffsets[mainAxis] = preventedOffset;\n        data[mainAxis] = preventedOffset - offset;\n      }\n\n      if (checkAltAxis) {\n        var _mainSide = mainAxis === 'x' ? top : left;\n\n        var _altSide = mainAxis === 'x' ? bottom : right;\n\n        var _offset = popperOffsets[altAxis];\n\n        var _min = _offset + overflow[_mainSide];\n\n        var _max = _offset - overflow[_altSide];\n\n        var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);\n\n        popperOffsets[altAxis] = _preventedOffset;\n        data[altAxis] = _preventedOffset - _offset;\n      }\n    }\n\n    state.modifiersData[name] = data;\n  } // eslint-disable-next-line import/no-unused-modules\n\n\n  const preventOverflow$1 = {\n    name: 'preventOverflow',\n    enabled: true,\n    phase: 'main',\n    fn: preventOverflow,\n    requiresIfExists: ['offset']\n  };\n\n  function getHTMLElementScroll(element) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n\n  function getNodeScroll(node) {\n    if (node === getWindow(node) || !isHTMLElement(node)) {\n      return getWindowScroll(node);\n    } else {\n      return getHTMLElementScroll(node);\n    }\n  }\n\n  function isElementScaled(element) {\n    var rect = element.getBoundingClientRect();\n    var scaleX = rect.width / element.offsetWidth || 1;\n    var scaleY = rect.height / element.offsetHeight || 1;\n    return scaleX !== 1 || scaleY !== 1;\n  } // Returns the composite rect of an element relative to its offsetParent.\n  // Composite means it takes into account transforms as well as layout.\n\n\n  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n    if (isFixed === void 0) {\n      isFixed = false;\n    }\n\n    var isOffsetParentAnElement = isHTMLElement(offsetParent);\n    isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n    var documentElement = getDocumentElement(offsetParent);\n    var rect = getBoundingClientRect(elementOrVirtualElement);\n    var scroll = {\n      scrollLeft: 0,\n      scrollTop: 0\n    };\n    var offsets = {\n      x: 0,\n      y: 0\n    };\n\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n      isScrollParent(documentElement)) {\n        scroll = getNodeScroll(offsetParent);\n      }\n\n      if (isHTMLElement(offsetParent)) {\n        offsets = getBoundingClientRect(offsetParent);\n        offsets.x += offsetParent.clientLeft;\n        offsets.y += offsetParent.clientTop;\n      } else if (documentElement) {\n        offsets.x = getWindowScrollBarX(documentElement);\n      }\n    }\n\n    return {\n      x: rect.left + scroll.scrollLeft - offsets.x,\n      y: rect.top + scroll.scrollTop - offsets.y,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  function order(modifiers) {\n    var map = new Map();\n    var visited = new Set();\n    var result = [];\n    modifiers.forEach(function (modifier) {\n      map.set(modifier.name, modifier);\n    }); // On visiting object, check for its dependencies and visit them recursively\n\n    function sort(modifier) {\n      visited.add(modifier.name);\n      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n      requires.forEach(function (dep) {\n        if (!visited.has(dep)) {\n          var depModifier = map.get(dep);\n\n          if (depModifier) {\n            sort(depModifier);\n          }\n        }\n      });\n      result.push(modifier);\n    }\n\n    modifiers.forEach(function (modifier) {\n      if (!visited.has(modifier.name)) {\n        // check for visited object\n        sort(modifier);\n      }\n    });\n    return result;\n  }\n\n  function orderModifiers(modifiers) {\n    // order based on dependencies\n    var orderedModifiers = order(modifiers); // order based on phase\n\n    return modifierPhases.reduce(function (acc, phase) {\n      return acc.concat(orderedModifiers.filter(function (modifier) {\n        return modifier.phase === phase;\n      }));\n    }, []);\n  }\n\n  function debounce(fn) {\n    var pending;\n    return function () {\n      if (!pending) {\n        pending = new Promise(function (resolve) {\n          Promise.resolve().then(function () {\n            pending = undefined;\n            resolve(fn());\n          });\n        });\n      }\n\n      return pending;\n    };\n  }\n\n  function mergeByName(modifiers) {\n    var merged = modifiers.reduce(function (merged, current) {\n      var existing = merged[current.name];\n      merged[current.name] = existing ? Object.assign({}, existing, current, {\n        options: Object.assign({}, existing.options, current.options),\n        data: Object.assign({}, existing.data, current.data)\n      }) : current;\n      return merged;\n    }, {}); // IE11 does not support Object.values\n\n    return Object.keys(merged).map(function (key) {\n      return merged[key];\n    });\n  }\n\n  var DEFAULT_OPTIONS = {\n    placement: 'bottom',\n    modifiers: [],\n    strategy: 'absolute'\n  };\n\n  function areValidElements() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return !args.some(function (element) {\n      return !(element && typeof element.getBoundingClientRect === 'function');\n    });\n  }\n\n  function popperGenerator(generatorOptions) {\n    if (generatorOptions === void 0) {\n      generatorOptions = {};\n    }\n\n    var _generatorOptions = generatorOptions,\n        _generatorOptions$def = _generatorOptions.defaultModifiers,\n        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n        _generatorOptions$def2 = _generatorOptions.defaultOptions,\n        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n    return function createPopper(reference, popper, options) {\n      if (options === void 0) {\n        options = defaultOptions;\n      }\n\n      var state = {\n        placement: 'bottom',\n        orderedModifiers: [],\n        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n        modifiersData: {},\n        elements: {\n          reference: reference,\n          popper: popper\n        },\n        attributes: {},\n        styles: {}\n      };\n      var effectCleanupFns = [];\n      var isDestroyed = false;\n      var instance = {\n        state: state,\n        setOptions: function setOptions(setOptionsAction) {\n          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n          cleanupModifierEffects();\n          state.options = Object.assign({}, defaultOptions, state.options, options);\n          state.scrollParents = {\n            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n            popper: listScrollParents(popper)\n          }; // Orders the modifiers based on their dependencies and `phase`\n          // properties\n\n          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n          state.orderedModifiers = orderedModifiers.filter(function (m) {\n            return m.enabled;\n          }); // Validate the provided modifiers so that the consumer will get warned\n\n          runModifierEffects();\n          return instance.update();\n        },\n        // Sync update \u2013 it will always be executed, even if not necessary. This\n        // is useful for low frequency updates where sync behavior simplifies the\n        // logic.\n        // For high frequency updates (e.g. `resize` and `scroll` events), always\n        // prefer the async Popper#update method\n        forceUpdate: function forceUpdate() {\n          if (isDestroyed) {\n            return;\n          }\n\n          var _state$elements = state.elements,\n              reference = _state$elements.reference,\n              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n          // anymore\n\n          if (!areValidElements(reference, popper)) {\n\n            return;\n          } // Store the reference and popper rects to be read by modifiers\n\n\n          state.rects = {\n            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n            popper: getLayoutRect(popper)\n          }; // Modifiers have the ability to reset the current update cycle. The\n          // most common use case for this is the `flip` modifier changing the\n          // placement, which then needs to re-run all the modifiers, because the\n          // logic was previously ran for the previous placement and is therefore\n          // stale/incorrect\n\n          state.reset = false;\n          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n          // is filled with the initial data specified by the modifier. This means\n          // it doesn't persist and is fresh on each update.\n          // To ensure persistent data, use `${name}#persistent`\n\n          state.orderedModifiers.forEach(function (modifier) {\n            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n          });\n\n          for (var index = 0; index < state.orderedModifiers.length; index++) {\n\n            if (state.reset === true) {\n              state.reset = false;\n              index = -1;\n              continue;\n            }\n\n            var _state$orderedModifie = state.orderedModifiers[index],\n                fn = _state$orderedModifie.fn,\n                _state$orderedModifie2 = _state$orderedModifie.options,\n                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n                name = _state$orderedModifie.name;\n\n            if (typeof fn === 'function') {\n              state = fn({\n                state: state,\n                options: _options,\n                name: name,\n                instance: instance\n              }) || state;\n            }\n          }\n        },\n        // Async and optimistically optimized update \u2013 it will not be executed if\n        // not necessary (debounced to run at most once-per-tick)\n        update: debounce(function () {\n          return new Promise(function (resolve) {\n            instance.forceUpdate();\n            resolve(state);\n          });\n        }),\n        destroy: function destroy() {\n          cleanupModifierEffects();\n          isDestroyed = true;\n        }\n      };\n\n      if (!areValidElements(reference, popper)) {\n\n        return instance;\n      }\n\n      instance.setOptions(options).then(function (state) {\n        if (!isDestroyed && options.onFirstUpdate) {\n          options.onFirstUpdate(state);\n        }\n      }); // Modifiers have the ability to execute arbitrary code before the first\n      // update cycle runs. They will be executed in the same order as the update\n      // cycle. This is useful when a modifier adds some persistent data that\n      // other modifiers need to use, but the modifier is run after the dependent\n      // one.\n\n      function runModifierEffects() {\n        state.orderedModifiers.forEach(function (_ref3) {\n          var name = _ref3.name,\n              _ref3$options = _ref3.options,\n              options = _ref3$options === void 0 ? {} : _ref3$options,\n              effect = _ref3.effect;\n\n          if (typeof effect === 'function') {\n            var cleanupFn = effect({\n              state: state,\n              name: name,\n              instance: instance,\n              options: options\n            });\n\n            var noopFn = function noopFn() {};\n\n            effectCleanupFns.push(cleanupFn || noopFn);\n          }\n        });\n      }\n\n      function cleanupModifierEffects() {\n        effectCleanupFns.forEach(function (fn) {\n          return fn();\n        });\n        effectCleanupFns = [];\n      }\n\n      return instance;\n    };\n  }\n  var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\n  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];\n  var createPopper$1 = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers$1\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];\n  var createPopper = /*#__PURE__*/popperGenerator({\n    defaultModifiers: defaultModifiers\n  }); // eslint-disable-next-line import/no-unused-modules\n\n  const Popper = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    popperGenerator,\n    detectOverflow,\n    createPopperBase: createPopper$2,\n    createPopper,\n    createPopperLite: createPopper$1,\n    top,\n    bottom,\n    right,\n    left,\n    auto,\n    basePlacements,\n    start,\n    end,\n    clippingParents,\n    viewport,\n    popper,\n    reference,\n    variationPlacements,\n    placements,\n    beforeRead,\n    read,\n    afterRead,\n    beforeMain,\n    main,\n    afterMain,\n    beforeWrite,\n    write,\n    afterWrite,\n    modifierPhases,\n    applyStyles: applyStyles$1,\n    arrow: arrow$1,\n    computeStyles: computeStyles$1,\n    eventListeners,\n    flip: flip$1,\n    hide: hide$1,\n    offset: offset$1,\n    popperOffsets: popperOffsets$1,\n    preventOverflow: preventOverflow$1\n  });\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dropdown.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$9 = 'dropdown';\n  const DATA_KEY$8 = 'bs.dropdown';\n  const EVENT_KEY$8 = `.${DATA_KEY$8}`;\n  const DATA_API_KEY$4 = '.data-api';\n  const ESCAPE_KEY$2 = 'Escape';\n  const SPACE_KEY = 'Space';\n  const TAB_KEY$1 = 'Tab';\n  const ARROW_UP_KEY = 'ArrowUp';\n  const ARROW_DOWN_KEY = 'ArrowDown';\n  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n  const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY$2}`);\n  const EVENT_HIDE$4 = `hide${EVENT_KEY$8}`;\n  const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$8}`;\n  const EVENT_SHOW$4 = `show${EVENT_KEY$8}`;\n  const EVENT_SHOWN$4 = `shown${EVENT_KEY$8}`;\n  const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$8}${DATA_API_KEY$4}`;\n  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$8}${DATA_API_KEY$4}`;\n  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$8}${DATA_API_KEY$4}`;\n  const CLASS_NAME_SHOW$6 = 'show';\n  const CLASS_NAME_DROPUP = 'dropup';\n  const CLASS_NAME_DROPEND = 'dropend';\n  const CLASS_NAME_DROPSTART = 'dropstart';\n  const CLASS_NAME_NAVBAR = 'navbar';\n  const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]';\n  const SELECTOR_MENU = '.dropdown-menu';\n  const SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\n  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\n  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\n  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\n  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\n  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\n  const Default$8 = {\n    offset: [0, 2],\n    boundary: 'clippingParents',\n    reference: 'toggle',\n    display: 'dynamic',\n    popperConfig: null,\n    autoClose: true\n  };\n  const DefaultType$8 = {\n    offset: '(array|string|function)',\n    boundary: '(string|element)',\n    reference: '(string|element|object)',\n    display: 'string',\n    popperConfig: '(null|object|function)',\n    autoClose: '(boolean|string)'\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Dropdown extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._popper = null;\n      this._config = this._getConfig(config);\n      this._menu = this._getMenuElement();\n      this._inNavbar = this._detectNavbar();\n    } // Getters\n\n\n    static get Default() {\n      return Default$8;\n    }\n\n    static get DefaultType() {\n      return DefaultType$8;\n    }\n\n    static get NAME() {\n      return NAME$9;\n    } // Public\n\n\n    toggle() {\n      return this._isShown() ? this.hide() : this.show();\n    }\n\n    show() {\n      if (isDisabled(this._element) || this._isShown(this._menu)) {\n        return;\n      }\n\n      const relatedTarget = {\n        relatedTarget: this._element\n      };\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar\n\n      if (this._inNavbar) {\n        Manipulator.setDataAttribute(this._menu, 'popper', 'none');\n      } else {\n        this._createPopper(parent);\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {\n        [].concat(...document.body.children).forEach(elem => EventHandler.on(elem, 'mouseover', noop));\n      }\n\n      this._element.focus();\n\n      this._element.setAttribute('aria-expanded', true);\n\n      this._menu.classList.add(CLASS_NAME_SHOW$6);\n\n      this._element.classList.add(CLASS_NAME_SHOW$6);\n\n      EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);\n    }\n\n    hide() {\n      if (isDisabled(this._element) || !this._isShown(this._menu)) {\n        return;\n      }\n\n      const relatedTarget = {\n        relatedTarget: this._element\n      };\n\n      this._completeHide(relatedTarget);\n    }\n\n    dispose() {\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      super.dispose();\n    }\n\n    update() {\n      this._inNavbar = this._detectNavbar();\n\n      if (this._popper) {\n        this._popper.update();\n      }\n    } // Private\n\n\n    _completeHide(relatedTarget) {\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      } // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n\n      if ('ontouchstart' in document.documentElement) {\n        [].concat(...document.body.children).forEach(elem => EventHandler.off(elem, 'mouseover', noop));\n      }\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      this._menu.classList.remove(CLASS_NAME_SHOW$6);\n\n      this._element.classList.remove(CLASS_NAME_SHOW$6);\n\n      this._element.setAttribute('aria-expanded', 'false');\n\n      Manipulator.removeDataAttribute(this._menu, 'popper');\n      EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);\n    }\n\n    _getConfig(config) {\n      config = { ...this.constructor.Default,\n        ...Manipulator.getDataAttributes(this._element),\n        ...config\n      };\n      typeCheckConfig(NAME$9, config, this.constructor.DefaultType);\n\n      if (typeof config.reference === 'object' && !isElement$1(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n        // Popper virtual elements require a getBoundingClientRect method\n        throw new TypeError(`${NAME$9.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n      }\n\n      return config;\n    }\n\n    _createPopper(parent) {\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n      }\n\n      let referenceElement = this._element;\n\n      if (this._config.reference === 'parent') {\n        referenceElement = parent;\n      } else if (isElement$1(this._config.reference)) {\n        referenceElement = getElement(this._config.reference);\n      } else if (typeof this._config.reference === 'object') {\n        referenceElement = this._config.reference;\n      }\n\n      const popperConfig = this._getPopperConfig();\n\n      const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);\n      this._popper = createPopper(referenceElement, this._menu, popperConfig);\n\n      if (isDisplayStatic) {\n        Manipulator.setDataAttribute(this._menu, 'popper', 'static');\n      }\n    }\n\n    _isShown(element = this._element) {\n      return element.classList.contains(CLASS_NAME_SHOW$6);\n    }\n\n    _getMenuElement() {\n      return SelectorEngine.next(this._element, SELECTOR_MENU)[0];\n    }\n\n    _getPlacement() {\n      const parentDropdown = this._element.parentNode;\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n        return PLACEMENT_RIGHT;\n      }\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n        return PLACEMENT_LEFT;\n      } // We need to trim the value because custom properties can also include spaces\n\n\n      const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n      }\n\n      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n    }\n\n    _detectNavbar() {\n      return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;\n    }\n\n    _getOffset() {\n      const {\n        offset\n      } = this._config;\n\n      if (typeof offset === 'string') {\n        return offset.split(',').map(val => Number.parseInt(val, 10));\n      }\n\n      if (typeof offset === 'function') {\n        return popperData => offset(popperData, this._element);\n      }\n\n      return offset;\n    }\n\n    _getPopperConfig() {\n      const defaultBsPopperConfig = {\n        placement: this._getPlacement(),\n        modifiers: [{\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        }, {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        }]\n      }; // Disable Popper if we have a static display\n\n      if (this._config.display === 'static') {\n        defaultBsPopperConfig.modifiers = [{\n          name: 'applyStyles',\n          enabled: false\n        }];\n      }\n\n      return { ...defaultBsPopperConfig,\n        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n      };\n    }\n\n    _selectMenuItem({\n      key,\n      target\n    }) {\n      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);\n\n      if (!items.length) {\n        return;\n      } // if target isn't included in items (e.g. when expanding the dropdown)\n      // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n\n      getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Dropdown.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      });\n    }\n\n    static clearMenus(event) {\n      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {\n        return;\n      }\n\n      const toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);\n\n      for (let i = 0, len = toggles.length; i < len; i++) {\n        const context = Dropdown.getInstance(toggles[i]);\n\n        if (!context || context._config.autoClose === false) {\n          continue;\n        }\n\n        if (!context._isShown()) {\n          continue;\n        }\n\n        const relatedTarget = {\n          relatedTarget: context._element\n        };\n\n        if (event) {\n          const composedPath = event.composedPath();\n          const isMenuTarget = composedPath.includes(context._menu);\n\n          if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n            continue;\n          } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n\n          if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n            continue;\n          }\n\n          if (event.type === 'click') {\n            relatedTarget.clickEvent = event;\n          }\n        }\n\n        context._completeHide(relatedTarget);\n      }\n    }\n\n    static getParentFromElement(element) {\n      return getElementFromSelector(element) || element.parentNode;\n    }\n\n    static dataApiKeydownHandler(event) {\n      // If not input/textarea:\n      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n      // If input/textarea:\n      //  - If space key => not a dropdown command\n      //  - If key is other than escape\n      //    - If key is not up or down => not a dropdown command\n      //    - If trigger inside the menu => not a dropdown command\n      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {\n        return;\n      }\n\n      const isActive = this.classList.contains(CLASS_NAME_SHOW$6);\n\n      if (!isActive && event.key === ESCAPE_KEY$2) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isDisabled(this)) {\n        return;\n      }\n\n      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];\n      const instance = Dropdown.getOrCreateInstance(getToggleButton);\n\n      if (event.key === ESCAPE_KEY$2) {\n        instance.hide();\n        return;\n      }\n\n      if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {\n        if (!isActive) {\n          instance.show();\n        }\n\n        instance._selectMenuItem(event);\n\n        return;\n      }\n\n      if (!isActive || event.key === SPACE_KEY) {\n        Dropdown.clearMenus();\n      }\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n    event.preventDefault();\n    Dropdown.getOrCreateInstance(this).toggle();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Dropdown to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Dropdown);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  const SELECTOR_STICKY_CONTENT = '.sticky-top';\n\n  class ScrollBarHelper {\n    constructor() {\n      this._element = document.body;\n    }\n\n    getWidth() {\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n      const documentWidth = document.documentElement.clientWidth;\n      return Math.abs(window.innerWidth - documentWidth);\n    }\n\n    hide() {\n      const width = this.getWidth();\n\n      this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n      this._setElementAttributes(this._element, 'paddingRight', calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n      this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', calculatedValue => calculatedValue + width);\n\n      this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', calculatedValue => calculatedValue - width);\n    }\n\n    _disableOverFlow() {\n      this._saveInitialAttribute(this._element, 'overflow');\n\n      this._element.style.overflow = 'hidden';\n    }\n\n    _setElementAttributes(selector, styleProp, callback) {\n      const scrollbarWidth = this.getWidth();\n\n      const manipulationCallBack = element => {\n        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n          return;\n        }\n\n        this._saveInitialAttribute(element, styleProp);\n\n        const calculatedValue = window.getComputedStyle(element)[styleProp];\n        element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;\n      };\n\n      this._applyManipulationCallback(selector, manipulationCallBack);\n    }\n\n    reset() {\n      this._resetElementAttributes(this._element, 'overflow');\n\n      this._resetElementAttributes(this._element, 'paddingRight');\n\n      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');\n\n      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');\n    }\n\n    _saveInitialAttribute(element, styleProp) {\n      const actualValue = element.style[styleProp];\n\n      if (actualValue) {\n        Manipulator.setDataAttribute(element, styleProp, actualValue);\n      }\n    }\n\n    _resetElementAttributes(selector, styleProp) {\n      const manipulationCallBack = element => {\n        const value = Manipulator.getDataAttribute(element, styleProp);\n\n        if (typeof value === 'undefined') {\n          element.style.removeProperty(styleProp);\n        } else {\n          Manipulator.removeDataAttribute(element, styleProp);\n          element.style[styleProp] = value;\n        }\n      };\n\n      this._applyManipulationCallback(selector, manipulationCallBack);\n    }\n\n    _applyManipulationCallback(selector, callBack) {\n      if (isElement$1(selector)) {\n        callBack(selector);\n      } else {\n        SelectorEngine.find(selector, this._element).forEach(callBack);\n      }\n    }\n\n    isOverflowing() {\n      return this.getWidth() > 0;\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/backdrop.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const Default$7 = {\n    className: 'modal-backdrop',\n    isVisible: true,\n    // if false, we use the backdrop helper without adding any element to the dom\n    isAnimated: false,\n    rootElement: 'body',\n    // give the choice to place backdrop under different elements\n    clickCallback: null\n  };\n  const DefaultType$7 = {\n    className: 'string',\n    isVisible: 'boolean',\n    isAnimated: 'boolean',\n    rootElement: '(element|string)',\n    clickCallback: '(function|null)'\n  };\n  const NAME$8 = 'backdrop';\n  const CLASS_NAME_FADE$4 = 'fade';\n  const CLASS_NAME_SHOW$5 = 'show';\n  const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$8}`;\n\n  class Backdrop {\n    constructor(config) {\n      this._config = this._getConfig(config);\n      this._isAppended = false;\n      this._element = null;\n    }\n\n    show(callback) {\n      if (!this._config.isVisible) {\n        execute(callback);\n        return;\n      }\n\n      this._append();\n\n      if (this._config.isAnimated) {\n        reflow(this._getElement());\n      }\n\n      this._getElement().classList.add(CLASS_NAME_SHOW$5);\n\n      this._emulateAnimation(() => {\n        execute(callback);\n      });\n    }\n\n    hide(callback) {\n      if (!this._config.isVisible) {\n        execute(callback);\n        return;\n      }\n\n      this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n\n      this._emulateAnimation(() => {\n        this.dispose();\n        execute(callback);\n      });\n    } // Private\n\n\n    _getElement() {\n      if (!this._element) {\n        const backdrop = document.createElement('div');\n        backdrop.className = this._config.className;\n\n        if (this._config.isAnimated) {\n          backdrop.classList.add(CLASS_NAME_FADE$4);\n        }\n\n        this._element = backdrop;\n      }\n\n      return this._element;\n    }\n\n    _getConfig(config) {\n      config = { ...Default$7,\n        ...(typeof config === 'object' ? config : {})\n      }; // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n\n      config.rootElement = getElement(config.rootElement);\n      typeCheckConfig(NAME$8, config, DefaultType$7);\n      return config;\n    }\n\n    _append() {\n      if (this._isAppended) {\n        return;\n      }\n\n      this._config.rootElement.append(this._getElement());\n\n      EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, () => {\n        execute(this._config.clickCallback);\n      });\n      this._isAppended = true;\n    }\n\n    dispose() {\n      if (!this._isAppended) {\n        return;\n      }\n\n      EventHandler.off(this._element, EVENT_MOUSEDOWN);\n\n      this._element.remove();\n\n      this._isAppended = false;\n    }\n\n    _emulateAnimation(callback) {\n      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const Default$6 = {\n    trapElement: null,\n    // The element to trap focus inside of\n    autofocus: true\n  };\n  const DefaultType$6 = {\n    trapElement: 'element',\n    autofocus: 'boolean'\n  };\n  const NAME$7 = 'focustrap';\n  const DATA_KEY$7 = 'bs.focustrap';\n  const EVENT_KEY$7 = `.${DATA_KEY$7}`;\n  const EVENT_FOCUSIN$1 = `focusin${EVENT_KEY$7}`;\n  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$7}`;\n  const TAB_KEY = 'Tab';\n  const TAB_NAV_FORWARD = 'forward';\n  const TAB_NAV_BACKWARD = 'backward';\n\n  class FocusTrap {\n    constructor(config) {\n      this._config = this._getConfig(config);\n      this._isActive = false;\n      this._lastTabNavDirection = null;\n    }\n\n    activate() {\n      const {\n        trapElement,\n        autofocus\n      } = this._config;\n\n      if (this._isActive) {\n        return;\n      }\n\n      if (autofocus) {\n        trapElement.focus();\n      }\n\n      EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop\n\n      EventHandler.on(document, EVENT_FOCUSIN$1, event => this._handleFocusin(event));\n      EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n      this._isActive = true;\n    }\n\n    deactivate() {\n      if (!this._isActive) {\n        return;\n      }\n\n      this._isActive = false;\n      EventHandler.off(document, EVENT_KEY$7);\n    } // Private\n\n\n    _handleFocusin(event) {\n      const {\n        target\n      } = event;\n      const {\n        trapElement\n      } = this._config;\n\n      if (target === document || target === trapElement || trapElement.contains(target)) {\n        return;\n      }\n\n      const elements = SelectorEngine.focusableChildren(trapElement);\n\n      if (elements.length === 0) {\n        trapElement.focus();\n      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n        elements[elements.length - 1].focus();\n      } else {\n        elements[0].focus();\n      }\n    }\n\n    _handleKeydown(event) {\n      if (event.key !== TAB_KEY) {\n        return;\n      }\n\n      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n    }\n\n    _getConfig(config) {\n      config = { ...Default$6,\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$7, config, DefaultType$6);\n      return config;\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): modal.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$6 = 'modal';\n  const DATA_KEY$6 = 'bs.modal';\n  const EVENT_KEY$6 = `.${DATA_KEY$6}`;\n  const DATA_API_KEY$3 = '.data-api';\n  const ESCAPE_KEY$1 = 'Escape';\n  const Default$5 = {\n    backdrop: true,\n    keyboard: true,\n    focus: true\n  };\n  const DefaultType$5 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean'\n  };\n  const EVENT_HIDE$3 = `hide${EVENT_KEY$6}`;\n  const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$6}`;\n  const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$6}`;\n  const EVENT_SHOW$3 = `show${EVENT_KEY$6}`;\n  const EVENT_SHOWN$3 = `shown${EVENT_KEY$6}`;\n  const EVENT_RESIZE = `resize${EVENT_KEY$6}`;\n  const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$6}`;\n  const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$6}`;\n  const EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY$6}`;\n  const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$6}`;\n  const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;\n  const CLASS_NAME_OPEN = 'modal-open';\n  const CLASS_NAME_FADE$3 = 'fade';\n  const CLASS_NAME_SHOW$4 = 'show';\n  const CLASS_NAME_STATIC = 'modal-static';\n  const OPEN_SELECTOR$1 = '.modal.show';\n  const SELECTOR_DIALOG = '.modal-dialog';\n  const SELECTOR_MODAL_BODY = '.modal-body';\n  const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Modal extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._config = this._getConfig(config);\n      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);\n      this._backdrop = this._initializeBackDrop();\n      this._focustrap = this._initializeFocusTrap();\n      this._isShown = false;\n      this._ignoreBackdropClick = false;\n      this._isTransitioning = false;\n      this._scrollBar = new ScrollBarHelper();\n    } // Getters\n\n\n    static get Default() {\n      return Default$5;\n    }\n\n    static get NAME() {\n      return NAME$6;\n    } // Public\n\n\n    toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    }\n\n    show(relatedTarget) {\n      if (this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n        relatedTarget\n      });\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = true;\n\n      if (this._isAnimated()) {\n        this._isTransitioning = true;\n      }\n\n      this._scrollBar.hide();\n\n      document.body.classList.add(CLASS_NAME_OPEN);\n\n      this._adjustDialog();\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {\n        EventHandler.one(this._element, EVENT_MOUSEUP_DISMISS, event => {\n          if (event.target === this._element) {\n            this._ignoreBackdropClick = true;\n          }\n        });\n      });\n\n      this._showBackdrop(() => this._showElement(relatedTarget));\n    }\n\n    hide() {\n      if (!this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = false;\n\n      const isAnimated = this._isAnimated();\n\n      if (isAnimated) {\n        this._isTransitioning = true;\n      }\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      this._focustrap.deactivate();\n\n      this._element.classList.remove(CLASS_NAME_SHOW$4);\n\n      EventHandler.off(this._element, EVENT_CLICK_DISMISS);\n      EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);\n\n      this._queueCallback(() => this._hideModal(), this._element, isAnimated);\n    }\n\n    dispose() {\n      [window, this._dialog].forEach(htmlElement => EventHandler.off(htmlElement, EVENT_KEY$6));\n\n      this._backdrop.dispose();\n\n      this._focustrap.deactivate();\n\n      super.dispose();\n    }\n\n    handleUpdate() {\n      this._adjustDialog();\n    } // Private\n\n\n    _initializeBackDrop() {\n      return new Backdrop({\n        isVisible: Boolean(this._config.backdrop),\n        // 'static' option will be translated to true, and booleans will keep their value\n        isAnimated: this._isAnimated()\n      });\n    }\n\n    _initializeFocusTrap() {\n      return new FocusTrap({\n        trapElement: this._element\n      });\n    }\n\n    _getConfig(config) {\n      config = { ...Default$5,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$6, config, DefaultType$5);\n      return config;\n    }\n\n    _showElement(relatedTarget) {\n      const isAnimated = this._isAnimated();\n\n      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n        // Don't move modal's DOM position\n        document.body.append(this._element);\n      }\n\n      this._element.style.display = 'block';\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      this._element.scrollTop = 0;\n\n      if (modalBody) {\n        modalBody.scrollTop = 0;\n      }\n\n      if (isAnimated) {\n        reflow(this._element);\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW$4);\n\n      const transitionComplete = () => {\n        if (this._config.focus) {\n          this._focustrap.activate();\n        }\n\n        this._isTransitioning = false;\n        EventHandler.trigger(this._element, EVENT_SHOWN$3, {\n          relatedTarget\n        });\n      };\n\n      this._queueCallback(transitionComplete, this._dialog, isAnimated);\n    }\n\n    _setEscapeEvent() {\n      if (this._isShown) {\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {\n          if (this._config.keyboard && event.key === ESCAPE_KEY$1) {\n            event.preventDefault();\n            this.hide();\n          } else if (!this._config.keyboard && event.key === ESCAPE_KEY$1) {\n            this._triggerBackdropTransition();\n          }\n        });\n      } else {\n        EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);\n      }\n    }\n\n    _setResizeEvent() {\n      if (this._isShown) {\n        EventHandler.on(window, EVENT_RESIZE, () => this._adjustDialog());\n      } else {\n        EventHandler.off(window, EVENT_RESIZE);\n      }\n    }\n\n    _hideModal() {\n      this._element.style.display = 'none';\n\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._isTransitioning = false;\n\n      this._backdrop.hide(() => {\n        document.body.classList.remove(CLASS_NAME_OPEN);\n\n        this._resetAdjustments();\n\n        this._scrollBar.reset();\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN$3);\n      });\n    }\n\n    _showBackdrop(callback) {\n      EventHandler.on(this._element, EVENT_CLICK_DISMISS, event => {\n        if (this._ignoreBackdropClick) {\n          this._ignoreBackdropClick = false;\n          return;\n        }\n\n        if (event.target !== event.currentTarget) {\n          return;\n        }\n\n        if (this._config.backdrop === true) {\n          this.hide();\n        } else if (this._config.backdrop === 'static') {\n          this._triggerBackdropTransition();\n        }\n      });\n\n      this._backdrop.show(callback);\n    }\n\n    _isAnimated() {\n      return this._element.classList.contains(CLASS_NAME_FADE$3);\n    }\n\n    _triggerBackdropTransition() {\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      const {\n        classList,\n        scrollHeight,\n        style\n      } = this._element;\n      const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed\n\n      if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {\n        return;\n      }\n\n      if (!isModalOverflowing) {\n        style.overflowY = 'hidden';\n      }\n\n      classList.add(CLASS_NAME_STATIC);\n\n      this._queueCallback(() => {\n        classList.remove(CLASS_NAME_STATIC);\n\n        if (!isModalOverflowing) {\n          this._queueCallback(() => {\n            style.overflowY = '';\n          }, this._dialog);\n        }\n      }, this._dialog);\n\n      this._element.focus();\n    } // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n\n\n    _adjustDialog() {\n      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      const scrollbarWidth = this._scrollBar.getWidth();\n\n      const isBodyOverflowing = scrollbarWidth > 0;\n\n      if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {\n        this._element.style.paddingLeft = `${scrollbarWidth}px`;\n      }\n\n      if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {\n        this._element.style.paddingRight = `${scrollbarWidth}px`;\n      }\n    }\n\n    _resetAdjustments() {\n      this._element.style.paddingLeft = '';\n      this._element.style.paddingRight = '';\n    } // Static\n\n\n    static jQueryInterface(config, relatedTarget) {\n      return this.each(function () {\n        const data = Modal.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](relatedTarget);\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n    const target = getElementFromSelector(this);\n\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    EventHandler.one(target, EVENT_SHOW$3, showEvent => {\n      if (showEvent.defaultPrevented) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      EventHandler.one(target, EVENT_HIDDEN$3, () => {\n        if (isVisible(this)) {\n          this.focus();\n        }\n      });\n    }); // avoid conflict when clicking moddal toggler while another one is open\n\n    const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n\n    if (allReadyOpen) {\n      Modal.getInstance(allReadyOpen).hide();\n    }\n\n    const data = Modal.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  enableDismissTrigger(Modal);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Modal to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Modal);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): offcanvas.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$5 = 'offcanvas';\n  const DATA_KEY$5 = 'bs.offcanvas';\n  const EVENT_KEY$5 = `.${DATA_KEY$5}`;\n  const DATA_API_KEY$2 = '.data-api';\n  const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$5}${DATA_API_KEY$2}`;\n  const ESCAPE_KEY = 'Escape';\n  const Default$4 = {\n    backdrop: true,\n    keyboard: true,\n    scroll: false\n  };\n  const DefaultType$4 = {\n    backdrop: 'boolean',\n    keyboard: 'boolean',\n    scroll: 'boolean'\n  };\n  const CLASS_NAME_SHOW$3 = 'show';\n  const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\n  const OPEN_SELECTOR = '.offcanvas.show';\n  const EVENT_SHOW$2 = `show${EVENT_KEY$5}`;\n  const EVENT_SHOWN$2 = `shown${EVENT_KEY$5}`;\n  const EVENT_HIDE$2 = `hide${EVENT_KEY$5}`;\n  const EVENT_HIDDEN$2 = `hidden${EVENT_KEY$5}`;\n  const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$5}${DATA_API_KEY$2}`;\n  const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$5}`;\n  const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Offcanvas extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._config = this._getConfig(config);\n      this._isShown = false;\n      this._backdrop = this._initializeBackDrop();\n      this._focustrap = this._initializeFocusTrap();\n\n      this._addEventListeners();\n    } // Getters\n\n\n    static get NAME() {\n      return NAME$5;\n    }\n\n    static get Default() {\n      return Default$4;\n    } // Public\n\n\n    toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    }\n\n    show(relatedTarget) {\n      if (this._isShown) {\n        return;\n      }\n\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {\n        relatedTarget\n      });\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = true;\n      this._element.style.visibility = 'visible';\n\n      this._backdrop.show();\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().hide();\n      }\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      this._element.classList.add(CLASS_NAME_SHOW$3);\n\n      const completeCallBack = () => {\n        if (!this._config.scroll) {\n          this._focustrap.activate();\n        }\n\n        EventHandler.trigger(this._element, EVENT_SHOWN$2, {\n          relatedTarget\n        });\n      };\n\n      this._queueCallback(completeCallBack, this._element, true);\n    }\n\n    hide() {\n      if (!this._isShown) {\n        return;\n      }\n\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._focustrap.deactivate();\n\n      this._element.blur();\n\n      this._isShown = false;\n\n      this._element.classList.remove(CLASS_NAME_SHOW$3);\n\n      this._backdrop.hide();\n\n      const completeCallback = () => {\n        this._element.setAttribute('aria-hidden', true);\n\n        this._element.removeAttribute('aria-modal');\n\n        this._element.removeAttribute('role');\n\n        this._element.style.visibility = 'hidden';\n\n        if (!this._config.scroll) {\n          new ScrollBarHelper().reset();\n        }\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN$2);\n      };\n\n      this._queueCallback(completeCallback, this._element, true);\n    }\n\n    dispose() {\n      this._backdrop.dispose();\n\n      this._focustrap.deactivate();\n\n      super.dispose();\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$4,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$5, config, DefaultType$4);\n      return config;\n    }\n\n    _initializeBackDrop() {\n      return new Backdrop({\n        className: CLASS_NAME_BACKDROP,\n        isVisible: this._config.backdrop,\n        isAnimated: true,\n        rootElement: this._element.parentNode,\n        clickCallback: () => this.hide()\n      });\n    }\n\n    _initializeFocusTrap() {\n      return new FocusTrap({\n        trapElement: this._element\n      });\n    }\n\n    _addEventListeners() {\n      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n        if (this._config.keyboard && event.key === ESCAPE_KEY) {\n          this.hide();\n        }\n      });\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Offcanvas.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n    const target = getElementFromSelector(this);\n\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN$2, () => {\n      // focus on trigger when it is closed\n      if (isVisible(this)) {\n        this.focus();\n      }\n    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n    const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n\n    if (allReadyOpen && allReadyOpen !== target) {\n      Offcanvas.getInstance(allReadyOpen).hide();\n    }\n\n    const data = Offcanvas.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => SelectorEngine.find(OPEN_SELECTOR).forEach(el => Offcanvas.getOrCreateInstance(el).show()));\n  enableDismissTrigger(Offcanvas);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  defineJQueryPlugin(Offcanvas);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\n  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  const DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  const allowedAttribute = (attribute, allowedAttributeList) => {\n    const attributeName = attribute.nodeName.toLowerCase();\n\n    if (allowedAttributeList.includes(attributeName)) {\n      if (uriAttributes.has(attributeName)) {\n        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n      }\n\n      return true;\n    }\n\n    const regExp = allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp); // Check if a regular expression validates the attribute.\n\n    for (let i = 0, len = regExp.length; i < len; i++) {\n      if (regExp[i].test(attributeName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const DefaultAllowlist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n  function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml);\n    }\n\n    const domParser = new window.DOMParser();\n    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));\n\n    for (let i = 0, len = elements.length; i < len; i++) {\n      const element = elements[i];\n      const elementName = element.nodeName.toLowerCase();\n\n      if (!Object.keys(allowList).includes(elementName)) {\n        element.remove();\n        continue;\n      }\n\n      const attributeList = [].concat(...element.attributes);\n      const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n      attributeList.forEach(attribute => {\n        if (!allowedAttribute(attribute, allowedAttributes)) {\n          element.removeAttribute(attribute.nodeName);\n        }\n      });\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): tooltip.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$4 = 'tooltip';\n  const DATA_KEY$4 = 'bs.tooltip';\n  const EVENT_KEY$4 = `.${DATA_KEY$4}`;\n  const CLASS_PREFIX$1 = 'bs-tooltip';\n  const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\n  const DefaultType$3 = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(array|string|function)',\n    container: '(string|element|boolean)',\n    fallbackPlacements: 'array',\n    boundary: '(string|element)',\n    customClass: '(string|function)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    allowList: 'object',\n    popperConfig: '(null|object|function)'\n  };\n  const AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: isRTL() ? 'left' : 'right',\n    BOTTOM: 'bottom',\n    LEFT: isRTL() ? 'right' : 'left'\n  };\n  const Default$3 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: [0, 0],\n    container: false,\n    fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n    boundary: 'clippingParents',\n    customClass: '',\n    sanitize: true,\n    sanitizeFn: null,\n    allowList: DefaultAllowlist,\n    popperConfig: null\n  };\n  const Event$2 = {\n    HIDE: `hide${EVENT_KEY$4}`,\n    HIDDEN: `hidden${EVENT_KEY$4}`,\n    SHOW: `show${EVENT_KEY$4}`,\n    SHOWN: `shown${EVENT_KEY$4}`,\n    INSERTED: `inserted${EVENT_KEY$4}`,\n    CLICK: `click${EVENT_KEY$4}`,\n    FOCUSIN: `focusin${EVENT_KEY$4}`,\n    FOCUSOUT: `focusout${EVENT_KEY$4}`,\n    MOUSEENTER: `mouseenter${EVENT_KEY$4}`,\n    MOUSELEAVE: `mouseleave${EVENT_KEY$4}`\n  };\n  const CLASS_NAME_FADE$2 = 'fade';\n  const CLASS_NAME_MODAL = 'modal';\n  const CLASS_NAME_SHOW$2 = 'show';\n  const HOVER_STATE_SHOW = 'show';\n  const HOVER_STATE_OUT = 'out';\n  const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;\n  const EVENT_MODAL_HIDE = 'hide.bs.modal';\n  const TRIGGER_HOVER = 'hover';\n  const TRIGGER_FOCUS = 'focus';\n  const TRIGGER_CLICK = 'click';\n  const TRIGGER_MANUAL = 'manual';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Tooltip extends BaseComponent {\n    constructor(element, config) {\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n      }\n\n      super(element); // private\n\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._popper = null; // Protected\n\n      this._config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n    } // Getters\n\n\n    static get Default() {\n      return Default$3;\n    }\n\n    static get NAME() {\n      return NAME$4;\n    }\n\n    static get Event() {\n      return Event$2;\n    }\n\n    static get DefaultType() {\n      return DefaultType$3;\n    } // Public\n\n\n    enable() {\n      this._isEnabled = true;\n    }\n\n    disable() {\n      this._isEnabled = false;\n    }\n\n    toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    }\n\n    toggle(event) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (event) {\n        const context = this._initializeOnDelegatedTarget(event);\n\n        context._activeTrigger.click = !context._activeTrigger.click;\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context);\n        } else {\n          context._leave(null, context);\n        }\n      } else {\n        if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {\n          this._leave(null, this);\n\n          return;\n        }\n\n        this._enter(null, this);\n      }\n    }\n\n    dispose() {\n      clearTimeout(this._timeout);\n      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n      if (this.tip) {\n        this.tip.remove();\n      }\n\n      this._disposePopper();\n\n      super.dispose();\n    }\n\n    show() {\n      if (this._element.style.display === 'none') {\n        throw new Error('Please use show on visible elements');\n      }\n\n      if (!(this.isWithContent() && this._isEnabled)) {\n        return;\n      }\n\n      const showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);\n      const shadowRoot = findShadowRoot(this._element);\n      const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);\n\n      if (showEvent.defaultPrevented || !isInTheDom) {\n        return;\n      } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`\n      // This will be removed later in favor of a `setContent` method\n\n\n      if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {\n        this._disposePopper();\n\n        this.tip.remove();\n        this.tip = null;\n      }\n\n      const tip = this.getTipElement();\n      const tipId = getUID(this.constructor.NAME);\n      tip.setAttribute('id', tipId);\n\n      this._element.setAttribute('aria-describedby', tipId);\n\n      if (this._config.animation) {\n        tip.classList.add(CLASS_NAME_FADE$2);\n      }\n\n      const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n\n      const attachment = this._getAttachment(placement);\n\n      this._addAttachmentClass(attachment);\n\n      const {\n        container\n      } = this._config;\n      Data.set(tip, this.constructor.DATA_KEY, this);\n\n      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n        container.append(tip);\n        EventHandler.trigger(this._element, this.constructor.Event.INSERTED);\n      }\n\n      if (this._popper) {\n        this._popper.update();\n      } else {\n        this._popper = createPopper(this._element, tip, this._getPopperConfig(attachment));\n      }\n\n      tip.classList.add(CLASS_NAME_SHOW$2);\n\n      const customClass = this._resolvePossibleFunction(this._config.customClass);\n\n      if (customClass) {\n        tip.classList.add(...customClass.split(' '));\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement) {\n        [].concat(...document.body.children).forEach(element => {\n          EventHandler.on(element, 'mouseover', noop);\n        });\n      }\n\n      const complete = () => {\n        const prevHoverState = this._hoverState;\n        this._hoverState = null;\n        EventHandler.trigger(this._element, this.constructor.Event.SHOWN);\n\n        if (prevHoverState === HOVER_STATE_OUT) {\n          this._leave(null, this);\n        }\n      };\n\n      const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n      this._queueCallback(complete, this.tip, isAnimated);\n    }\n\n    hide() {\n      if (!this._popper) {\n        return;\n      }\n\n      const tip = this.getTipElement();\n\n      const complete = () => {\n        if (this._isWithActiveTrigger()) {\n          return;\n        }\n\n        if (this._hoverState !== HOVER_STATE_SHOW) {\n          tip.remove();\n        }\n\n        this._cleanTipClass();\n\n        this._element.removeAttribute('aria-describedby');\n\n        EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);\n\n        this._disposePopper();\n      };\n\n      const hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n      if ('ontouchstart' in document.documentElement) {\n        [].concat(...document.body.children).forEach(element => EventHandler.off(element, 'mouseover', noop));\n      }\n\n      this._activeTrigger[TRIGGER_CLICK] = false;\n      this._activeTrigger[TRIGGER_FOCUS] = false;\n      this._activeTrigger[TRIGGER_HOVER] = false;\n      const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n      this._queueCallback(complete, this.tip, isAnimated);\n\n      this._hoverState = '';\n    }\n\n    update() {\n      if (this._popper !== null) {\n        this._popper.update();\n      }\n    } // Protected\n\n\n    isWithContent() {\n      return Boolean(this.getTitle());\n    }\n\n    getTipElement() {\n      if (this.tip) {\n        return this.tip;\n      }\n\n      const element = document.createElement('div');\n      element.innerHTML = this._config.template;\n      const tip = element.children[0];\n      this.setContent(tip);\n      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n      this.tip = tip;\n      return this.tip;\n    }\n\n    setContent(tip) {\n      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);\n    }\n\n    _sanitizeAndSetContent(template, content, selector) {\n      const templateElement = SelectorEngine.findOne(selector, template);\n\n      if (!content && templateElement) {\n        templateElement.remove();\n        return;\n      } // we use append for html objects to maintain js events\n\n\n      this.setElementContent(templateElement, content);\n    }\n\n    setElementContent(element, content) {\n      if (element === null) {\n        return;\n      }\n\n      if (isElement$1(content)) {\n        content = getElement(content); // content is a DOM node or a jQuery\n\n        if (this._config.html) {\n          if (content.parentNode !== element) {\n            element.innerHTML = '';\n            element.append(content);\n          }\n        } else {\n          element.textContent = content.textContent;\n        }\n\n        return;\n      }\n\n      if (this._config.html) {\n        if (this._config.sanitize) {\n          content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);\n        }\n\n        element.innerHTML = content;\n      } else {\n        element.textContent = content;\n      }\n    }\n\n    getTitle() {\n      const title = this._element.getAttribute('data-bs-original-title') || this._config.title;\n\n      return this._resolvePossibleFunction(title);\n    }\n\n    updateAttachment(attachment) {\n      if (attachment === 'right') {\n        return 'end';\n      }\n\n      if (attachment === 'left') {\n        return 'start';\n      }\n\n      return attachment;\n    } // Private\n\n\n    _initializeOnDelegatedTarget(event, context) {\n      return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n    }\n\n    _getOffset() {\n      const {\n        offset\n      } = this._config;\n\n      if (typeof offset === 'string') {\n        return offset.split(',').map(val => Number.parseInt(val, 10));\n      }\n\n      if (typeof offset === 'function') {\n        return popperData => offset(popperData, this._element);\n      }\n\n      return offset;\n    }\n\n    _resolvePossibleFunction(content) {\n      return typeof content === 'function' ? content.call(this._element) : content;\n    }\n\n    _getPopperConfig(attachment) {\n      const defaultBsPopperConfig = {\n        placement: attachment,\n        modifiers: [{\n          name: 'flip',\n          options: {\n            fallbackPlacements: this._config.fallbackPlacements\n          }\n        }, {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        }, {\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        }, {\n          name: 'arrow',\n          options: {\n            element: `.${this.constructor.NAME}-arrow`\n          }\n        }, {\n          name: 'onChange',\n          enabled: true,\n          phase: 'afterWrite',\n          fn: data => this._handlePopperPlacementChange(data)\n        }],\n        onFirstUpdate: data => {\n          if (data.options.placement !== data.placement) {\n            this._handlePopperPlacementChange(data);\n          }\n        }\n      };\n      return { ...defaultBsPopperConfig,\n        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n      };\n    }\n\n    _addAttachmentClass(attachment) {\n      this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);\n    }\n\n    _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    }\n\n    _setListeners() {\n      const triggers = this._config.trigger.split(' ');\n\n      triggers.forEach(trigger => {\n        if (trigger === 'click') {\n          EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, event => this.toggle(event));\n        } else if (trigger !== TRIGGER_MANUAL) {\n          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;\n          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n          EventHandler.on(this._element, eventIn, this._config.selector, event => this._enter(event));\n          EventHandler.on(this._element, eventOut, this._config.selector, event => this._leave(event));\n        }\n      });\n\n      this._hideModalHandler = () => {\n        if (this._element) {\n          this.hide();\n        }\n      };\n\n      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n      if (this._config.selector) {\n        this._config = { ...this._config,\n          trigger: 'manual',\n          selector: ''\n        };\n      } else {\n        this._fixTitle();\n      }\n    }\n\n    _fixTitle() {\n      const title = this._element.getAttribute('title');\n\n      const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');\n\n      if (title || originalTitleType !== 'string') {\n        this._element.setAttribute('data-bs-original-title', title || '');\n\n        if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {\n          this._element.setAttribute('aria-label', title);\n        }\n\n        this._element.setAttribute('title', '');\n      }\n    }\n\n    _enter(event, context) {\n      context = this._initializeOnDelegatedTarget(event, context);\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n      }\n\n      if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {\n        context._hoverState = HOVER_STATE_SHOW;\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_SHOW;\n\n      if (!context._config.delay || !context._config.delay.show) {\n        context.show();\n        return;\n      }\n\n      context._timeout = setTimeout(() => {\n        if (context._hoverState === HOVER_STATE_SHOW) {\n          context.show();\n        }\n      }, context._config.delay.show);\n    }\n\n    _leave(event, context) {\n      context = this._initializeOnDelegatedTarget(event, context);\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_OUT;\n\n      if (!context._config.delay || !context._config.delay.hide) {\n        context.hide();\n        return;\n      }\n\n      context._timeout = setTimeout(() => {\n        if (context._hoverState === HOVER_STATE_OUT) {\n          context.hide();\n        }\n      }, context._config.delay.hide);\n    }\n\n    _isWithActiveTrigger() {\n      for (const trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    _getConfig(config) {\n      const dataAttributes = Manipulator.getDataAttributes(this._element);\n      Object.keys(dataAttributes).forEach(dataAttr => {\n        if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {\n          delete dataAttributes[dataAttr];\n        }\n      });\n      config = { ...this.constructor.Default,\n        ...dataAttributes,\n        ...(typeof config === 'object' && config ? config : {})\n      };\n      config.container = config.container === false ? document.body : getElement(config.container);\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString();\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString();\n      }\n\n      typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n\n      if (config.sanitize) {\n        config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);\n      }\n\n      return config;\n    }\n\n    _getDelegateConfig() {\n      const config = {};\n\n      for (const key in this._config) {\n        if (this.constructor.Default[key] !== this._config[key]) {\n          config[key] = this._config[key];\n        }\n      } // In the future can be replaced with:\n      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n      // `Object.fromEntries(keysWithDifferentValues)`\n\n\n      return config;\n    }\n\n    _cleanTipClass() {\n      const tip = this.getTipElement();\n      const basicClassPrefixRegex = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, 'g');\n      const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));\n      }\n    }\n\n    _getBasicClassPrefix() {\n      return CLASS_PREFIX$1;\n    }\n\n    _handlePopperPlacementChange(popperData) {\n      const {\n        state\n      } = popperData;\n\n      if (!state) {\n        return;\n      }\n\n      this.tip = state.elements.popper;\n\n      this._cleanTipClass();\n\n      this._addAttachmentClass(this._getAttachment(state.placement));\n    }\n\n    _disposePopper() {\n      if (this._popper) {\n        this._popper.destroy();\n\n        this._popper = null;\n      }\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Tooltip.getOrCreateInstance(this, config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Tooltip to jQuery only if jQuery is present\n   */\n\n\n  defineJQueryPlugin(Tooltip);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): popover.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$3 = 'popover';\n  const DATA_KEY$3 = 'bs.popover';\n  const EVENT_KEY$3 = `.${DATA_KEY$3}`;\n  const CLASS_PREFIX = 'bs-popover';\n  const Default$2 = { ...Tooltip.Default,\n    placement: 'right',\n    offset: [0, 8],\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>'\n  };\n  const DefaultType$2 = { ...Tooltip.DefaultType,\n    content: '(string|element|function)'\n  };\n  const Event$1 = {\n    HIDE: `hide${EVENT_KEY$3}`,\n    HIDDEN: `hidden${EVENT_KEY$3}`,\n    SHOW: `show${EVENT_KEY$3}`,\n    SHOWN: `shown${EVENT_KEY$3}`,\n    INSERTED: `inserted${EVENT_KEY$3}`,\n    CLICK: `click${EVENT_KEY$3}`,\n    FOCUSIN: `focusin${EVENT_KEY$3}`,\n    FOCUSOUT: `focusout${EVENT_KEY$3}`,\n    MOUSEENTER: `mouseenter${EVENT_KEY$3}`,\n    MOUSELEAVE: `mouseleave${EVENT_KEY$3}`\n  };\n  const SELECTOR_TITLE = '.popover-header';\n  const SELECTOR_CONTENT = '.popover-body';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Popover extends Tooltip {\n    // Getters\n    static get Default() {\n      return Default$2;\n    }\n\n    static get NAME() {\n      return NAME$3;\n    }\n\n    static get Event() {\n      return Event$1;\n    }\n\n    static get DefaultType() {\n      return DefaultType$2;\n    } // Overrides\n\n\n    isWithContent() {\n      return this.getTitle() || this._getContent();\n    }\n\n    setContent(tip) {\n      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);\n\n      this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);\n    } // Private\n\n\n    _getContent() {\n      return this._resolvePossibleFunction(this._config.content);\n    }\n\n    _getBasicClassPrefix() {\n      return CLASS_PREFIX;\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Popover.getOrCreateInstance(this, config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Popover to jQuery only if jQuery is present\n   */\n\n\n  defineJQueryPlugin(Popover);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): scrollspy.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$2 = 'scrollspy';\n  const DATA_KEY$2 = 'bs.scrollspy';\n  const EVENT_KEY$2 = `.${DATA_KEY$2}`;\n  const DATA_API_KEY$1 = '.data-api';\n  const Default$1 = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n  const DefaultType$1 = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n  const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;\n  const EVENT_SCROLL = `scroll${EVENT_KEY$2}`;\n  const EVENT_LOAD_DATA_API = `load${EVENT_KEY$2}${DATA_API_KEY$1}`;\n  const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  const CLASS_NAME_ACTIVE$1 = 'active';\n  const SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n  const SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\n  const SELECTOR_NAV_LINKS = '.nav-link';\n  const SELECTOR_NAV_ITEMS = '.nav-item';\n  const SELECTOR_LIST_ITEMS = '.list-group-item';\n  const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}, .${CLASS_NAME_DROPDOWN_ITEM}`;\n  const SELECTOR_DROPDOWN$1 = '.dropdown';\n  const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  const METHOD_OFFSET = 'offset';\n  const METHOD_POSITION = 'position';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class ScrollSpy extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;\n      this._config = this._getConfig(config);\n      this._offsets = [];\n      this._targets = [];\n      this._activeTarget = null;\n      this._scrollHeight = 0;\n      EventHandler.on(this._scrollElement, EVENT_SCROLL, () => this._process());\n      this.refresh();\n\n      this._process();\n    } // Getters\n\n\n    static get Default() {\n      return Default$1;\n    }\n\n    static get NAME() {\n      return NAME$2;\n    } // Public\n\n\n    refresh() {\n      const autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n      const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n      const offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n      this._offsets = [];\n      this._targets = [];\n      this._scrollHeight = this._getScrollHeight();\n      const targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);\n      targets.map(element => {\n        const targetSelector = getSelectorFromElement(element);\n        const target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;\n\n        if (target) {\n          const targetBCR = target.getBoundingClientRect();\n\n          if (targetBCR.width || targetBCR.height) {\n            return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n          }\n        }\n\n        return null;\n      }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {\n        this._offsets.push(item[0]);\n\n        this._targets.push(item[1]);\n      });\n    }\n\n    dispose() {\n      EventHandler.off(this._scrollElement, EVENT_KEY$2);\n      super.dispose();\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$1,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' && config ? config : {})\n      };\n      config.target = getElement(config.target) || document.documentElement;\n      typeCheckConfig(NAME$2, config, DefaultType$1);\n      return config;\n    }\n\n    _getScrollTop() {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }\n\n    _getScrollHeight() {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n\n    _getOffsetHeight() {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }\n\n    _process() {\n      const scrollTop = this._getScrollTop() + this._config.offset;\n\n      const scrollHeight = this._getScrollHeight();\n\n      const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n      if (this._scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        const target = this._targets[this._targets.length - 1];\n\n        if (this._activeTarget !== target) {\n          this._activate(target);\n        }\n\n        return;\n      }\n\n      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n        this._activeTarget = null;\n\n        this._clear();\n\n        return;\n      }\n\n      for (let i = this._offsets.length; i--;) {\n        const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this._activate(this._targets[i]);\n        }\n      }\n    }\n\n    _activate(target) {\n      this._activeTarget = target;\n\n      this._clear();\n\n      const queries = SELECTOR_LINK_ITEMS.split(',').map(selector => `${selector}[data-bs-target=\"${target}\"],${selector}[href=\"${target}\"]`);\n      const link = SelectorEngine.findOne(queries.join(','), this._config.target);\n      link.classList.add(CLASS_NAME_ACTIVE$1);\n\n      if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);\n      } else {\n        SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(listGroup => {\n          // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n          SelectorEngine.prev(listGroup, `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1)); // Handle special case when .nav-link is inside .nav-item\n\n          SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(navItem => {\n            SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1));\n          });\n        });\n      }\n\n      EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {\n        relatedTarget: target\n      });\n    }\n\n    _clear() {\n      SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(node => node.classList.contains(CLASS_NAME_ACTIVE$1)).forEach(node => node.classList.remove(CLASS_NAME_ACTIVE$1));\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = ScrollSpy.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(spy => new ScrollSpy(spy));\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .ScrollSpy to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(ScrollSpy);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): tab.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$1 = 'tab';\n  const DATA_KEY$1 = 'bs.tab';\n  const EVENT_KEY$1 = `.${DATA_KEY$1}`;\n  const DATA_API_KEY = '.data-api';\n  const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;\n  const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;\n  const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;\n  const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;\n  const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}${DATA_API_KEY}`;\n  const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n  const CLASS_NAME_ACTIVE = 'active';\n  const CLASS_NAME_FADE$1 = 'fade';\n  const CLASS_NAME_SHOW$1 = 'show';\n  const SELECTOR_DROPDOWN = '.dropdown';\n  const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  const SELECTOR_ACTIVE = '.active';\n  const SELECTOR_ACTIVE_UL = ':scope > li > .active';\n  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]';\n  const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  const SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Tab extends BaseComponent {\n    // Getters\n    static get NAME() {\n      return NAME$1;\n    } // Public\n\n\n    show() {\n      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n        return;\n      }\n\n      let previous;\n      const target = getElementFromSelector(this._element);\n\n      const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);\n\n      if (listElement) {\n        const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;\n        previous = SelectorEngine.find(itemSelector, listElement);\n        previous = previous[previous.length - 1];\n      }\n\n      const hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {\n        relatedTarget: this._element\n      }) : null;\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {\n        relatedTarget: previous\n      });\n\n      if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._activate(this._element, listElement);\n\n      const complete = () => {\n        EventHandler.trigger(previous, EVENT_HIDDEN$1, {\n          relatedTarget: this._element\n        });\n        EventHandler.trigger(this._element, EVENT_SHOWN$1, {\n          relatedTarget: previous\n        });\n      };\n\n      if (target) {\n        this._activate(target, target.parentNode, complete);\n      } else {\n        complete();\n      }\n    } // Private\n\n\n    _activate(element, container, callback) {\n      const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);\n      const active = activeElements[0];\n      const isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);\n\n      const complete = () => this._transitionComplete(element, active, callback);\n\n      if (active && isTransitioning) {\n        active.classList.remove(CLASS_NAME_SHOW$1);\n\n        this._queueCallback(complete, element, true);\n      } else {\n        complete();\n      }\n    }\n\n    _transitionComplete(element, active, callback) {\n      if (active) {\n        active.classList.remove(CLASS_NAME_ACTIVE);\n        const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n        if (dropdownChild) {\n          dropdownChild.classList.remove(CLASS_NAME_ACTIVE);\n        }\n\n        if (active.getAttribute('role') === 'tab') {\n          active.setAttribute('aria-selected', false);\n        }\n      }\n\n      element.classList.add(CLASS_NAME_ACTIVE);\n\n      if (element.getAttribute('role') === 'tab') {\n        element.setAttribute('aria-selected', true);\n      }\n\n      reflow(element);\n\n      if (element.classList.contains(CLASS_NAME_FADE$1)) {\n        element.classList.add(CLASS_NAME_SHOW$1);\n      }\n\n      let parent = element.parentNode;\n\n      if (parent && parent.nodeName === 'LI') {\n        parent = parent.parentNode;\n      }\n\n      if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n        const dropdownElement = element.closest(SELECTOR_DROPDOWN);\n\n        if (dropdownElement) {\n          SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(dropdown => dropdown.classList.add(CLASS_NAME_ACTIVE));\n        }\n\n        element.setAttribute('aria-expanded', true);\n      }\n\n      if (callback) {\n        callback();\n      }\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Tab.getOrCreateInstance(this);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const data = Tab.getOrCreateInstance(this);\n    data.show();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Tab to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Tab);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): toast.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME = 'toast';\n  const DATA_KEY = 'bs.toast';\n  const EVENT_KEY = `.${DATA_KEY}`;\n  const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;\n  const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;\n  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\n  const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;\n  const EVENT_HIDE = `hide${EVENT_KEY}`;\n  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;\n  const EVENT_SHOW = `show${EVENT_KEY}`;\n  const EVENT_SHOWN = `shown${EVENT_KEY}`;\n  const CLASS_NAME_FADE = 'fade';\n  const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\n  const CLASS_NAME_SHOW = 'show';\n  const CLASS_NAME_SHOWING = 'showing';\n  const DefaultType = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  const Default = {\n    animation: true,\n    autohide: true,\n    delay: 5000\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Toast extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._config = this._getConfig(config);\n      this._timeout = null;\n      this._hasMouseInteraction = false;\n      this._hasKeyboardInteraction = false;\n\n      this._setListeners();\n    } // Getters\n\n\n    static get DefaultType() {\n      return DefaultType;\n    }\n\n    static get Default() {\n      return Default;\n    }\n\n    static get NAME() {\n      return NAME;\n    } // Public\n\n\n    show() {\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._clearTimeout();\n\n      if (this._config.animation) {\n        this._element.classList.add(CLASS_NAME_FADE);\n      }\n\n      const complete = () => {\n        this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        EventHandler.trigger(this._element, EVENT_SHOWN);\n\n        this._maybeScheduleHide();\n      };\n\n      this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n\n\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_SHOW);\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      this._queueCallback(complete, this._element, this._config.animation);\n    }\n\n    hide() {\n      if (!this._element.classList.contains(CLASS_NAME_SHOW)) {\n        return;\n      }\n\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      const complete = () => {\n        this._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n\n\n        this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        this._element.classList.remove(CLASS_NAME_SHOW);\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN);\n      };\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      this._queueCallback(complete, this._element, this._config.animation);\n    }\n\n    dispose() {\n      this._clearTimeout();\n\n      if (this._element.classList.contains(CLASS_NAME_SHOW)) {\n        this._element.classList.remove(CLASS_NAME_SHOW);\n      }\n\n      super.dispose();\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' && config ? config : {})\n      };\n      typeCheckConfig(NAME, config, this.constructor.DefaultType);\n      return config;\n    }\n\n    _maybeScheduleHide() {\n      if (!this._config.autohide) {\n        return;\n      }\n\n      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n        return;\n      }\n\n      this._timeout = setTimeout(() => {\n        this.hide();\n      }, this._config.delay);\n    }\n\n    _onInteraction(event, isInteracting) {\n      switch (event.type) {\n        case 'mouseover':\n        case 'mouseout':\n          this._hasMouseInteraction = isInteracting;\n          break;\n\n        case 'focusin':\n        case 'focusout':\n          this._hasKeyboardInteraction = isInteracting;\n          break;\n      }\n\n      if (isInteracting) {\n        this._clearTimeout();\n\n        return;\n      }\n\n      const nextElement = event.relatedTarget;\n\n      if (this._element === nextElement || this._element.contains(nextElement)) {\n        return;\n      }\n\n      this._maybeScheduleHide();\n    }\n\n    _setListeners() {\n      EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));\n      EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));\n      EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));\n      EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));\n    }\n\n    _clearTimeout() {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Toast.getOrCreateInstance(this, config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config](this);\n        }\n      });\n    }\n\n  }\n\n  enableDismissTrigger(Toast);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Toast to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Toast);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const index_umd = {\n    Alert,\n    Button,\n    Carousel,\n    Collapse,\n    Dropdown,\n    Modal,\n    Offcanvas,\n    Popover,\n    ScrollSpy,\n    Tab,\n    Toast,\n    Tooltip\n  };\n\n  return index_umd;\n\n}));\n//# sourceMappingURL=bootstrap.bundle.js.map\n", "wavemaker-rn-codegen/style-docs/css/bootstrap-5.1.3-dist/js/bootstrap.js": "/*!\n  * Bootstrap v5.1.3 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@popperjs/core')) :\n  typeof define === 'function' && define.amd ? define(['@popperjs/core'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.bootstrap = factory(global.Popper));\n})(this, (function (Popper) { 'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    const n = Object.create(null);\n    if (e) {\n      for (const k in e) {\n        if (k !== 'default') {\n          const d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: () => e[k]\n          });\n        }\n      }\n    }\n    n.default = e;\n    return Object.freeze(n);\n  }\n\n  const Popper__namespace = /*#__PURE__*/_interopNamespace(Popper);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const MAX_UID = 1000000;\n  const MILLISECONDS_MULTIPLIER = 1000;\n  const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  const toType = obj => {\n    if (obj === null || obj === undefined) {\n      return `${obj}`;\n    }\n\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Public Util Api\n   * --------------------------------------------------------------------------\n   */\n\n\n  const getUID = prefix => {\n    do {\n      prefix += Math.floor(Math.random() * MAX_UID);\n    } while (document.getElementById(prefix));\n\n    return prefix;\n  };\n\n  const getSelector = element => {\n    let selector = element.getAttribute('data-bs-target');\n\n    if (!selector || selector === '#') {\n      let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,\n      // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n      // `document.querySelector` will rightfully complain it is invalid.\n      // See https://github.com/twbs/bootstrap/issues/32273\n\n      if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {\n        return null;\n      } // Just in case some CMS puts out a full URL with the anchor appended\n\n\n      if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n        hrefAttr = `#${hrefAttr.split('#')[1]}`;\n      }\n\n      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;\n    }\n\n    return selector;\n  };\n\n  const getSelectorFromElement = element => {\n    const selector = getSelector(element);\n\n    if (selector) {\n      return document.querySelector(selector) ? selector : null;\n    }\n\n    return null;\n  };\n\n  const getElementFromSelector = element => {\n    const selector = getSelector(element);\n    return selector ? document.querySelector(selector) : null;\n  };\n\n  const getTransitionDurationFromElement = element => {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n\n    let {\n      transitionDuration,\n      transitionDelay\n    } = window.getComputedStyle(element);\n    const floatTransitionDuration = Number.parseFloat(transitionDuration);\n    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n\n  const triggerTransitionEnd = element => {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n\n  const isElement = obj => {\n    if (!obj || typeof obj !== 'object') {\n      return false;\n    }\n\n    if (typeof obj.jquery !== 'undefined') {\n      obj = obj[0];\n    }\n\n    return typeof obj.nodeType !== 'undefined';\n  };\n\n  const getElement = obj => {\n    if (isElement(obj)) {\n      // it's a jQuery object or a node element\n      return obj.jquery ? obj[0] : obj;\n    }\n\n    if (typeof obj === 'string' && obj.length > 0) {\n      return document.querySelector(obj);\n    }\n\n    return null;\n  };\n\n  const typeCheckConfig = (componentName, config, configTypes) => {\n    Object.keys(configTypes).forEach(property => {\n      const expectedTypes = configTypes[property];\n      const value = config[property];\n      const valueType = value && isElement(value) ? 'element' : toType(value);\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(`${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n      }\n    });\n  };\n\n  const isVisible = element => {\n    if (!isElement(element) || element.getClientRects().length === 0) {\n      return false;\n    }\n\n    return getComputedStyle(element).getPropertyValue('visibility') === 'visible';\n  };\n\n  const isDisabled = element => {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n\n    if (element.classList.contains('disabled')) {\n      return true;\n    }\n\n    if (typeof element.disabled !== 'undefined') {\n      return element.disabled;\n    }\n\n    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n  };\n\n  const findShadowRoot = element => {\n    if (!document.documentElement.attachShadow) {\n      return null;\n    } // Can find the shadow root otherwise it'll return the document\n\n\n    if (typeof element.getRootNode === 'function') {\n      const root = element.getRootNode();\n      return root instanceof ShadowRoot ? root : null;\n    }\n\n    if (element instanceof ShadowRoot) {\n      return element;\n    } // when we don't find a shadow root\n\n\n    if (!element.parentNode) {\n      return null;\n    }\n\n    return findShadowRoot(element.parentNode);\n  };\n\n  const noop = () => {};\n  /**\n   * Trick to restart an element's animation\n   *\n   * @param {HTMLElement} element\n   * @return void\n   *\n   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n   */\n\n\n  const reflow = element => {\n    // eslint-disable-next-line no-unused-expressions\n    element.offsetHeight;\n  };\n\n  const getjQuery = () => {\n    const {\n      jQuery\n    } = window;\n\n    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n\n  const DOMContentLoadedCallbacks = [];\n\n  const onDOMContentLoaded = callback => {\n    if (document.readyState === 'loading') {\n      // add listener on the first call when the document is in loading state\n      if (!DOMContentLoadedCallbacks.length) {\n        document.addEventListener('DOMContentLoaded', () => {\n          DOMContentLoadedCallbacks.forEach(callback => callback());\n        });\n      }\n\n      DOMContentLoadedCallbacks.push(callback);\n    } else {\n      callback();\n    }\n  };\n\n  const isRTL = () => document.documentElement.dir === 'rtl';\n\n  const defineJQueryPlugin = plugin => {\n    onDOMContentLoaded(() => {\n      const $ = getjQuery();\n      /* istanbul ignore if */\n\n      if ($) {\n        const name = plugin.NAME;\n        const JQUERY_NO_CONFLICT = $.fn[name];\n        $.fn[name] = plugin.jQueryInterface;\n        $.fn[name].Constructor = plugin;\n\n        $.fn[name].noConflict = () => {\n          $.fn[name] = JQUERY_NO_CONFLICT;\n          return plugin.jQueryInterface;\n        };\n      }\n    });\n  };\n\n  const execute = callback => {\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n    if (!waitForTransition) {\n      execute(callback);\n      return;\n    }\n\n    const durationPadding = 5;\n    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n    let called = false;\n\n    const handler = ({\n      target\n    }) => {\n      if (target !== transitionElement) {\n        return;\n      }\n\n      called = true;\n      transitionElement.removeEventListener(TRANSITION_END, handler);\n      execute(callback);\n    };\n\n    transitionElement.addEventListener(TRANSITION_END, handler);\n    setTimeout(() => {\n      if (!called) {\n        triggerTransitionEnd(transitionElement);\n      }\n    }, emulatedDuration);\n  };\n  /**\n   * Return the previous/next element of a list.\n   *\n   * @param {array} list    The list of elements\n   * @param activeElement   The active element\n   * @param shouldGetNext   Choose to get next or previous element\n   * @param isCycleAllowed\n   * @return {Element|elem} The proper element\n   */\n\n\n  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n    let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n\n    if (index === -1) {\n      return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];\n    }\n\n    const listLength = list.length;\n    index += shouldGetNext ? 1 : -1;\n\n    if (isCycleAllowed) {\n      index = (index + listLength) % listLength;\n    }\n\n    return list[Math.max(0, Math.min(index, listLength - 1))];\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  const stripNameRegex = /\\..*/;\n  const stripUidRegex = /::\\d+$/;\n  const eventRegistry = {}; // Events storage\n\n  let uidEvent = 1;\n  const customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  const customEventsRegex = /^(mouseenter|mouseleave)/i;\n  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n  /**\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    const uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      event.delegateTarget = element;\n\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      const domElements = element.querySelectorAll(selector);\n\n      for (let {\n        target\n      } = event; target && target !== this; target = target.parentNode) {\n        for (let i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            event.delegateTarget = target;\n\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, selector, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler, delegationSelector = null) {\n    const uidEventList = Object.keys(events);\n\n    for (let i = 0, len = uidEventList.length; i < len; i++) {\n      const event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    const delegation = typeof handler === 'string';\n    const originalHandler = delegation ? delegationFn : handler;\n    let typeEvent = getTypeEvent(originalTypeEvent);\n    const isNative = nativeEvents.has(typeEvent);\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n    // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n\n    if (customEventsRegex.test(originalTypeEvent)) {\n      const wrapFn = fn => {\n        return function (event) {\n          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n            return fn.call(this, event);\n          }\n        };\n      };\n\n      if (delegationFn) {\n        delegationFn = wrapFn(delegationFn);\n      } else {\n        handler = wrapFn(handler);\n      }\n    }\n\n    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n    const events = getEvent(element);\n    const handlers = events[typeEvent] || (events[typeEvent] = {});\n    const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    const storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(handlerKey => {\n      if (handlerKey.includes(namespace)) {\n        const event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  function getTypeEvent(event) {\n    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n    event = event.replace(stripNameRegex, '');\n    return customEvents[event] || event;\n  }\n\n  const EventHandler = {\n    on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n\n    one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n\n    off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n      const inNamespace = typeEvent !== originalTypeEvent;\n      const events = getEvent(element);\n      const isNamespace = originalTypeEvent.startsWith('.');\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(elementEvent => {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      const storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(keyHandlers => {\n        const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n          const event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n\n    trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      const $ = getjQuery();\n      const typeEvent = getTypeEvent(event);\n      const inNamespace = event !== typeEvent;\n      const isNative = nativeEvents.has(typeEvent);\n      let jQueryEvent;\n      let bubbles = true;\n      let nativeDispatch = true;\n      let defaultPrevented = false;\n      let evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles,\n          cancelable: true\n        });\n      } // merge custom information in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(key => {\n          Object.defineProperty(evt, key, {\n            get() {\n              return args[key];\n            }\n\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n  const elementMap = new Map();\n  const Data = {\n    set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n\n      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n        return;\n      }\n\n      instanceMap.set(key, instance);\n    },\n\n    get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n\n      return null;\n    },\n\n    remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n\n      const instanceMap = elementMap.get(element);\n      instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n      if (instanceMap.size === 0) {\n        elementMap.delete(element);\n      }\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const VERSION = '5.1.3';\n\n  class BaseComponent {\n    constructor(element) {\n      element = getElement(element);\n\n      if (!element) {\n        return;\n      }\n\n      this._element = element;\n      Data.set(this._element, this.constructor.DATA_KEY, this);\n    }\n\n    dispose() {\n      Data.remove(this._element, this.constructor.DATA_KEY);\n      EventHandler.off(this._element, this.constructor.EVENT_KEY);\n      Object.getOwnPropertyNames(this).forEach(propertyName => {\n        this[propertyName] = null;\n      });\n    }\n\n    _queueCallback(callback, element, isAnimated = true) {\n      executeAfterTransition(callback, element, isAnimated);\n    }\n    /** Static */\n\n\n    static getInstance(element) {\n      return Data.get(getElement(element), this.DATA_KEY);\n    }\n\n    static getOrCreateInstance(element, config = {}) {\n      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n    }\n\n    static get VERSION() {\n      return VERSION;\n    }\n\n    static get NAME() {\n      throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n\n    static get DATA_KEY() {\n      return `bs.${this.NAME}`;\n    }\n\n    static get EVENT_KEY() {\n      return `.${this.DATA_KEY}`;\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/component-functions.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  const enableDismissTrigger = (component, method = 'hide') => {\n    const clickEvent = `click.dismiss${component.EVENT_KEY}`;\n    const name = component.NAME;\n    EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n      if (['A', 'AREA'].includes(this.tagName)) {\n        event.preventDefault();\n      }\n\n      if (isDisabled(this)) {\n        return;\n      }\n\n      const target = getElementFromSelector(this) || this.closest(`.${name}`);\n      const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n\n      instance[method]();\n    });\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): alert.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$d = 'alert';\n  const DATA_KEY$c = 'bs.alert';\n  const EVENT_KEY$c = `.${DATA_KEY$c}`;\n  const EVENT_CLOSE = `close${EVENT_KEY$c}`;\n  const EVENT_CLOSED = `closed${EVENT_KEY$c}`;\n  const CLASS_NAME_FADE$5 = 'fade';\n  const CLASS_NAME_SHOW$8 = 'show';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Alert extends BaseComponent {\n    // Getters\n    static get NAME() {\n      return NAME$d;\n    } // Public\n\n\n    close() {\n      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n\n      if (closeEvent.defaultPrevented) {\n        return;\n      }\n\n      this._element.classList.remove(CLASS_NAME_SHOW$8);\n\n      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n\n      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);\n    } // Private\n\n\n    _destroyElement() {\n      this._element.remove();\n\n      EventHandler.trigger(this._element, EVENT_CLOSED);\n      this.dispose();\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Alert.getOrCreateInstance(this);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  enableDismissTrigger(Alert, 'close');\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Alert to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Alert);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): button.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$c = 'button';\n  const DATA_KEY$b = 'bs.button';\n  const EVENT_KEY$b = `.${DATA_KEY$b}`;\n  const DATA_API_KEY$7 = '.data-api';\n  const CLASS_NAME_ACTIVE$3 = 'active';\n  const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n  const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$b}${DATA_API_KEY$7}`;\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Button extends BaseComponent {\n    // Getters\n    static get NAME() {\n      return NAME$c;\n    } // Public\n\n\n    toggle() {\n      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n      this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Button.getOrCreateInstance(this);\n\n        if (config === 'toggle') {\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {\n    event.preventDefault();\n    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n    const data = Button.getOrCreateInstance(button);\n    data.toggle();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Button to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Button);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n  }\n\n  const Manipulator = {\n    setDataAttribute(element, key, value) {\n      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n    },\n\n    removeDataAttribute(element, key) {\n      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n    },\n\n    getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      const attributes = {};\n      Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {\n        let pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      });\n      return attributes;\n    },\n\n    getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n    },\n\n    offset(element) {\n      const rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + window.pageYOffset,\n        left: rect.left + window.pageXOffset\n      };\n    },\n\n    position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const NODE_TEXT = 3;\n  const SelectorEngine = {\n    find(selector, element = document.documentElement) {\n      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n    },\n\n    findOne(selector, element = document.documentElement) {\n      return Element.prototype.querySelector.call(element, selector);\n    },\n\n    children(element, selector) {\n      return [].concat(...element.children).filter(child => child.matches(selector));\n    },\n\n    parents(element, selector) {\n      const parents = [];\n      let ancestor = element.parentNode;\n\n      while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {\n        if (ancestor.matches(selector)) {\n          parents.push(ancestor);\n        }\n\n        ancestor = ancestor.parentNode;\n      }\n\n      return parents;\n    },\n\n    prev(element, selector) {\n      let previous = element.previousElementSibling;\n\n      while (previous) {\n        if (previous.matches(selector)) {\n          return [previous];\n        }\n\n        previous = previous.previousElementSibling;\n      }\n\n      return [];\n    },\n\n    next(element, selector) {\n      let next = element.nextElementSibling;\n\n      while (next) {\n        if (next.matches(selector)) {\n          return [next];\n        }\n\n        next = next.nextElementSibling;\n      }\n\n      return [];\n    },\n\n    focusableChildren(element) {\n      const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(', ');\n      return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));\n    }\n\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): carousel.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$b = 'carousel';\n  const DATA_KEY$a = 'bs.carousel';\n  const EVENT_KEY$a = `.${DATA_KEY$a}`;\n  const DATA_API_KEY$6 = '.data-api';\n  const ARROW_LEFT_KEY = 'ArrowLeft';\n  const ARROW_RIGHT_KEY = 'ArrowRight';\n  const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  const SWIPE_THRESHOLD = 40;\n  const Default$a = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true,\n    touch: true\n  };\n  const DefaultType$a = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean',\n    touch: 'boolean'\n  };\n  const ORDER_NEXT = 'next';\n  const ORDER_PREV = 'prev';\n  const DIRECTION_LEFT = 'left';\n  const DIRECTION_RIGHT = 'right';\n  const KEY_TO_DIRECTION = {\n    [ARROW_LEFT_KEY]: DIRECTION_RIGHT,\n    [ARROW_RIGHT_KEY]: DIRECTION_LEFT\n  };\n  const EVENT_SLIDE = `slide${EVENT_KEY$a}`;\n  const EVENT_SLID = `slid${EVENT_KEY$a}`;\n  const EVENT_KEYDOWN = `keydown${EVENT_KEY$a}`;\n  const EVENT_MOUSEENTER = `mouseenter${EVENT_KEY$a}`;\n  const EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY$a}`;\n  const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$a}`;\n  const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$a}`;\n  const EVENT_TOUCHEND = `touchend${EVENT_KEY$a}`;\n  const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$a}`;\n  const EVENT_POINTERUP = `pointerup${EVENT_KEY$a}`;\n  const EVENT_DRAG_START = `dragstart${EVENT_KEY$a}`;\n  const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$a}${DATA_API_KEY$6}`;\n  const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;\n  const CLASS_NAME_CAROUSEL = 'carousel';\n  const CLASS_NAME_ACTIVE$2 = 'active';\n  const CLASS_NAME_SLIDE = 'slide';\n  const CLASS_NAME_END = 'carousel-item-end';\n  const CLASS_NAME_START = 'carousel-item-start';\n  const CLASS_NAME_NEXT = 'carousel-item-next';\n  const CLASS_NAME_PREV = 'carousel-item-prev';\n  const CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  const SELECTOR_ACTIVE$1 = '.active';\n  const SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\n  const SELECTOR_ITEM = '.carousel-item';\n  const SELECTOR_ITEM_IMG = '.carousel-item img';\n  const SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\n  const SELECTOR_INDICATORS = '.carousel-indicators';\n  const SELECTOR_INDICATOR = '[data-bs-target]';\n  const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\n  const SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n  const POINTER_TYPE_TOUCH = 'touch';\n  const POINTER_TYPE_PEN = 'pen';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Carousel extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._items = null;\n      this._interval = null;\n      this._activeElement = null;\n      this._isPaused = false;\n      this._isSliding = false;\n      this.touchTimeout = null;\n      this.touchStartX = 0;\n      this.touchDeltaX = 0;\n      this._config = this._getConfig(config);\n      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      this._pointerEvent = Boolean(window.PointerEvent);\n\n      this._addEventListeners();\n    } // Getters\n\n\n    static get Default() {\n      return Default$a;\n    }\n\n    static get NAME() {\n      return NAME$b;\n    } // Public\n\n\n    next() {\n      this._slide(ORDER_NEXT);\n    }\n\n    nextWhenVisible() {\n      // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n      if (!document.hidden && isVisible(this._element)) {\n        this.next();\n      }\n    }\n\n    prev() {\n      this._slide(ORDER_PREV);\n    }\n\n    pause(event) {\n      if (!event) {\n        this._isPaused = true;\n      }\n\n      if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {\n        triggerTransitionEnd(this._element);\n        this.cycle(true);\n      }\n\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n\n    cycle(event) {\n      if (!event) {\n        this._isPaused = false;\n      }\n\n      if (this._interval) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n\n      if (this._config && this._config.interval && !this._isPaused) {\n        this._updateInterval();\n\n        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n      }\n    }\n\n    to(index) {\n      this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      const activeIndex = this._getItemIndex(this._activeElement);\n\n      if (index > this._items.length - 1 || index < 0) {\n        return;\n      }\n\n      if (this._isSliding) {\n        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));\n        return;\n      }\n\n      if (activeIndex === index) {\n        this.pause();\n        this.cycle();\n        return;\n      }\n\n      const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n\n      this._slide(order, this._items[index]);\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$a,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$b, config, DefaultType$a);\n      return config;\n    }\n\n    _handleSwipe() {\n      const absDeltax = Math.abs(this.touchDeltaX);\n\n      if (absDeltax <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      const direction = absDeltax / this.touchDeltaX;\n      this.touchDeltaX = 0;\n\n      if (!direction) {\n        return;\n      }\n\n      this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n\n    _addEventListeners() {\n      if (this._config.keyboard) {\n        EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));\n      }\n\n      if (this._config.pause === 'hover') {\n        EventHandler.on(this._element, EVENT_MOUSEENTER, event => this.pause(event));\n        EventHandler.on(this._element, EVENT_MOUSELEAVE, event => this.cycle(event));\n      }\n\n      if (this._config.touch && this._touchSupported) {\n        this._addTouchEventListeners();\n      }\n    }\n\n    _addTouchEventListeners() {\n      const hasPointerPenTouch = event => {\n        return this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n      };\n\n      const start = event => {\n        if (hasPointerPenTouch(event)) {\n          this.touchStartX = event.clientX;\n        } else if (!this._pointerEvent) {\n          this.touchStartX = event.touches[0].clientX;\n        }\n      };\n\n      const move = event => {\n        // ensure swiping with one touch and not pinching\n        this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;\n      };\n\n      const end = event => {\n        if (hasPointerPenTouch(event)) {\n          this.touchDeltaX = event.clientX - this.touchStartX;\n        }\n\n        this._handleSwipe();\n\n        if (this._config.pause === 'hover') {\n          // If it's a touch-enabled device, mouseenter/leave are fired as\n          // part of the mouse compatibility events on first tap - the carousel\n          // would stop cycling until user tapped out of it;\n          // here, we listen for touchend, explicitly pause the carousel\n          // (as if it's the second time we tap on it, mouseenter compat event\n          // is NOT fired) and after a timeout (to allow for mouse compatibility\n          // events to fire) we explicitly restart cycling\n          this.pause();\n\n          if (this.touchTimeout) {\n            clearTimeout(this.touchTimeout);\n          }\n\n          this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n        }\n      };\n\n      SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(itemImg => {\n        EventHandler.on(itemImg, EVENT_DRAG_START, event => event.preventDefault());\n      });\n\n      if (this._pointerEvent) {\n        EventHandler.on(this._element, EVENT_POINTERDOWN, event => start(event));\n        EventHandler.on(this._element, EVENT_POINTERUP, event => end(event));\n\n        this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n      } else {\n        EventHandler.on(this._element, EVENT_TOUCHSTART, event => start(event));\n        EventHandler.on(this._element, EVENT_TOUCHMOVE, event => move(event));\n        EventHandler.on(this._element, EVENT_TOUCHEND, event => end(event));\n      }\n    }\n\n    _keydown(event) {\n      if (/input|textarea/i.test(event.target.tagName)) {\n        return;\n      }\n\n      const direction = KEY_TO_DIRECTION[event.key];\n\n      if (direction) {\n        event.preventDefault();\n\n        this._slide(direction);\n      }\n    }\n\n    _getItemIndex(element) {\n      this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];\n      return this._items.indexOf(element);\n    }\n\n    _getItemByOrder(order, activeElement) {\n      const isNext = order === ORDER_NEXT;\n      return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);\n    }\n\n    _triggerSlideEvent(relatedTarget, eventDirectionName) {\n      const targetIndex = this._getItemIndex(relatedTarget);\n\n      const fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));\n\n      return EventHandler.trigger(this._element, EVENT_SLIDE, {\n        relatedTarget,\n        direction: eventDirectionName,\n        from: fromIndex,\n        to: targetIndex\n      });\n    }\n\n    _setActiveIndicatorElement(element) {\n      if (this._indicatorsElement) {\n        const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);\n        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n        activeIndicator.removeAttribute('aria-current');\n        const indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);\n\n        for (let i = 0; i < indicators.length; i++) {\n          if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {\n            indicators[i].classList.add(CLASS_NAME_ACTIVE$2);\n            indicators[i].setAttribute('aria-current', 'true');\n            break;\n          }\n        }\n      }\n    }\n\n    _updateInterval() {\n      const element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      if (!element) {\n        return;\n      }\n\n      const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n\n      if (elementInterval) {\n        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n        this._config.interval = elementInterval;\n      } else {\n        this._config.interval = this._config.defaultInterval || this._config.interval;\n      }\n    }\n\n    _slide(directionOrOrder, element) {\n      const order = this._directionToOrder(directionOrOrder);\n\n      const activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n\n      const activeElementIndex = this._getItemIndex(activeElement);\n\n      const nextElement = element || this._getItemByOrder(order, activeElement);\n\n      const nextElementIndex = this._getItemIndex(nextElement);\n\n      const isCycling = Boolean(this._interval);\n      const isNext = order === ORDER_NEXT;\n      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n\n      const eventDirectionName = this._orderToDirection(order);\n\n      if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {\n        this._isSliding = false;\n        return;\n      }\n\n      if (this._isSliding) {\n        return;\n      }\n\n      const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n      if (slideEvent.defaultPrevented) {\n        return;\n      }\n\n      if (!activeElement || !nextElement) {\n        // Some weirdness is happening, so we bail\n        return;\n      }\n\n      this._isSliding = true;\n\n      if (isCycling) {\n        this.pause();\n      }\n\n      this._setActiveIndicatorElement(nextElement);\n\n      this._activeElement = nextElement;\n\n      const triggerSlidEvent = () => {\n        EventHandler.trigger(this._element, EVENT_SLID, {\n          relatedTarget: nextElement,\n          direction: eventDirectionName,\n          from: activeElementIndex,\n          to: nextElementIndex\n        });\n      };\n\n      if (this._element.classList.contains(CLASS_NAME_SLIDE)) {\n        nextElement.classList.add(orderClassName);\n        reflow(nextElement);\n        activeElement.classList.add(directionalClassName);\n        nextElement.classList.add(directionalClassName);\n\n        const completeCallBack = () => {\n          nextElement.classList.remove(directionalClassName, orderClassName);\n          nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n          this._isSliding = false;\n          setTimeout(triggerSlidEvent, 0);\n        };\n\n        this._queueCallback(completeCallBack, activeElement, true);\n      } else {\n        activeElement.classList.remove(CLASS_NAME_ACTIVE$2);\n        nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n        this._isSliding = false;\n        triggerSlidEvent();\n      }\n\n      if (isCycling) {\n        this.cycle();\n      }\n    }\n\n    _directionToOrder(direction) {\n      if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {\n        return direction;\n      }\n\n      if (isRTL()) {\n        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n      }\n\n      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n    }\n\n    _orderToDirection(order) {\n      if (![ORDER_NEXT, ORDER_PREV].includes(order)) {\n        return order;\n      }\n\n      if (isRTL()) {\n        return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n      }\n\n      return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n    } // Static\n\n\n    static carouselInterface(element, config) {\n      const data = Carousel.getOrCreateInstance(element, config);\n      let {\n        _config\n      } = data;\n\n      if (typeof config === 'object') {\n        _config = { ..._config,\n          ...config\n        };\n      }\n\n      const action = typeof config === 'string' ? config : _config.slide;\n\n      if (typeof config === 'number') {\n        data.to(config);\n      } else if (typeof action === 'string') {\n        if (typeof data[action] === 'undefined') {\n          throw new TypeError(`No method named \"${action}\"`);\n        }\n\n        data[action]();\n      } else if (_config.interval && _config.ride) {\n        data.pause();\n        data.cycle();\n      }\n    }\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        Carousel.carouselInterface(this, config);\n      });\n    }\n\n    static dataApiClickHandler(event) {\n      const target = getElementFromSelector(this);\n\n      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n        return;\n      }\n\n      const config = { ...Manipulator.getDataAttributes(target),\n        ...Manipulator.getDataAttributes(this)\n      };\n      const slideIndex = this.getAttribute('data-bs-slide-to');\n\n      if (slideIndex) {\n        config.interval = false;\n      }\n\n      Carousel.carouselInterface(target, config);\n\n      if (slideIndex) {\n        Carousel.getInstance(target).to(slideIndex);\n      }\n\n      event.preventDefault();\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);\n  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {\n    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n\n    for (let i = 0, len = carousels.length; i < len; i++) {\n      Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));\n    }\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Carousel to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Carousel);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$a = 'collapse';\n  const DATA_KEY$9 = 'bs.collapse';\n  const EVENT_KEY$9 = `.${DATA_KEY$9}`;\n  const DATA_API_KEY$5 = '.data-api';\n  const Default$9 = {\n    toggle: true,\n    parent: null\n  };\n  const DefaultType$9 = {\n    toggle: 'boolean',\n    parent: '(null|element)'\n  };\n  const EVENT_SHOW$5 = `show${EVENT_KEY$9}`;\n  const EVENT_SHOWN$5 = `shown${EVENT_KEY$9}`;\n  const EVENT_HIDE$5 = `hide${EVENT_KEY$9}`;\n  const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$9}`;\n  const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$9}${DATA_API_KEY$5}`;\n  const CLASS_NAME_SHOW$7 = 'show';\n  const CLASS_NAME_COLLAPSE = 'collapse';\n  const CLASS_NAME_COLLAPSING = 'collapsing';\n  const CLASS_NAME_COLLAPSED = 'collapsed';\n  const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;\n  const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n  const WIDTH = 'width';\n  const HEIGHT = 'height';\n  const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n  const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Collapse extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._isTransitioning = false;\n      this._config = this._getConfig(config);\n      this._triggerArray = [];\n      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n\n      for (let i = 0, len = toggleList.length; i < len; i++) {\n        const elem = toggleList[i];\n        const selector = getSelectorFromElement(elem);\n        const filterElement = SelectorEngine.find(selector).filter(foundElem => foundElem === this._element);\n\n        if (selector !== null && filterElement.length) {\n          this._selector = selector;\n\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._initializeChildren();\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n    } // Getters\n\n\n    static get Default() {\n      return Default$9;\n    }\n\n    static get NAME() {\n      return NAME$a;\n    } // Public\n\n\n    toggle() {\n      if (this._isShown()) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n\n    show() {\n      if (this._isTransitioning || this._isShown()) {\n        return;\n      }\n\n      let actives = [];\n      let activesData;\n\n      if (this._config.parent) {\n        const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n        actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth\n      }\n\n      const container = SelectorEngine.findOne(this._selector);\n\n      if (actives.length) {\n        const tempActiveData = actives.find(elem => container !== elem);\n        activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;\n\n        if (activesData && activesData._isTransitioning) {\n          return;\n        }\n      }\n\n      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      actives.forEach(elemActive => {\n        if (container !== elemActive) {\n          Collapse.getOrCreateInstance(elemActive, {\n            toggle: false\n          }).hide();\n        }\n\n        if (!activesData) {\n          Data.set(elemActive, DATA_KEY$9, null);\n        }\n      });\n\n      const dimension = this._getDimension();\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.style[dimension] = 0;\n\n      this._addAriaAndCollapsedClass(this._triggerArray, true);\n\n      this._isTransitioning = true;\n\n      const complete = () => {\n        this._isTransitioning = false;\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n        this._element.style[dimension] = '';\n        EventHandler.trigger(this._element, EVENT_SHOWN$5);\n      };\n\n      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      const scrollSize = `scroll${capitalizedDimension}`;\n\n      this._queueCallback(complete, this._element, true);\n\n      this._element.style[dimension] = `${this._element[scrollSize]}px`;\n    }\n\n    hide() {\n      if (this._isTransitioning || !this._isShown()) {\n        return;\n      }\n\n      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);\n\n      if (startEvent.defaultPrevented) {\n        return;\n      }\n\n      const dimension = this._getDimension();\n\n      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_COLLAPSING);\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n\n      const triggerArrayLength = this._triggerArray.length;\n\n      for (let i = 0; i < triggerArrayLength; i++) {\n        const trigger = this._triggerArray[i];\n        const elem = getElementFromSelector(trigger);\n\n        if (elem && !this._isShown(elem)) {\n          this._addAriaAndCollapsedClass([trigger], false);\n        }\n      }\n\n      this._isTransitioning = true;\n\n      const complete = () => {\n        this._isTransitioning = false;\n\n        this._element.classList.remove(CLASS_NAME_COLLAPSING);\n\n        this._element.classList.add(CLASS_NAME_COLLAPSE);\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN$5);\n      };\n\n      this._element.style[dimension] = '';\n\n      this._queueCallback(complete, this._element, true);\n    }\n\n    _isShown(element = this._element) {\n      return element.classList.contains(CLASS_NAME_SHOW$7);\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$9,\n        ...Manipulator.getDataAttributes(this._element),\n        ...config\n      };\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      config.parent = getElement(config.parent);\n      typeCheckConfig(NAME$a, config, DefaultType$9);\n      return config;\n    }\n\n    _getDimension() {\n      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n    }\n\n    _initializeChildren() {\n      if (!this._config.parent) {\n        return;\n      }\n\n      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n      SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {\n        const selected = getElementFromSelector(element);\n\n        if (selected) {\n          this._addAriaAndCollapsedClass([element], this._isShown(selected));\n        }\n      });\n    }\n\n    _addAriaAndCollapsedClass(triggerArray, isOpen) {\n      if (!triggerArray.length) {\n        return;\n      }\n\n      triggerArray.forEach(elem => {\n        if (isOpen) {\n          elem.classList.remove(CLASS_NAME_COLLAPSED);\n        } else {\n          elem.classList.add(CLASS_NAME_COLLAPSED);\n        }\n\n        elem.setAttribute('aria-expanded', isOpen);\n      });\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const _config = {};\n\n        if (typeof config === 'string' && /show|hide/.test(config)) {\n          _config.toggle = false;\n        }\n\n        const data = Collapse.getOrCreateInstance(this, _config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    const selector = getSelectorFromElement(this);\n    const selectorElements = SelectorEngine.find(selector);\n    selectorElements.forEach(element => {\n      Collapse.getOrCreateInstance(element, {\n        toggle: false\n      }).toggle();\n    });\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Collapse to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Collapse);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): dropdown.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$9 = 'dropdown';\n  const DATA_KEY$8 = 'bs.dropdown';\n  const EVENT_KEY$8 = `.${DATA_KEY$8}`;\n  const DATA_API_KEY$4 = '.data-api';\n  const ESCAPE_KEY$2 = 'Escape';\n  const SPACE_KEY = 'Space';\n  const TAB_KEY$1 = 'Tab';\n  const ARROW_UP_KEY = 'ArrowUp';\n  const ARROW_DOWN_KEY = 'ArrowDown';\n  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n  const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY$2}`);\n  const EVENT_HIDE$4 = `hide${EVENT_KEY$8}`;\n  const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$8}`;\n  const EVENT_SHOW$4 = `show${EVENT_KEY$8}`;\n  const EVENT_SHOWN$4 = `shown${EVENT_KEY$8}`;\n  const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$8}${DATA_API_KEY$4}`;\n  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$8}${DATA_API_KEY$4}`;\n  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$8}${DATA_API_KEY$4}`;\n  const CLASS_NAME_SHOW$6 = 'show';\n  const CLASS_NAME_DROPUP = 'dropup';\n  const CLASS_NAME_DROPEND = 'dropend';\n  const CLASS_NAME_DROPSTART = 'dropstart';\n  const CLASS_NAME_NAVBAR = 'navbar';\n  const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]';\n  const SELECTOR_MENU = '.dropdown-menu';\n  const SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\n  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\n  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\n  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\n  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\n  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\n  const Default$8 = {\n    offset: [0, 2],\n    boundary: 'clippingParents',\n    reference: 'toggle',\n    display: 'dynamic',\n    popperConfig: null,\n    autoClose: true\n  };\n  const DefaultType$8 = {\n    offset: '(array|string|function)',\n    boundary: '(string|element)',\n    reference: '(string|element|object)',\n    display: 'string',\n    popperConfig: '(null|object|function)',\n    autoClose: '(boolean|string)'\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Dropdown extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._popper = null;\n      this._config = this._getConfig(config);\n      this._menu = this._getMenuElement();\n      this._inNavbar = this._detectNavbar();\n    } // Getters\n\n\n    static get Default() {\n      return Default$8;\n    }\n\n    static get DefaultType() {\n      return DefaultType$8;\n    }\n\n    static get NAME() {\n      return NAME$9;\n    } // Public\n\n\n    toggle() {\n      return this._isShown() ? this.hide() : this.show();\n    }\n\n    show() {\n      if (isDisabled(this._element) || this._isShown(this._menu)) {\n        return;\n      }\n\n      const relatedTarget = {\n        relatedTarget: this._element\n      };\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar\n\n      if (this._inNavbar) {\n        Manipulator.setDataAttribute(this._menu, 'popper', 'none');\n      } else {\n        this._createPopper(parent);\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {\n        [].concat(...document.body.children).forEach(elem => EventHandler.on(elem, 'mouseover', noop));\n      }\n\n      this._element.focus();\n\n      this._element.setAttribute('aria-expanded', true);\n\n      this._menu.classList.add(CLASS_NAME_SHOW$6);\n\n      this._element.classList.add(CLASS_NAME_SHOW$6);\n\n      EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);\n    }\n\n    hide() {\n      if (isDisabled(this._element) || !this._isShown(this._menu)) {\n        return;\n      }\n\n      const relatedTarget = {\n        relatedTarget: this._element\n      };\n\n      this._completeHide(relatedTarget);\n    }\n\n    dispose() {\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      super.dispose();\n    }\n\n    update() {\n      this._inNavbar = this._detectNavbar();\n\n      if (this._popper) {\n        this._popper.update();\n      }\n    } // Private\n\n\n    _completeHide(relatedTarget) {\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      } // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n\n      if ('ontouchstart' in document.documentElement) {\n        [].concat(...document.body.children).forEach(elem => EventHandler.off(elem, 'mouseover', noop));\n      }\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      this._menu.classList.remove(CLASS_NAME_SHOW$6);\n\n      this._element.classList.remove(CLASS_NAME_SHOW$6);\n\n      this._element.setAttribute('aria-expanded', 'false');\n\n      Manipulator.removeDataAttribute(this._menu, 'popper');\n      EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);\n    }\n\n    _getConfig(config) {\n      config = { ...this.constructor.Default,\n        ...Manipulator.getDataAttributes(this._element),\n        ...config\n      };\n      typeCheckConfig(NAME$9, config, this.constructor.DefaultType);\n\n      if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n        // Popper virtual elements require a getBoundingClientRect method\n        throw new TypeError(`${NAME$9.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n      }\n\n      return config;\n    }\n\n    _createPopper(parent) {\n      if (typeof Popper__namespace === 'undefined') {\n        throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n      }\n\n      let referenceElement = this._element;\n\n      if (this._config.reference === 'parent') {\n        referenceElement = parent;\n      } else if (isElement(this._config.reference)) {\n        referenceElement = getElement(this._config.reference);\n      } else if (typeof this._config.reference === 'object') {\n        referenceElement = this._config.reference;\n      }\n\n      const popperConfig = this._getPopperConfig();\n\n      const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);\n      this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);\n\n      if (isDisplayStatic) {\n        Manipulator.setDataAttribute(this._menu, 'popper', 'static');\n      }\n    }\n\n    _isShown(element = this._element) {\n      return element.classList.contains(CLASS_NAME_SHOW$6);\n    }\n\n    _getMenuElement() {\n      return SelectorEngine.next(this._element, SELECTOR_MENU)[0];\n    }\n\n    _getPlacement() {\n      const parentDropdown = this._element.parentNode;\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n        return PLACEMENT_RIGHT;\n      }\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n        return PLACEMENT_LEFT;\n      } // We need to trim the value because custom properties can also include spaces\n\n\n      const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n\n      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n      }\n\n      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n    }\n\n    _detectNavbar() {\n      return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;\n    }\n\n    _getOffset() {\n      const {\n        offset\n      } = this._config;\n\n      if (typeof offset === 'string') {\n        return offset.split(',').map(val => Number.parseInt(val, 10));\n      }\n\n      if (typeof offset === 'function') {\n        return popperData => offset(popperData, this._element);\n      }\n\n      return offset;\n    }\n\n    _getPopperConfig() {\n      const defaultBsPopperConfig = {\n        placement: this._getPlacement(),\n        modifiers: [{\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        }, {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        }]\n      }; // Disable Popper if we have a static display\n\n      if (this._config.display === 'static') {\n        defaultBsPopperConfig.modifiers = [{\n          name: 'applyStyles',\n          enabled: false\n        }];\n      }\n\n      return { ...defaultBsPopperConfig,\n        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n      };\n    }\n\n    _selectMenuItem({\n      key,\n      target\n    }) {\n      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);\n\n      if (!items.length) {\n        return;\n      } // if target isn't included in items (e.g. when expanding the dropdown)\n      // allow cycling to get the last item in case key equals ARROW_UP_KEY\n\n\n      getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Dropdown.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      });\n    }\n\n    static clearMenus(event) {\n      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {\n        return;\n      }\n\n      const toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);\n\n      for (let i = 0, len = toggles.length; i < len; i++) {\n        const context = Dropdown.getInstance(toggles[i]);\n\n        if (!context || context._config.autoClose === false) {\n          continue;\n        }\n\n        if (!context._isShown()) {\n          continue;\n        }\n\n        const relatedTarget = {\n          relatedTarget: context._element\n        };\n\n        if (event) {\n          const composedPath = event.composedPath();\n          const isMenuTarget = composedPath.includes(context._menu);\n\n          if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n            continue;\n          } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n\n\n          if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n            continue;\n          }\n\n          if (event.type === 'click') {\n            relatedTarget.clickEvent = event;\n          }\n        }\n\n        context._completeHide(relatedTarget);\n      }\n    }\n\n    static getParentFromElement(element) {\n      return getElementFromSelector(element) || element.parentNode;\n    }\n\n    static dataApiKeydownHandler(event) {\n      // If not input/textarea:\n      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n      // If input/textarea:\n      //  - If space key => not a dropdown command\n      //  - If key is other than escape\n      //    - If key is not up or down => not a dropdown command\n      //    - If trigger inside the menu => not a dropdown command\n      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {\n        return;\n      }\n\n      const isActive = this.classList.contains(CLASS_NAME_SHOW$6);\n\n      if (!isActive && event.key === ESCAPE_KEY$2) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isDisabled(this)) {\n        return;\n      }\n\n      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];\n      const instance = Dropdown.getOrCreateInstance(getToggleButton);\n\n      if (event.key === ESCAPE_KEY$2) {\n        instance.hide();\n        return;\n      }\n\n      if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {\n        if (!isActive) {\n          instance.show();\n        }\n\n        instance._selectMenuItem(event);\n\n        return;\n      }\n\n      if (!isActive || event.key === SPACE_KEY) {\n        Dropdown.clearMenus();\n      }\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n    event.preventDefault();\n    Dropdown.getOrCreateInstance(this).toggle();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Dropdown to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Dropdown);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  const SELECTOR_STICKY_CONTENT = '.sticky-top';\n\n  class ScrollBarHelper {\n    constructor() {\n      this._element = document.body;\n    }\n\n    getWidth() {\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n      const documentWidth = document.documentElement.clientWidth;\n      return Math.abs(window.innerWidth - documentWidth);\n    }\n\n    hide() {\n      const width = this.getWidth();\n\n      this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width\n\n\n      this._setElementAttributes(this._element, 'paddingRight', calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n\n\n      this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', calculatedValue => calculatedValue + width);\n\n      this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', calculatedValue => calculatedValue - width);\n    }\n\n    _disableOverFlow() {\n      this._saveInitialAttribute(this._element, 'overflow');\n\n      this._element.style.overflow = 'hidden';\n    }\n\n    _setElementAttributes(selector, styleProp, callback) {\n      const scrollbarWidth = this.getWidth();\n\n      const manipulationCallBack = element => {\n        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n          return;\n        }\n\n        this._saveInitialAttribute(element, styleProp);\n\n        const calculatedValue = window.getComputedStyle(element)[styleProp];\n        element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;\n      };\n\n      this._applyManipulationCallback(selector, manipulationCallBack);\n    }\n\n    reset() {\n      this._resetElementAttributes(this._element, 'overflow');\n\n      this._resetElementAttributes(this._element, 'paddingRight');\n\n      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');\n\n      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');\n    }\n\n    _saveInitialAttribute(element, styleProp) {\n      const actualValue = element.style[styleProp];\n\n      if (actualValue) {\n        Manipulator.setDataAttribute(element, styleProp, actualValue);\n      }\n    }\n\n    _resetElementAttributes(selector, styleProp) {\n      const manipulationCallBack = element => {\n        const value = Manipulator.getDataAttribute(element, styleProp);\n\n        if (typeof value === 'undefined') {\n          element.style.removeProperty(styleProp);\n        } else {\n          Manipulator.removeDataAttribute(element, styleProp);\n          element.style[styleProp] = value;\n        }\n      };\n\n      this._applyManipulationCallback(selector, manipulationCallBack);\n    }\n\n    _applyManipulationCallback(selector, callBack) {\n      if (isElement(selector)) {\n        callBack(selector);\n      } else {\n        SelectorEngine.find(selector, this._element).forEach(callBack);\n      }\n    }\n\n    isOverflowing() {\n      return this.getWidth() > 0;\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/backdrop.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const Default$7 = {\n    className: 'modal-backdrop',\n    isVisible: true,\n    // if false, we use the backdrop helper without adding any element to the dom\n    isAnimated: false,\n    rootElement: 'body',\n    // give the choice to place backdrop under different elements\n    clickCallback: null\n  };\n  const DefaultType$7 = {\n    className: 'string',\n    isVisible: 'boolean',\n    isAnimated: 'boolean',\n    rootElement: '(element|string)',\n    clickCallback: '(function|null)'\n  };\n  const NAME$8 = 'backdrop';\n  const CLASS_NAME_FADE$4 = 'fade';\n  const CLASS_NAME_SHOW$5 = 'show';\n  const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$8}`;\n\n  class Backdrop {\n    constructor(config) {\n      this._config = this._getConfig(config);\n      this._isAppended = false;\n      this._element = null;\n    }\n\n    show(callback) {\n      if (!this._config.isVisible) {\n        execute(callback);\n        return;\n      }\n\n      this._append();\n\n      if (this._config.isAnimated) {\n        reflow(this._getElement());\n      }\n\n      this._getElement().classList.add(CLASS_NAME_SHOW$5);\n\n      this._emulateAnimation(() => {\n        execute(callback);\n      });\n    }\n\n    hide(callback) {\n      if (!this._config.isVisible) {\n        execute(callback);\n        return;\n      }\n\n      this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n\n      this._emulateAnimation(() => {\n        this.dispose();\n        execute(callback);\n      });\n    } // Private\n\n\n    _getElement() {\n      if (!this._element) {\n        const backdrop = document.createElement('div');\n        backdrop.className = this._config.className;\n\n        if (this._config.isAnimated) {\n          backdrop.classList.add(CLASS_NAME_FADE$4);\n        }\n\n        this._element = backdrop;\n      }\n\n      return this._element;\n    }\n\n    _getConfig(config) {\n      config = { ...Default$7,\n        ...(typeof config === 'object' ? config : {})\n      }; // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n\n      config.rootElement = getElement(config.rootElement);\n      typeCheckConfig(NAME$8, config, DefaultType$7);\n      return config;\n    }\n\n    _append() {\n      if (this._isAppended) {\n        return;\n      }\n\n      this._config.rootElement.append(this._getElement());\n\n      EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, () => {\n        execute(this._config.clickCallback);\n      });\n      this._isAppended = true;\n    }\n\n    dispose() {\n      if (!this._isAppended) {\n        return;\n      }\n\n      EventHandler.off(this._element, EVENT_MOUSEDOWN);\n\n      this._element.remove();\n\n      this._isAppended = false;\n    }\n\n    _emulateAnimation(callback) {\n      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const Default$6 = {\n    trapElement: null,\n    // The element to trap focus inside of\n    autofocus: true\n  };\n  const DefaultType$6 = {\n    trapElement: 'element',\n    autofocus: 'boolean'\n  };\n  const NAME$7 = 'focustrap';\n  const DATA_KEY$7 = 'bs.focustrap';\n  const EVENT_KEY$7 = `.${DATA_KEY$7}`;\n  const EVENT_FOCUSIN$1 = `focusin${EVENT_KEY$7}`;\n  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$7}`;\n  const TAB_KEY = 'Tab';\n  const TAB_NAV_FORWARD = 'forward';\n  const TAB_NAV_BACKWARD = 'backward';\n\n  class FocusTrap {\n    constructor(config) {\n      this._config = this._getConfig(config);\n      this._isActive = false;\n      this._lastTabNavDirection = null;\n    }\n\n    activate() {\n      const {\n        trapElement,\n        autofocus\n      } = this._config;\n\n      if (this._isActive) {\n        return;\n      }\n\n      if (autofocus) {\n        trapElement.focus();\n      }\n\n      EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop\n\n      EventHandler.on(document, EVENT_FOCUSIN$1, event => this._handleFocusin(event));\n      EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n      this._isActive = true;\n    }\n\n    deactivate() {\n      if (!this._isActive) {\n        return;\n      }\n\n      this._isActive = false;\n      EventHandler.off(document, EVENT_KEY$7);\n    } // Private\n\n\n    _handleFocusin(event) {\n      const {\n        target\n      } = event;\n      const {\n        trapElement\n      } = this._config;\n\n      if (target === document || target === trapElement || trapElement.contains(target)) {\n        return;\n      }\n\n      const elements = SelectorEngine.focusableChildren(trapElement);\n\n      if (elements.length === 0) {\n        trapElement.focus();\n      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n        elements[elements.length - 1].focus();\n      } else {\n        elements[0].focus();\n      }\n    }\n\n    _handleKeydown(event) {\n      if (event.key !== TAB_KEY) {\n        return;\n      }\n\n      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n    }\n\n    _getConfig(config) {\n      config = { ...Default$6,\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$7, config, DefaultType$6);\n      return config;\n    }\n\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): modal.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$6 = 'modal';\n  const DATA_KEY$6 = 'bs.modal';\n  const EVENT_KEY$6 = `.${DATA_KEY$6}`;\n  const DATA_API_KEY$3 = '.data-api';\n  const ESCAPE_KEY$1 = 'Escape';\n  const Default$5 = {\n    backdrop: true,\n    keyboard: true,\n    focus: true\n  };\n  const DefaultType$5 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean'\n  };\n  const EVENT_HIDE$3 = `hide${EVENT_KEY$6}`;\n  const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$6}`;\n  const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$6}`;\n  const EVENT_SHOW$3 = `show${EVENT_KEY$6}`;\n  const EVENT_SHOWN$3 = `shown${EVENT_KEY$6}`;\n  const EVENT_RESIZE = `resize${EVENT_KEY$6}`;\n  const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$6}`;\n  const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$6}`;\n  const EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY$6}`;\n  const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$6}`;\n  const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;\n  const CLASS_NAME_OPEN = 'modal-open';\n  const CLASS_NAME_FADE$3 = 'fade';\n  const CLASS_NAME_SHOW$4 = 'show';\n  const CLASS_NAME_STATIC = 'modal-static';\n  const OPEN_SELECTOR$1 = '.modal.show';\n  const SELECTOR_DIALOG = '.modal-dialog';\n  const SELECTOR_MODAL_BODY = '.modal-body';\n  const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Modal extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._config = this._getConfig(config);\n      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);\n      this._backdrop = this._initializeBackDrop();\n      this._focustrap = this._initializeFocusTrap();\n      this._isShown = false;\n      this._ignoreBackdropClick = false;\n      this._isTransitioning = false;\n      this._scrollBar = new ScrollBarHelper();\n    } // Getters\n\n\n    static get Default() {\n      return Default$5;\n    }\n\n    static get NAME() {\n      return NAME$6;\n    } // Public\n\n\n    toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    }\n\n    show(relatedTarget) {\n      if (this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n        relatedTarget\n      });\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = true;\n\n      if (this._isAnimated()) {\n        this._isTransitioning = true;\n      }\n\n      this._scrollBar.hide();\n\n      document.body.classList.add(CLASS_NAME_OPEN);\n\n      this._adjustDialog();\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {\n        EventHandler.one(this._element, EVENT_MOUSEUP_DISMISS, event => {\n          if (event.target === this._element) {\n            this._ignoreBackdropClick = true;\n          }\n        });\n      });\n\n      this._showBackdrop(() => this._showElement(relatedTarget));\n    }\n\n    hide() {\n      if (!this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = false;\n\n      const isAnimated = this._isAnimated();\n\n      if (isAnimated) {\n        this._isTransitioning = true;\n      }\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      this._focustrap.deactivate();\n\n      this._element.classList.remove(CLASS_NAME_SHOW$4);\n\n      EventHandler.off(this._element, EVENT_CLICK_DISMISS);\n      EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);\n\n      this._queueCallback(() => this._hideModal(), this._element, isAnimated);\n    }\n\n    dispose() {\n      [window, this._dialog].forEach(htmlElement => EventHandler.off(htmlElement, EVENT_KEY$6));\n\n      this._backdrop.dispose();\n\n      this._focustrap.deactivate();\n\n      super.dispose();\n    }\n\n    handleUpdate() {\n      this._adjustDialog();\n    } // Private\n\n\n    _initializeBackDrop() {\n      return new Backdrop({\n        isVisible: Boolean(this._config.backdrop),\n        // 'static' option will be translated to true, and booleans will keep their value\n        isAnimated: this._isAnimated()\n      });\n    }\n\n    _initializeFocusTrap() {\n      return new FocusTrap({\n        trapElement: this._element\n      });\n    }\n\n    _getConfig(config) {\n      config = { ...Default$5,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$6, config, DefaultType$5);\n      return config;\n    }\n\n    _showElement(relatedTarget) {\n      const isAnimated = this._isAnimated();\n\n      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n\n      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n        // Don't move modal's DOM position\n        document.body.append(this._element);\n      }\n\n      this._element.style.display = 'block';\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      this._element.scrollTop = 0;\n\n      if (modalBody) {\n        modalBody.scrollTop = 0;\n      }\n\n      if (isAnimated) {\n        reflow(this._element);\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW$4);\n\n      const transitionComplete = () => {\n        if (this._config.focus) {\n          this._focustrap.activate();\n        }\n\n        this._isTransitioning = false;\n        EventHandler.trigger(this._element, EVENT_SHOWN$3, {\n          relatedTarget\n        });\n      };\n\n      this._queueCallback(transitionComplete, this._dialog, isAnimated);\n    }\n\n    _setEscapeEvent() {\n      if (this._isShown) {\n        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {\n          if (this._config.keyboard && event.key === ESCAPE_KEY$1) {\n            event.preventDefault();\n            this.hide();\n          } else if (!this._config.keyboard && event.key === ESCAPE_KEY$1) {\n            this._triggerBackdropTransition();\n          }\n        });\n      } else {\n        EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);\n      }\n    }\n\n    _setResizeEvent() {\n      if (this._isShown) {\n        EventHandler.on(window, EVENT_RESIZE, () => this._adjustDialog());\n      } else {\n        EventHandler.off(window, EVENT_RESIZE);\n      }\n    }\n\n    _hideModal() {\n      this._element.style.display = 'none';\n\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._isTransitioning = false;\n\n      this._backdrop.hide(() => {\n        document.body.classList.remove(CLASS_NAME_OPEN);\n\n        this._resetAdjustments();\n\n        this._scrollBar.reset();\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN$3);\n      });\n    }\n\n    _showBackdrop(callback) {\n      EventHandler.on(this._element, EVENT_CLICK_DISMISS, event => {\n        if (this._ignoreBackdropClick) {\n          this._ignoreBackdropClick = false;\n          return;\n        }\n\n        if (event.target !== event.currentTarget) {\n          return;\n        }\n\n        if (this._config.backdrop === true) {\n          this.hide();\n        } else if (this._config.backdrop === 'static') {\n          this._triggerBackdropTransition();\n        }\n      });\n\n      this._backdrop.show(callback);\n    }\n\n    _isAnimated() {\n      return this._element.classList.contains(CLASS_NAME_FADE$3);\n    }\n\n    _triggerBackdropTransition() {\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      const {\n        classList,\n        scrollHeight,\n        style\n      } = this._element;\n      const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed\n\n      if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {\n        return;\n      }\n\n      if (!isModalOverflowing) {\n        style.overflowY = 'hidden';\n      }\n\n      classList.add(CLASS_NAME_STATIC);\n\n      this._queueCallback(() => {\n        classList.remove(CLASS_NAME_STATIC);\n\n        if (!isModalOverflowing) {\n          this._queueCallback(() => {\n            style.overflowY = '';\n          }, this._dialog);\n        }\n      }, this._dialog);\n\n      this._element.focus();\n    } // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n\n\n    _adjustDialog() {\n      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      const scrollbarWidth = this._scrollBar.getWidth();\n\n      const isBodyOverflowing = scrollbarWidth > 0;\n\n      if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {\n        this._element.style.paddingLeft = `${scrollbarWidth}px`;\n      }\n\n      if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {\n        this._element.style.paddingRight = `${scrollbarWidth}px`;\n      }\n    }\n\n    _resetAdjustments() {\n      this._element.style.paddingLeft = '';\n      this._element.style.paddingRight = '';\n    } // Static\n\n\n    static jQueryInterface(config, relatedTarget) {\n      return this.each(function () {\n        const data = Modal.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](relatedTarget);\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n    const target = getElementFromSelector(this);\n\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    EventHandler.one(target, EVENT_SHOW$3, showEvent => {\n      if (showEvent.defaultPrevented) {\n        // only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      EventHandler.one(target, EVENT_HIDDEN$3, () => {\n        if (isVisible(this)) {\n          this.focus();\n        }\n      });\n    }); // avoid conflict when clicking moddal toggler while another one is open\n\n    const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n\n    if (allReadyOpen) {\n      Modal.getInstance(allReadyOpen).hide();\n    }\n\n    const data = Modal.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  enableDismissTrigger(Modal);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Modal to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Modal);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): offcanvas.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$5 = 'offcanvas';\n  const DATA_KEY$5 = 'bs.offcanvas';\n  const EVENT_KEY$5 = `.${DATA_KEY$5}`;\n  const DATA_API_KEY$2 = '.data-api';\n  const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$5}${DATA_API_KEY$2}`;\n  const ESCAPE_KEY = 'Escape';\n  const Default$4 = {\n    backdrop: true,\n    keyboard: true,\n    scroll: false\n  };\n  const DefaultType$4 = {\n    backdrop: 'boolean',\n    keyboard: 'boolean',\n    scroll: 'boolean'\n  };\n  const CLASS_NAME_SHOW$3 = 'show';\n  const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\n  const OPEN_SELECTOR = '.offcanvas.show';\n  const EVENT_SHOW$2 = `show${EVENT_KEY$5}`;\n  const EVENT_SHOWN$2 = `shown${EVENT_KEY$5}`;\n  const EVENT_HIDE$2 = `hide${EVENT_KEY$5}`;\n  const EVENT_HIDDEN$2 = `hidden${EVENT_KEY$5}`;\n  const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$5}${DATA_API_KEY$2}`;\n  const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$5}`;\n  const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Offcanvas extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._config = this._getConfig(config);\n      this._isShown = false;\n      this._backdrop = this._initializeBackDrop();\n      this._focustrap = this._initializeFocusTrap();\n\n      this._addEventListeners();\n    } // Getters\n\n\n    static get NAME() {\n      return NAME$5;\n    }\n\n    static get Default() {\n      return Default$4;\n    } // Public\n\n\n    toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    }\n\n    show(relatedTarget) {\n      if (this._isShown) {\n        return;\n      }\n\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {\n        relatedTarget\n      });\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._isShown = true;\n      this._element.style.visibility = 'visible';\n\n      this._backdrop.show();\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().hide();\n      }\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      this._element.classList.add(CLASS_NAME_SHOW$3);\n\n      const completeCallBack = () => {\n        if (!this._config.scroll) {\n          this._focustrap.activate();\n        }\n\n        EventHandler.trigger(this._element, EVENT_SHOWN$2, {\n          relatedTarget\n        });\n      };\n\n      this._queueCallback(completeCallBack, this._element, true);\n    }\n\n    hide() {\n      if (!this._isShown) {\n        return;\n      }\n\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._focustrap.deactivate();\n\n      this._element.blur();\n\n      this._isShown = false;\n\n      this._element.classList.remove(CLASS_NAME_SHOW$3);\n\n      this._backdrop.hide();\n\n      const completeCallback = () => {\n        this._element.setAttribute('aria-hidden', true);\n\n        this._element.removeAttribute('aria-modal');\n\n        this._element.removeAttribute('role');\n\n        this._element.style.visibility = 'hidden';\n\n        if (!this._config.scroll) {\n          new ScrollBarHelper().reset();\n        }\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN$2);\n      };\n\n      this._queueCallback(completeCallback, this._element, true);\n    }\n\n    dispose() {\n      this._backdrop.dispose();\n\n      this._focustrap.deactivate();\n\n      super.dispose();\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$4,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' ? config : {})\n      };\n      typeCheckConfig(NAME$5, config, DefaultType$4);\n      return config;\n    }\n\n    _initializeBackDrop() {\n      return new Backdrop({\n        className: CLASS_NAME_BACKDROP,\n        isVisible: this._config.backdrop,\n        isAnimated: true,\n        rootElement: this._element.parentNode,\n        clickCallback: () => this.hide()\n      });\n    }\n\n    _initializeFocusTrap() {\n      return new FocusTrap({\n        trapElement: this._element\n      });\n    }\n\n    _addEventListeners() {\n      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n        if (this._config.keyboard && event.key === ESCAPE_KEY) {\n          this.hide();\n        }\n      });\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Offcanvas.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n    const target = getElementFromSelector(this);\n\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN$2, () => {\n      // focus on trigger when it is closed\n      if (isVisible(this)) {\n        this.focus();\n      }\n    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open\n\n    const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n\n    if (allReadyOpen && allReadyOpen !== target) {\n      Offcanvas.getInstance(allReadyOpen).hide();\n    }\n\n    const data = Offcanvas.getOrCreateInstance(target);\n    data.toggle(this);\n  });\n  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => SelectorEngine.find(OPEN_SELECTOR).forEach(el => Offcanvas.getOrCreateInstance(el).show()));\n  enableDismissTrigger(Offcanvas);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   */\n\n  defineJQueryPlugin(Offcanvas);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\n  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  const DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  const allowedAttribute = (attribute, allowedAttributeList) => {\n    const attributeName = attribute.nodeName.toLowerCase();\n\n    if (allowedAttributeList.includes(attributeName)) {\n      if (uriAttributes.has(attributeName)) {\n        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n      }\n\n      return true;\n    }\n\n    const regExp = allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp); // Check if a regular expression validates the attribute.\n\n    for (let i = 0, len = regExp.length; i < len; i++) {\n      if (regExp[i].test(attributeName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const DefaultAllowlist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n  function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {\n    if (!unsafeHtml.length) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml);\n    }\n\n    const domParser = new window.DOMParser();\n    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));\n\n    for (let i = 0, len = elements.length; i < len; i++) {\n      const element = elements[i];\n      const elementName = element.nodeName.toLowerCase();\n\n      if (!Object.keys(allowList).includes(elementName)) {\n        element.remove();\n        continue;\n      }\n\n      const attributeList = [].concat(...element.attributes);\n      const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n      attributeList.forEach(attribute => {\n        if (!allowedAttribute(attribute, allowedAttributes)) {\n          element.removeAttribute(attribute.nodeName);\n        }\n      });\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): tooltip.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$4 = 'tooltip';\n  const DATA_KEY$4 = 'bs.tooltip';\n  const EVENT_KEY$4 = `.${DATA_KEY$4}`;\n  const CLASS_PREFIX$1 = 'bs-tooltip';\n  const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\n  const DefaultType$3 = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(array|string|function)',\n    container: '(string|element|boolean)',\n    fallbackPlacements: 'array',\n    boundary: '(string|element)',\n    customClass: '(string|function)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    allowList: 'object',\n    popperConfig: '(null|object|function)'\n  };\n  const AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: isRTL() ? 'left' : 'right',\n    BOTTOM: 'bottom',\n    LEFT: isRTL() ? 'right' : 'left'\n  };\n  const Default$3 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: [0, 0],\n    container: false,\n    fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n    boundary: 'clippingParents',\n    customClass: '',\n    sanitize: true,\n    sanitizeFn: null,\n    allowList: DefaultAllowlist,\n    popperConfig: null\n  };\n  const Event$2 = {\n    HIDE: `hide${EVENT_KEY$4}`,\n    HIDDEN: `hidden${EVENT_KEY$4}`,\n    SHOW: `show${EVENT_KEY$4}`,\n    SHOWN: `shown${EVENT_KEY$4}`,\n    INSERTED: `inserted${EVENT_KEY$4}`,\n    CLICK: `click${EVENT_KEY$4}`,\n    FOCUSIN: `focusin${EVENT_KEY$4}`,\n    FOCUSOUT: `focusout${EVENT_KEY$4}`,\n    MOUSEENTER: `mouseenter${EVENT_KEY$4}`,\n    MOUSELEAVE: `mouseleave${EVENT_KEY$4}`\n  };\n  const CLASS_NAME_FADE$2 = 'fade';\n  const CLASS_NAME_MODAL = 'modal';\n  const CLASS_NAME_SHOW$2 = 'show';\n  const HOVER_STATE_SHOW = 'show';\n  const HOVER_STATE_OUT = 'out';\n  const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;\n  const EVENT_MODAL_HIDE = 'hide.bs.modal';\n  const TRIGGER_HOVER = 'hover';\n  const TRIGGER_FOCUS = 'focus';\n  const TRIGGER_CLICK = 'click';\n  const TRIGGER_MANUAL = 'manual';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Tooltip extends BaseComponent {\n    constructor(element, config) {\n      if (typeof Popper__namespace === 'undefined') {\n        throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n      }\n\n      super(element); // private\n\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._popper = null; // Protected\n\n      this._config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n    } // Getters\n\n\n    static get Default() {\n      return Default$3;\n    }\n\n    static get NAME() {\n      return NAME$4;\n    }\n\n    static get Event() {\n      return Event$2;\n    }\n\n    static get DefaultType() {\n      return DefaultType$3;\n    } // Public\n\n\n    enable() {\n      this._isEnabled = true;\n    }\n\n    disable() {\n      this._isEnabled = false;\n    }\n\n    toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    }\n\n    toggle(event) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (event) {\n        const context = this._initializeOnDelegatedTarget(event);\n\n        context._activeTrigger.click = !context._activeTrigger.click;\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context);\n        } else {\n          context._leave(null, context);\n        }\n      } else {\n        if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {\n          this._leave(null, this);\n\n          return;\n        }\n\n        this._enter(null, this);\n      }\n    }\n\n    dispose() {\n      clearTimeout(this._timeout);\n      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n      if (this.tip) {\n        this.tip.remove();\n      }\n\n      this._disposePopper();\n\n      super.dispose();\n    }\n\n    show() {\n      if (this._element.style.display === 'none') {\n        throw new Error('Please use show on visible elements');\n      }\n\n      if (!(this.isWithContent() && this._isEnabled)) {\n        return;\n      }\n\n      const showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);\n      const shadowRoot = findShadowRoot(this._element);\n      const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);\n\n      if (showEvent.defaultPrevented || !isInTheDom) {\n        return;\n      } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`\n      // This will be removed later in favor of a `setContent` method\n\n\n      if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {\n        this._disposePopper();\n\n        this.tip.remove();\n        this.tip = null;\n      }\n\n      const tip = this.getTipElement();\n      const tipId = getUID(this.constructor.NAME);\n      tip.setAttribute('id', tipId);\n\n      this._element.setAttribute('aria-describedby', tipId);\n\n      if (this._config.animation) {\n        tip.classList.add(CLASS_NAME_FADE$2);\n      }\n\n      const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;\n\n      const attachment = this._getAttachment(placement);\n\n      this._addAttachmentClass(attachment);\n\n      const {\n        container\n      } = this._config;\n      Data.set(tip, this.constructor.DATA_KEY, this);\n\n      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n        container.append(tip);\n        EventHandler.trigger(this._element, this.constructor.Event.INSERTED);\n      }\n\n      if (this._popper) {\n        this._popper.update();\n      } else {\n        this._popper = Popper__namespace.createPopper(this._element, tip, this._getPopperConfig(attachment));\n      }\n\n      tip.classList.add(CLASS_NAME_SHOW$2);\n\n      const customClass = this._resolvePossibleFunction(this._config.customClass);\n\n      if (customClass) {\n        tip.classList.add(...customClass.split(' '));\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement) {\n        [].concat(...document.body.children).forEach(element => {\n          EventHandler.on(element, 'mouseover', noop);\n        });\n      }\n\n      const complete = () => {\n        const prevHoverState = this._hoverState;\n        this._hoverState = null;\n        EventHandler.trigger(this._element, this.constructor.Event.SHOWN);\n\n        if (prevHoverState === HOVER_STATE_OUT) {\n          this._leave(null, this);\n        }\n      };\n\n      const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n      this._queueCallback(complete, this.tip, isAnimated);\n    }\n\n    hide() {\n      if (!this._popper) {\n        return;\n      }\n\n      const tip = this.getTipElement();\n\n      const complete = () => {\n        if (this._isWithActiveTrigger()) {\n          return;\n        }\n\n        if (this._hoverState !== HOVER_STATE_SHOW) {\n          tip.remove();\n        }\n\n        this._cleanTipClass();\n\n        this._element.removeAttribute('aria-describedby');\n\n        EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);\n\n        this._disposePopper();\n      };\n\n      const hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n      if ('ontouchstart' in document.documentElement) {\n        [].concat(...document.body.children).forEach(element => EventHandler.off(element, 'mouseover', noop));\n      }\n\n      this._activeTrigger[TRIGGER_CLICK] = false;\n      this._activeTrigger[TRIGGER_FOCUS] = false;\n      this._activeTrigger[TRIGGER_HOVER] = false;\n      const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);\n\n      this._queueCallback(complete, this.tip, isAnimated);\n\n      this._hoverState = '';\n    }\n\n    update() {\n      if (this._popper !== null) {\n        this._popper.update();\n      }\n    } // Protected\n\n\n    isWithContent() {\n      return Boolean(this.getTitle());\n    }\n\n    getTipElement() {\n      if (this.tip) {\n        return this.tip;\n      }\n\n      const element = document.createElement('div');\n      element.innerHTML = this._config.template;\n      const tip = element.children[0];\n      this.setContent(tip);\n      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n      this.tip = tip;\n      return this.tip;\n    }\n\n    setContent(tip) {\n      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);\n    }\n\n    _sanitizeAndSetContent(template, content, selector) {\n      const templateElement = SelectorEngine.findOne(selector, template);\n\n      if (!content && templateElement) {\n        templateElement.remove();\n        return;\n      } // we use append for html objects to maintain js events\n\n\n      this.setElementContent(templateElement, content);\n    }\n\n    setElementContent(element, content) {\n      if (element === null) {\n        return;\n      }\n\n      if (isElement(content)) {\n        content = getElement(content); // content is a DOM node or a jQuery\n\n        if (this._config.html) {\n          if (content.parentNode !== element) {\n            element.innerHTML = '';\n            element.append(content);\n          }\n        } else {\n          element.textContent = content.textContent;\n        }\n\n        return;\n      }\n\n      if (this._config.html) {\n        if (this._config.sanitize) {\n          content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);\n        }\n\n        element.innerHTML = content;\n      } else {\n        element.textContent = content;\n      }\n    }\n\n    getTitle() {\n      const title = this._element.getAttribute('data-bs-original-title') || this._config.title;\n\n      return this._resolvePossibleFunction(title);\n    }\n\n    updateAttachment(attachment) {\n      if (attachment === 'right') {\n        return 'end';\n      }\n\n      if (attachment === 'left') {\n        return 'start';\n      }\n\n      return attachment;\n    } // Private\n\n\n    _initializeOnDelegatedTarget(event, context) {\n      return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n    }\n\n    _getOffset() {\n      const {\n        offset\n      } = this._config;\n\n      if (typeof offset === 'string') {\n        return offset.split(',').map(val => Number.parseInt(val, 10));\n      }\n\n      if (typeof offset === 'function') {\n        return popperData => offset(popperData, this._element);\n      }\n\n      return offset;\n    }\n\n    _resolvePossibleFunction(content) {\n      return typeof content === 'function' ? content.call(this._element) : content;\n    }\n\n    _getPopperConfig(attachment) {\n      const defaultBsPopperConfig = {\n        placement: attachment,\n        modifiers: [{\n          name: 'flip',\n          options: {\n            fallbackPlacements: this._config.fallbackPlacements\n          }\n        }, {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        }, {\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        }, {\n          name: 'arrow',\n          options: {\n            element: `.${this.constructor.NAME}-arrow`\n          }\n        }, {\n          name: 'onChange',\n          enabled: true,\n          phase: 'afterWrite',\n          fn: data => this._handlePopperPlacementChange(data)\n        }],\n        onFirstUpdate: data => {\n          if (data.options.placement !== data.placement) {\n            this._handlePopperPlacementChange(data);\n          }\n        }\n      };\n      return { ...defaultBsPopperConfig,\n        ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)\n      };\n    }\n\n    _addAttachmentClass(attachment) {\n      this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);\n    }\n\n    _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    }\n\n    _setListeners() {\n      const triggers = this._config.trigger.split(' ');\n\n      triggers.forEach(trigger => {\n        if (trigger === 'click') {\n          EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, event => this.toggle(event));\n        } else if (trigger !== TRIGGER_MANUAL) {\n          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;\n          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n          EventHandler.on(this._element, eventIn, this._config.selector, event => this._enter(event));\n          EventHandler.on(this._element, eventOut, this._config.selector, event => this._leave(event));\n        }\n      });\n\n      this._hideModalHandler = () => {\n        if (this._element) {\n          this.hide();\n        }\n      };\n\n      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n\n      if (this._config.selector) {\n        this._config = { ...this._config,\n          trigger: 'manual',\n          selector: ''\n        };\n      } else {\n        this._fixTitle();\n      }\n    }\n\n    _fixTitle() {\n      const title = this._element.getAttribute('title');\n\n      const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');\n\n      if (title || originalTitleType !== 'string') {\n        this._element.setAttribute('data-bs-original-title', title || '');\n\n        if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {\n          this._element.setAttribute('aria-label', title);\n        }\n\n        this._element.setAttribute('title', '');\n      }\n    }\n\n    _enter(event, context) {\n      context = this._initializeOnDelegatedTarget(event, context);\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n      }\n\n      if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {\n        context._hoverState = HOVER_STATE_SHOW;\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_SHOW;\n\n      if (!context._config.delay || !context._config.delay.show) {\n        context.show();\n        return;\n      }\n\n      context._timeout = setTimeout(() => {\n        if (context._hoverState === HOVER_STATE_SHOW) {\n          context.show();\n        }\n      }, context._config.delay.show);\n    }\n\n    _leave(event, context) {\n      context = this._initializeOnDelegatedTarget(event, context);\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_OUT;\n\n      if (!context._config.delay || !context._config.delay.hide) {\n        context.hide();\n        return;\n      }\n\n      context._timeout = setTimeout(() => {\n        if (context._hoverState === HOVER_STATE_OUT) {\n          context.hide();\n        }\n      }, context._config.delay.hide);\n    }\n\n    _isWithActiveTrigger() {\n      for (const trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    _getConfig(config) {\n      const dataAttributes = Manipulator.getDataAttributes(this._element);\n      Object.keys(dataAttributes).forEach(dataAttr => {\n        if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {\n          delete dataAttributes[dataAttr];\n        }\n      });\n      config = { ...this.constructor.Default,\n        ...dataAttributes,\n        ...(typeof config === 'object' && config ? config : {})\n      };\n      config.container = config.container === false ? document.body : getElement(config.container);\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString();\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString();\n      }\n\n      typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n\n      if (config.sanitize) {\n        config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);\n      }\n\n      return config;\n    }\n\n    _getDelegateConfig() {\n      const config = {};\n\n      for (const key in this._config) {\n        if (this.constructor.Default[key] !== this._config[key]) {\n          config[key] = this._config[key];\n        }\n      } // In the future can be replaced with:\n      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n      // `Object.fromEntries(keysWithDifferentValues)`\n\n\n      return config;\n    }\n\n    _cleanTipClass() {\n      const tip = this.getTipElement();\n      const basicClassPrefixRegex = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, 'g');\n      const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));\n      }\n    }\n\n    _getBasicClassPrefix() {\n      return CLASS_PREFIX$1;\n    }\n\n    _handlePopperPlacementChange(popperData) {\n      const {\n        state\n      } = popperData;\n\n      if (!state) {\n        return;\n      }\n\n      this.tip = state.elements.popper;\n\n      this._cleanTipClass();\n\n      this._addAttachmentClass(this._getAttachment(state.placement));\n    }\n\n    _disposePopper() {\n      if (this._popper) {\n        this._popper.destroy();\n\n        this._popper = null;\n      }\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Tooltip.getOrCreateInstance(this, config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Tooltip to jQuery only if jQuery is present\n   */\n\n\n  defineJQueryPlugin(Tooltip);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): popover.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$3 = 'popover';\n  const DATA_KEY$3 = 'bs.popover';\n  const EVENT_KEY$3 = `.${DATA_KEY$3}`;\n  const CLASS_PREFIX = 'bs-popover';\n  const Default$2 = { ...Tooltip.Default,\n    placement: 'right',\n    offset: [0, 8],\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>'\n  };\n  const DefaultType$2 = { ...Tooltip.DefaultType,\n    content: '(string|element|function)'\n  };\n  const Event$1 = {\n    HIDE: `hide${EVENT_KEY$3}`,\n    HIDDEN: `hidden${EVENT_KEY$3}`,\n    SHOW: `show${EVENT_KEY$3}`,\n    SHOWN: `shown${EVENT_KEY$3}`,\n    INSERTED: `inserted${EVENT_KEY$3}`,\n    CLICK: `click${EVENT_KEY$3}`,\n    FOCUSIN: `focusin${EVENT_KEY$3}`,\n    FOCUSOUT: `focusout${EVENT_KEY$3}`,\n    MOUSEENTER: `mouseenter${EVENT_KEY$3}`,\n    MOUSELEAVE: `mouseleave${EVENT_KEY$3}`\n  };\n  const SELECTOR_TITLE = '.popover-header';\n  const SELECTOR_CONTENT = '.popover-body';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Popover extends Tooltip {\n    // Getters\n    static get Default() {\n      return Default$2;\n    }\n\n    static get NAME() {\n      return NAME$3;\n    }\n\n    static get Event() {\n      return Event$1;\n    }\n\n    static get DefaultType() {\n      return DefaultType$2;\n    } // Overrides\n\n\n    isWithContent() {\n      return this.getTitle() || this._getContent();\n    }\n\n    setContent(tip) {\n      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);\n\n      this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);\n    } // Private\n\n\n    _getContent() {\n      return this._resolvePossibleFunction(this._config.content);\n    }\n\n    _getBasicClassPrefix() {\n      return CLASS_PREFIX;\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Popover.getOrCreateInstance(this, config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Popover to jQuery only if jQuery is present\n   */\n\n\n  defineJQueryPlugin(Popover);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): scrollspy.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$2 = 'scrollspy';\n  const DATA_KEY$2 = 'bs.scrollspy';\n  const EVENT_KEY$2 = `.${DATA_KEY$2}`;\n  const DATA_API_KEY$1 = '.data-api';\n  const Default$1 = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n  const DefaultType$1 = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n  const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;\n  const EVENT_SCROLL = `scroll${EVENT_KEY$2}`;\n  const EVENT_LOAD_DATA_API = `load${EVENT_KEY$2}${DATA_API_KEY$1}`;\n  const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  const CLASS_NAME_ACTIVE$1 = 'active';\n  const SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n  const SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\n  const SELECTOR_NAV_LINKS = '.nav-link';\n  const SELECTOR_NAV_ITEMS = '.nav-item';\n  const SELECTOR_LIST_ITEMS = '.list-group-item';\n  const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}, .${CLASS_NAME_DROPDOWN_ITEM}`;\n  const SELECTOR_DROPDOWN$1 = '.dropdown';\n  const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  const METHOD_OFFSET = 'offset';\n  const METHOD_POSITION = 'position';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class ScrollSpy extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;\n      this._config = this._getConfig(config);\n      this._offsets = [];\n      this._targets = [];\n      this._activeTarget = null;\n      this._scrollHeight = 0;\n      EventHandler.on(this._scrollElement, EVENT_SCROLL, () => this._process());\n      this.refresh();\n\n      this._process();\n    } // Getters\n\n\n    static get Default() {\n      return Default$1;\n    }\n\n    static get NAME() {\n      return NAME$2;\n    } // Public\n\n\n    refresh() {\n      const autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n      const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n      const offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n      this._offsets = [];\n      this._targets = [];\n      this._scrollHeight = this._getScrollHeight();\n      const targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);\n      targets.map(element => {\n        const targetSelector = getSelectorFromElement(element);\n        const target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;\n\n        if (target) {\n          const targetBCR = target.getBoundingClientRect();\n\n          if (targetBCR.width || targetBCR.height) {\n            return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];\n          }\n        }\n\n        return null;\n      }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {\n        this._offsets.push(item[0]);\n\n        this._targets.push(item[1]);\n      });\n    }\n\n    dispose() {\n      EventHandler.off(this._scrollElement, EVENT_KEY$2);\n      super.dispose();\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default$1,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' && config ? config : {})\n      };\n      config.target = getElement(config.target) || document.documentElement;\n      typeCheckConfig(NAME$2, config, DefaultType$1);\n      return config;\n    }\n\n    _getScrollTop() {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }\n\n    _getScrollHeight() {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n\n    _getOffsetHeight() {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }\n\n    _process() {\n      const scrollTop = this._getScrollTop() + this._config.offset;\n\n      const scrollHeight = this._getScrollHeight();\n\n      const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n      if (this._scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        const target = this._targets[this._targets.length - 1];\n\n        if (this._activeTarget !== target) {\n          this._activate(target);\n        }\n\n        return;\n      }\n\n      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n        this._activeTarget = null;\n\n        this._clear();\n\n        return;\n      }\n\n      for (let i = this._offsets.length; i--;) {\n        const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this._activate(this._targets[i]);\n        }\n      }\n    }\n\n    _activate(target) {\n      this._activeTarget = target;\n\n      this._clear();\n\n      const queries = SELECTOR_LINK_ITEMS.split(',').map(selector => `${selector}[data-bs-target=\"${target}\"],${selector}[href=\"${target}\"]`);\n      const link = SelectorEngine.findOne(queries.join(','), this._config.target);\n      link.classList.add(CLASS_NAME_ACTIVE$1);\n\n      if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);\n      } else {\n        SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(listGroup => {\n          // Set triggered links parents as active\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n          SelectorEngine.prev(listGroup, `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1)); // Handle special case when .nav-link is inside .nav-item\n\n          SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(navItem => {\n            SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1));\n          });\n        });\n      }\n\n      EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {\n        relatedTarget: target\n      });\n    }\n\n    _clear() {\n      SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(node => node.classList.contains(CLASS_NAME_ACTIVE$1)).forEach(node => node.classList.remove(CLASS_NAME_ACTIVE$1));\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = ScrollSpy.getOrCreateInstance(this, config);\n\n        if (typeof config !== 'string') {\n          return;\n        }\n\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n    SelectorEngine.find(SELECTOR_DATA_SPY).forEach(spy => new ScrollSpy(spy));\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .ScrollSpy to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(ScrollSpy);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): tab.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME$1 = 'tab';\n  const DATA_KEY$1 = 'bs.tab';\n  const EVENT_KEY$1 = `.${DATA_KEY$1}`;\n  const DATA_API_KEY = '.data-api';\n  const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;\n  const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;\n  const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;\n  const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;\n  const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}${DATA_API_KEY}`;\n  const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n  const CLASS_NAME_ACTIVE = 'active';\n  const CLASS_NAME_FADE$1 = 'fade';\n  const CLASS_NAME_SHOW$1 = 'show';\n  const SELECTOR_DROPDOWN = '.dropdown';\n  const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  const SELECTOR_ACTIVE = '.active';\n  const SELECTOR_ACTIVE_UL = ':scope > li > .active';\n  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]';\n  const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  const SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Tab extends BaseComponent {\n    // Getters\n    static get NAME() {\n      return NAME$1;\n    } // Public\n\n\n    show() {\n      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n        return;\n      }\n\n      let previous;\n      const target = getElementFromSelector(this._element);\n\n      const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);\n\n      if (listElement) {\n        const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;\n        previous = SelectorEngine.find(itemSelector, listElement);\n        previous = previous[previous.length - 1];\n      }\n\n      const hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {\n        relatedTarget: this._element\n      }) : null;\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {\n        relatedTarget: previous\n      });\n\n      if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {\n        return;\n      }\n\n      this._activate(this._element, listElement);\n\n      const complete = () => {\n        EventHandler.trigger(previous, EVENT_HIDDEN$1, {\n          relatedTarget: this._element\n        });\n        EventHandler.trigger(this._element, EVENT_SHOWN$1, {\n          relatedTarget: previous\n        });\n      };\n\n      if (target) {\n        this._activate(target, target.parentNode, complete);\n      } else {\n        complete();\n      }\n    } // Private\n\n\n    _activate(element, container, callback) {\n      const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);\n      const active = activeElements[0];\n      const isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);\n\n      const complete = () => this._transitionComplete(element, active, callback);\n\n      if (active && isTransitioning) {\n        active.classList.remove(CLASS_NAME_SHOW$1);\n\n        this._queueCallback(complete, element, true);\n      } else {\n        complete();\n      }\n    }\n\n    _transitionComplete(element, active, callback) {\n      if (active) {\n        active.classList.remove(CLASS_NAME_ACTIVE);\n        const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);\n\n        if (dropdownChild) {\n          dropdownChild.classList.remove(CLASS_NAME_ACTIVE);\n        }\n\n        if (active.getAttribute('role') === 'tab') {\n          active.setAttribute('aria-selected', false);\n        }\n      }\n\n      element.classList.add(CLASS_NAME_ACTIVE);\n\n      if (element.getAttribute('role') === 'tab') {\n        element.setAttribute('aria-selected', true);\n      }\n\n      reflow(element);\n\n      if (element.classList.contains(CLASS_NAME_FADE$1)) {\n        element.classList.add(CLASS_NAME_SHOW$1);\n      }\n\n      let parent = element.parentNode;\n\n      if (parent && parent.nodeName === 'LI') {\n        parent = parent.parentNode;\n      }\n\n      if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {\n        const dropdownElement = element.closest(SELECTOR_DROPDOWN);\n\n        if (dropdownElement) {\n          SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(dropdown => dropdown.classList.add(CLASS_NAME_ACTIVE));\n        }\n\n        element.setAttribute('aria-expanded', true);\n      }\n\n      if (callback) {\n        callback();\n      }\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Tab.getOrCreateInstance(this);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config]();\n        }\n      });\n    }\n\n  }\n  /**\n   * ------------------------------------------------------------------------\n   * Data Api implementation\n   * ------------------------------------------------------------------------\n   */\n\n\n  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault();\n    }\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const data = Tab.getOrCreateInstance(this);\n    data.show();\n  });\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Tab to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Tab);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): toast.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const NAME = 'toast';\n  const DATA_KEY = 'bs.toast';\n  const EVENT_KEY = `.${DATA_KEY}`;\n  const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;\n  const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;\n  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\n  const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;\n  const EVENT_HIDE = `hide${EVENT_KEY}`;\n  const EVENT_HIDDEN = `hidden${EVENT_KEY}`;\n  const EVENT_SHOW = `show${EVENT_KEY}`;\n  const EVENT_SHOWN = `shown${EVENT_KEY}`;\n  const CLASS_NAME_FADE = 'fade';\n  const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n\n  const CLASS_NAME_SHOW = 'show';\n  const CLASS_NAME_SHOWING = 'showing';\n  const DefaultType = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  const Default = {\n    animation: true,\n    autohide: true,\n    delay: 5000\n  };\n  /**\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  class Toast extends BaseComponent {\n    constructor(element, config) {\n      super(element);\n      this._config = this._getConfig(config);\n      this._timeout = null;\n      this._hasMouseInteraction = false;\n      this._hasKeyboardInteraction = false;\n\n      this._setListeners();\n    } // Getters\n\n\n    static get DefaultType() {\n      return DefaultType;\n    }\n\n    static get Default() {\n      return Default;\n    }\n\n    static get NAME() {\n      return NAME;\n    } // Public\n\n\n    show() {\n      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n\n      if (showEvent.defaultPrevented) {\n        return;\n      }\n\n      this._clearTimeout();\n\n      if (this._config.animation) {\n        this._element.classList.add(CLASS_NAME_FADE);\n      }\n\n      const complete = () => {\n        this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        EventHandler.trigger(this._element, EVENT_SHOWN);\n\n        this._maybeScheduleHide();\n      };\n\n      this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n\n\n      reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_SHOW);\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      this._queueCallback(complete, this._element, this._config.animation);\n    }\n\n    hide() {\n      if (!this._element.classList.contains(CLASS_NAME_SHOW)) {\n        return;\n      }\n\n      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n\n      if (hideEvent.defaultPrevented) {\n        return;\n      }\n\n      const complete = () => {\n        this._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n\n\n        this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        this._element.classList.remove(CLASS_NAME_SHOW);\n\n        EventHandler.trigger(this._element, EVENT_HIDDEN);\n      };\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      this._queueCallback(complete, this._element, this._config.animation);\n    }\n\n    dispose() {\n      this._clearTimeout();\n\n      if (this._element.classList.contains(CLASS_NAME_SHOW)) {\n        this._element.classList.remove(CLASS_NAME_SHOW);\n      }\n\n      super.dispose();\n    } // Private\n\n\n    _getConfig(config) {\n      config = { ...Default,\n        ...Manipulator.getDataAttributes(this._element),\n        ...(typeof config === 'object' && config ? config : {})\n      };\n      typeCheckConfig(NAME, config, this.constructor.DefaultType);\n      return config;\n    }\n\n    _maybeScheduleHide() {\n      if (!this._config.autohide) {\n        return;\n      }\n\n      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n        return;\n      }\n\n      this._timeout = setTimeout(() => {\n        this.hide();\n      }, this._config.delay);\n    }\n\n    _onInteraction(event, isInteracting) {\n      switch (event.type) {\n        case 'mouseover':\n        case 'mouseout':\n          this._hasMouseInteraction = isInteracting;\n          break;\n\n        case 'focusin':\n        case 'focusout':\n          this._hasKeyboardInteraction = isInteracting;\n          break;\n      }\n\n      if (isInteracting) {\n        this._clearTimeout();\n\n        return;\n      }\n\n      const nextElement = event.relatedTarget;\n\n      if (this._element === nextElement || this._element.contains(nextElement)) {\n        return;\n      }\n\n      this._maybeScheduleHide();\n    }\n\n    _setListeners() {\n      EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));\n      EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));\n      EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));\n      EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));\n    }\n\n    _clearTimeout() {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n    } // Static\n\n\n    static jQueryInterface(config) {\n      return this.each(function () {\n        const data = Toast.getOrCreateInstance(this, config);\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(`No method named \"${config}\"`);\n          }\n\n          data[config](this);\n        }\n      });\n    }\n\n  }\n\n  enableDismissTrigger(Toast);\n  /**\n   * ------------------------------------------------------------------------\n   * jQuery\n   * ------------------------------------------------------------------------\n   * add .Toast to jQuery only if jQuery is present\n   */\n\n  defineJQueryPlugin(Toast);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.1.3): index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  const index_umd = {\n    Alert,\n    Button,\n    Carousel,\n    Collapse,\n    Dropdown,\n    Modal,\n    Offcanvas,\n    Popover,\n    ScrollSpy,\n    Tab,\n    Toast,\n    Tooltip\n  };\n\n  return index_umd;\n\n}));\n//# sourceMappingURL=bootstrap.js.map\n", "wavemaker-rn-codegen/style-docs/js/custom.js": "function onReady() {\n    var pageUrl = location.pathname.substring(location.pathname.indexOf('/widgets'))\n    $('li[data-url=\"'+ pageUrl +'\"] a').addClass('link-primary').closest('.nav-hidden').removeClass('nav-hidden');\n    $('.navigation-heading').click(function() {\n        $(this).parent().toggleClass('nav-hidden');\n    });\n}", "wavemaker-rn-codegen/scripts/build.js": "const fs = require('fs-extra');\nconst { merge } = require('lodash');\nconst execa = require('execa');\nconst projectDir = '.';\nconst buildDirectory = `${projectDir}/build`;\nconst yargs = require('yargs');\nconst { hideBin } = require('yargs/helpers');\n\nasync function clean() {\n    fs.removeSync(buildDirectory);\n    fs.mkdirpSync(buildDirectory);\n}\n\nasync function createPackageLock(path) {\n    await execa('npm', ['install', '--package-lock-only', '--ignore-scripts'], {\n        'cwd': path\n    });\n    const expoPackageJSON = fs.readJSONSync(`${path}/package-lock.json`);\n    Object.values(expoPackageJSON.packages || {}).map(v => {\n        delete v.resolved;\n    });\n    fs.writeJSONSync(`${path}/package-lock.json`, expoPackageJSON, {\n        spaces: 4\n    });\n    fs.writeJSONSync(`${path}/npm-shrinkwrap.json`, expoPackageJSON, {\n        spaces: 4\n    });\n}\n\nasync function generateRnApp(version) {\n    const templateDir = `${projectDir}/build/src/templates/project`;\n    const rnAppDir = `${projectDir}/dist/npm-packages/rn-app`;\n    if (fs.existsSync(rnAppDir)) {\n        fs.rmSync(rnAppDir, {\n            recursive: true\n        });\n    }\n    fs.mkdirpSync(`${rnAppDir}/web`);\n    fs.mkdirpSync(`${rnAppDir}/expo`);\n    fs.copyFileSync(`${projectDir}/dist/package.web.json`, `${rnAppDir}/web/package.json`);\n    fs.copyFileSync(`${templateDir}/package.json`, `${rnAppDir}/expo/package.json`);\n    const packageJson = fs.readJSONSync(`${rnAppDir}/expo/package.json`);\n    delete packageJson['dependencies']['@unimodules/react-native-adapter'];\n    delete packageJson['devDependencies']['esbuild'];\n    delete packageJson['devDependencies']['fs-extra'];\n    fs.writeFileSync(`${rnAppDir}/expo/package.json`, JSON.stringify(packageJson, null, 4));\n    console.log('Generating package-lock.json for expo.');\n    // generate package lock\n    await createPackageLock(`${rnAppDir}/expo`);\n    console.log('Generating yarn.lock for expo.');\n    // generate yarn lock\n    /*await execa('yarn', ['install', '--mode', 'update-lock-file'], {\n        'cwd': `${rnAppDir}/expo`\n    });*/\n    console.log('Generating package-lock.json for web.');\n    // generate package lock\n    await createPackageLock(`${rnAppDir}/web`);\n    fs.writeFileSync(`${rnAppDir}/package.json`, `\n        {\n            \"name\": \"@wavemaker/rn-app\",\n            \"version\": \"${version}\",\n            \"description\": \"This package contains package lock files for WaveMaker generated React Native app.\" \n        }`);\n    await execa('npm', ['pack'], {\n        'cwd': `${projectDir}/dist/npm-packages/rn-app`\n    });\n\n    fs.copySync(`${projectDir}/dist/npm-packages/rn-app/wavemaker-rn-app-${version}.tgz`, `${projectDir}/dist/npm-packages/wavemaker-rn-app-${version}.tgz`);\n}\n\nasync function compile() {\n    await execa(`${projectDir}/node_modules/.bin/tsc`, ['--project', `tsconfig.json`]);\n}\n\nasync function updatePackageVersion(packagePath, key, version) {\n    let content = fs.readFileSync(packagePath, 'utf8');\n    content = content.replace(new RegExp(`\"${key}\"\\\\s*:\\\\s*\"[^\"]*\"`), `\"${key}\": \"${version}\"`);\n    fs.writeFileSync(packagePath, content);\n}\n\nasync function copyResources() {\n    fs.copySync(`${projectDir}/src/templates`, `${projectDir}/build/src/templates`);\n    fs.copySync(`${projectDir}/scripts/post-build.js`, `${projectDir}/build/scripts/post-build.js`);\n    fs.copySync(`${projectDir}/package.json`, `${projectDir}/build/package.json`);\n}\n\nasync function generateCSSMeta() {\n    const { getAllCSSSelectorMeta } = require(`../build/src/theme/components/style-definition.provider.js`);\n    const meta = getAllCSSSelectorMeta();\n    fs.writeFileSync(`${projectDir}/style-docs/native-mobile-css-metadata.json`, JSON.stringify(meta.css2rn, null, 4));\n    fs.writeFileSync(`${projectDir}/src/templates/project/wavepulse/rn2css.json`, JSON.stringify(meta.rn2css, null, 4));\n}\n\nasync function build(codegenVersion, runtimeVersion) {\n    console.log(`Preparing for build in ${projectDir}`);\n    await clean();\n    console.log('cleaned the build directory');\n    await compile();\n    console.log('compiled successfully');\n    await copyResources();\n    console.log('copied resources');\n    updatePackageVersion(`${projectDir}/build/package.json`, 'version', codegenVersion);\n    await generateCSSMeta();\n    updatePackageVersion(`${projectDir}/build/src/templates/project/package.json`, '@wavemaker/app-rn-runtime', runtimeVersion || 'file:.yalc/@wavemaker/app-rn-runtime');\n    updatePackageVersion(`${projectDir}/build/src/templates/project/package.json`, '@wavemaker/variables', runtimeVersion || 'file:.yalc/@wavemaker/variables');\n    updatePackageVersion(`${projectDir}/build/src/templates/project/package.json`, '@wavemaker/rn-codegen', runtimeVersion || 'file:.yalc/@wavemaker/rn-codegen');\n    console.log('Build successful!!!');\n}\n\nasync function pushToLocalRepo() {\n    fs.mkdirpSync(`${projectDir}/dist`);\n    fs.writeFileSync(`${projectDir}/dist/new-build`, '' + Date.now);\n    await execa('yalc', ['publish' , '--no-sig', '--push'], {\n        'cwd': `${projectDir}/build`\n    });\n}\n\nasync function createWebPackageJSON() {\n    const templates = `${projectDir}/dist/npm-packages/rn-codegen/src/templates`;\n    const packageJSON = JSON.parse(fs.readFileSync(`${templates}/project/package.json`));\n    const webPackageJSON = JSON.parse(fs.readFileSync(`${templates}/package.web.json`));\n    const mergedJSON = JSON.stringify(merge(packageJSON, webPackageJSON), null, 4);\n    fs.writeFileSync(`${templates}/package.web.json`, mergedJSON);\n    fs.writeFileSync(`${projectDir}/dist/package.web.json`, mergedJSON);\n}\n\nasync function prepareNpmPackages(runtimeVersion) {\n    fs.copySync(`${projectDir}/build`, `${projectDir}/dist/npm-packages/rn-codegen`, {\n        filter: p => !p.startsWith('/node_modules/')\n    });\n    createWebPackageJSON();\n    // generate package lock\n    await createPackageLock(`${projectDir}/dist/npm-packages/rn-codegen`);\n    fs.copySync(`${projectDir}/dist/npm-packages/rn-codegen`, `${projectDir}/dist/npm-packages/package`, {\n        filter: p => !p.startsWith('/node_modules/')\n    });\n    await execa('tar', ['-czf', `dist/npm-packages/wavemaker-rn-codegen-${runtimeVersion}.tgz`, '-C', 'dist/npm-packages', 'package'], {\n        'cwd': `${projectDir}`\n    });\n}\n\nyargs(hideBin(process.argv)).command('build',\n    'to compile the project',\n    (yargs) => {\n        yargs.option('codegenVersion', {\n            describe: 'version number',\n            type: 'string',\n            default: '1.0.0-dev'\n        }).option('runtimeVersion', {\n            describe: 'version number',\n            type: 'string'\n        }).option('production', {\n            describe: 'to perform a production build',\n            type: 'boolean',\n            default: false\n        });;\n    }, (argv) => {\n        build(argv.codegenVersion, argv.runtimeVersion).then(() => {\n            if (argv.production) {\n                prepareNpmPackages(argv.runtimeVersion);\n            } else {\n                return pushToLocalRepo();\n            }\n        });\n    }).command('generate rn-app',\n        'to generate the rn-app project',\n        (yargs) => {\n            yargs.option('runtimeVersion', {\n                describe: 'version number',\n                type: 'string',\n                default: '1.0.0-dev'\n            });\n        }, (argv) => {\n            generateRnApp(argv.runtimeVersion);\n        }).showHelpOnFail().argv;\n\nmodule.exports = {build, prepareNpmPackages};\n", "wavemaker-rn-codegen/scripts/npm-publish.js": "const fs = require('fs');\nconst execa = require('execa');\nconst yargs = require('yargs');\nconst { build, prepareNpmPackages } = require('./build');\nconst { hideBin } = require('yargs/helpers');\n\nconst codegenDir = `${__dirname}/..`;\nconst runtimeDir = `${__dirname}/../../wavemaker-rn-runtime`; \nconst variablesDir = `${__dirname}/../../wavemaker-ui-variables`;\nconst execaOptions = {\n    stdin: process.stdin,\n    stdio: process.stdio,\n    stdout: process.stdout,\n    stderr: process.stderr\n}\n\nasync function buildRnRuntime() {\n    await execa('npm', ['run', 'build', '--', '--production=true'], {\n        ...execaOptions,\n        cwd: runtimeDir\n    });\n    console.log('********* BUILT RN RUNTIME *********');\n}\n\nasync function buildVariables() {\n    await execa('npm', ['run', 'build', '--', '--production=true'], {\n        ...execaOptions,\n        cwd: variablesDir\n    });\n    console.log('********* BUILT UI VARIABLES *********');\n}\n\nasync function publishVariablesPackage(version) {\n    const packageFolder = `${variablesDir}/dist/npm-packages/variables`;\n    const packageJSON = JSON.parse(fs.readFileSync(`${packageFolder}/package.json`));\n    packageJSON.version = version;\n    fs.writeFileSync(`${packageFolder}/package.json`, JSON.stringify(packageJSON, null, 2));\n    await execa('npm', ['publish', packageFolder, '--tag=dev'], {\n        ...execaOptions,\n        cwd: variablesDir\n    });\n    console.log(`********* PUBLISHED UI VARIABLES@${version} *********`);\n}\n\nasync function publishRuntimePackage(version) {\n    const packageFolder = `${runtimeDir}/dist/npm-packages/app-rn-runtime`;\n    const packageJSON = JSON.parse(fs.readFileSync(`${packageFolder}/package.json`));\n    packageJSON.version = version;\n    packageJSON.dependencies['@wavemaker/variables'] = version;\n    fs.writeFileSync(`${packageFolder}/package.json`, JSON.stringify(packageJSON, null, 2));\n    await execa('npm', ['publish', packageFolder, '--tag=dev'], {\n        ...execaOptions,\n        cwd: runtimeDir\n    });\n    console.log(`********* PUBLISHED RN RUNTIME@${version} *********`);\n}\n\nasync function buildRnCodgen(version) {\n    await build(version, version);\n    console.log('********* BUILT RN CODEGEN *********');\n}\n\nasync function publishCodegenPackage(version) {\n    await prepareNpmPackages();\n    const packageFolder = `${codegenDir}/dist/npm-packages/package`;\n    const packageJSON = JSON.parse(fs.readFileSync(`${packageFolder}/package.json`));\n    packageJSON.version = version;\n    fs.writeFileSync(`${packageFolder}/package.json`, JSON.stringify(packageJSON, null, 2));\n    await execa('npm', ['publish', packageFolder, '--tag=dev'], {\n        ...execaOptions,\n        cwd: codegenDir\n    });\n    console.log(`********* PUBLISHED RN CODEGEN@${version} *********`);\n}\n\nasync function createPatch(version) {\n    let script = fs.readFileSync(`${__dirname}/create-patch.js.template`, {\n        encoding: 'utf-8'\n    });\n    script = script.replace(/\\{\\{version\\}\\}/g, version);\n    const package = fs.readFileSync(`${__dirname}/../dist/package.web.json`, {\n        encoding: 'utf-8'\n    });\n    script = script.replace(/\\{\\{sample_app_package_json\\}\\}/g, package);\n    fs.writeFileSync(`${__dirname}/../dist/create-patch.js`, script, {\n        encoding: 'utf-8'\n    });\n}\n\n\nyargs(hideBin(process.argv)).command('publish', 'to publish a patch the project',\n    (yargs) => {},\n    async (argv) => {\n        const version = '11.8.5-patch.3';\n        if (version === 'noversion') {\n            console.log('please change version');\n            return;\n        }\n        await buildVariables(version);\n        await buildRnRuntime(version);\n        await buildRnCodgen(version);\n        await publishVariablesPackage(version);\n        await publishRuntimePackage(version);\n        await publishCodegenPackage(version);\n        await createPatch(version);\n    }).showHelpOnFail().argv;", "wavemaker-rn-codegen/scripts/post-build.js": "const fs = require('fs');\n\nasync function readAndReplaceFileContent(path, writeFn) {\n    const content = fs.readFileSync(path, 'utf-8');\n    return Promise.resolve().then(() => {    \n        return writeFn && writeFn(content);\n    }).then((modifiedContent) => {\n        if (modifiedContent !== undefined && modifiedContent !== null) {\n            fs.writeFileSync(path, modifiedContent);\n            return modifiedContent;\n        }\n        return content;\n    });\n}\n\n// Temporary patch to be removed; fix coming in future\nasync function patchCssToReactnative(){\n    let packagePath = `${__dirname}/../node_modules/css-to-react-native/index.js`;\n      if (fs.existsSync(packagePath)) {\n          await readAndReplaceFileContent(packagePath, (c) => {\n              if(c.includes('boxShadow: boxShadow,')){\n                  return c.replace('boxShadow: boxShadow,', '')\n              }\n              });\n          console.log('Patched css-to-react-native.')\n      }\n}\n\nfunction patch() {\n    patchCssToReactnative();\n}\n\npatch();", "wavemaker-rn-codegen/src/project.service.ts": "import axios from 'axios';\nimport fs from 'fs-extra';\n\nconst _decodeURIComponent = (str: string) => decodeURIComponent(str.replace(/\\+/g, ' '));\n\nexport interface PageInfo {\n    markup: string;\n    script: string;\n    styles: string;\n    variables: string;\n}\n\nexport interface PrefabInfo {\n    config: any;\n}\n\nexport interface PageConfig {\n    name: string;\n    type: string;\n    params: Array<string>;\n}\n\nexport interface ProjectService {\n    getServiceDefs(): Promise<string>;\n    getPackageJSONOverride(): Promise<any>;\n    getAppJs(): Promise<string>;\n    geti18NFiles(): Promise<string>;\n    getAppCss(): Promise<string>;\n    getAppThemeVariables(): Promise<string>;\n    getFormatters(): Promise<string>;\n    getAppVariables(): Promise<string>;\n    getAppJSON(): Promise<any>;\n    getRNConfig(): Promise<string>;\n    getPageConfigs():Promise<Array<PageConfig>>;\n    getPageInfo(pageName: string): Promise<PageInfo>;\n    getPrefabInfo(prefabName: string): Promise<PrefabInfo>;\n    getPrefabs(): Promise<string[]>;\n    getExpoPlugins(): Promise<string>;\n    getResources(): Promise<string>;\n    getFontConfig(): Promise<string>;\n    getPrefabProjectService(prefabName: string): ProjectService;\n    getThemes(): Promise<string[]>;\n    copyNpmPackages(dest: string): Promise<void>;\n}\n\nexport class RemoteProjectService implements ProjectService {\n    constructor(private appUrl = '') {\n\n    }\n\n    getServiceDefs(): Promise<string> {\n        return axios.get(this.appUrl + '/services/servicedefs').then(res => res.data);\n    }\n\n    getPackageJSONOverride(): Promise<any> {\n        return axios.get(this.appUrl + '/package.json').then(res => res.data, () => null);\n    }\n\n    getAppJs(): Promise<string> {\n        return axios.get(this.appUrl + '/app.js').then(res => res.data);\n    }\n\n    getAppCss(): Promise<string> {\n        return axios.get(this.appUrl + '/app.css').then(res => res.data);\n    }\n\n    getAppThemeVariables(): Promise<string> {\n        return axios.get(this.appUrl + '/app.theme.variables.js').then(res => res.data);\n    }\n\n    getFormatters(): Promise<string> {\n        return axios.get(this.appUrl + '/extensions/formatters.js').then(res => res.data);\n    }\n\n    getAppVariables(): Promise<string> {\n        return axios.get(this.appUrl + '/app.variables.json').then(res => res.data);\n    }\n\n    getAppJSON(): Promise<any> {\n        return axios.get(this.appUrl + '/app.json')\n            .catch(() => {})\n            .then(res => res && JSON.parse(res.data || '{}'));\n    }\n\n    getRNConfig(): Promise<string> {\n        return axios.get(this.appUrl + '/wm_rn_config.json').then(res => {\n            res.data.serverPath = this.appUrl;\n            return JSON.stringify(res.data);\n        });\n    }\n\n    getPrefabs() {\n        return Promise.all([]);\n    }\n\n    getPageConfigs():Promise<Array<PageConfig>> {\n        return axios.get(this.appUrl + '/pages/pages-config.json')\n            .then(res => res.data as Array<PageConfig>);\n    }\n\n    getPageInfo(pageName: string): Promise<PageInfo> {\n        return axios.get(this.appUrl + `/pages/${pageName}/page.min.json`)\n            .then(res =>  {\n                const data = res.data;\n                return {\n                    markup: _decodeURIComponent(data.markup),\n                    script: _decodeURIComponent(data.script),\n                    styles: _decodeURIComponent(data.styles),\n                    variables: _decodeURIComponent(data.variables)\n                };\n            });\n    }\n\n    getPrefabInfo(prefabName: string): Promise<PrefabInfo> {\n        const appUrl = this.appUrl.split('/app/prefabs')[0];\n        return axios.get(appUrl + `/app/prefabs/${prefabName}/config.json`)\n            .then(res => ({config : res.data}));\n    }\n\n    getResources() {\n        return Promise.resolve('');\n    }\n\n    getExpoPlugins() {\n        return Promise.resolve('');\n    }\n\n    getFontConfig() {\n        return axios.get(this.appUrl + `/font.config.js`).then(res => res.data);\n    }\n\n    getThemes() {\n        return Promise.resolve([`${__dirname}/../../../wavemaker-artifacts/default/themes/native-mobile/artifact`]);\n    }\n\n\n    geti18NFiles(): Promise<string> {\n        return Promise.resolve('');\n    }\n\n    getPrefabProjectService(prefabName: string) {\n        return new RemoteProjectService(`${this.appUrl.split('/app/prefabs')[0]}/app/prefabs/${prefabName}`);\n    }\n\n    copyNpmPackages(dest: string): Promise<void> {\n        return Promise.resolve();\n    }\n}\n\n\nexport class LocalProjectService implements ProjectService {\n    constructor(private path: string) {\n    }\n\n    readFile(path: string) {\n        return new Promise<string>((resolve, reject) => {\n            fs.readFile(path, {encoding: 'utf-8'}, (err, data) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(data.toString());\n                }\n            })\n        });\n    }\n\n    getServiceDefs(): Promise<string> {\n        return Promise.resolve('{}');\n    }\n\n    getAppJs(): Promise<string> {\n        return this.readFile(this.path + '/app.js');\n    }\n\n    getAppCss(): Promise<string> {\n        return this.readFile(this.path + '/app.css');\n    }\n\n    getAppVariables(): Promise<string> {\n        return this.readFile(this.path + '/app.variables.json')\n            .then(data => JSON.parse(data));\n    }\n\n    getAppThemeVariables(): Promise<string> {\n        return this.readFile(this.path + '/app.theme.variables.js');\n    }\n\n    getFormatters(): Promise<string> {\n        return this.readFile(this.path + '/extensions/formatters.js');\n    }\n\n    getAppJSON(): Promise<any> {\n        return this.readFile(this.path + '/app.json')\n            .catch(() => {})\n            .then(data => JSON.parse(data || '{}'));\n    }\n\n    getRNConfig(): Promise<string> {\n        return this.readFile(this.path + '/wm_rn_config.json');\n    }\n\n    getPageConfigs():Promise<Array<PageConfig>> {\n        return this.readFile(this.path + '/pages/pages-config.json')\n            .then(data => JSON.parse(data) as Array<PageConfig>);\n    }\n\n    getPageInfo(pageName: string): Promise<PageInfo> {\n        return Promise.resolve({\n            markup: fs.readFileSync(this.path + `/pages/${pageName}/${pageName}.html`, 'utf-8'),\n            script: fs.readFileSync(this.path + `/pages/${pageName}/${pageName}.js`, 'utf-8'),\n            styles: fs.readFileSync(this.path + `/pages/${pageName}/${pageName}.css`, 'utf-8'),\n            variables: fs.readFileSync(this.path + `/pages/${pageName}/${pageName}.variables.json`, 'utf-8')\n        });\n    }\n\n    getPrefabs() {\n        let prefabs = [] as string[];\n        const prefabDir = `${this.path}/WEB-INF/prefabs/`;\n        if (fs.existsSync(prefabDir)) {\n            prefabs = fs.readdirSync(prefabDir, {\n                withFileTypes: true\n            }).filter(f => f && f.isDirectory())\n            .map(f => f.name);\n        }\n        return Promise.all(prefabs);\n    }\n\n    getPrefabInfo(prefabName: string): Promise<PrefabInfo> {\n        const path = this.path.split('/WEB-INF')[0];\n        return Promise.resolve({\n            config: JSON.parse(fs.readFileSync(`${path}/WEB-INF/prefabs/${prefabName}/webapp/config.json`, 'utf-8') || '{}')\n        } as PrefabInfo);\n    }\n\n    getExpoPlugins() {\n        if (fs.existsSync(`${this.path}/expo-plugins`)) {\n            return Promise.resolve(this.path + '/expo-plugins');\n        }\n        return Promise.resolve('');\n    }\n\n    getResources() {\n        return Promise.resolve(this.path + '/resources');\n    }\n\n    getFontConfig() {\n        return Promise.resolve().then(() => fs.readFileSync(this.path + `/font.config.js`, 'utf-8'));\n    }\n\n    getThemes() {\n        return Promise.resolve([...this.getAllThemes(), ...this.getAllThemes('extraThemes')]);\n    }\n\n    getAllThemes(s = 'themes') {\n        const themeDir = this.path + '/' + s;\n        if (fs.existsSync(themeDir)) {\n            const themes = fs.readdirSync(themeDir, {\n                withFileTypes: true\n            }).filter(f => f && f.isDirectory())\n            .map(f => this.path + '/' + s +'/' + f.name);\n            return themes;\n        }\n        return [];\n    }\n\n    geti18NFiles(): Promise<string> {\n        return Promise.resolve(`${this.path}/../../../i18n`);\n    }\n\n    getPrefabProjectService(prefabName: string) {\n        return new LocalProjectService(`${this.path.split('/WEB-INF')[0]}/WEB-INF/prefabs/${prefabName}/webapp`);\n    }\n\n    getPackageJSONOverride(): Promise<any> {\n        if (fs.existsSync(`${this.path}/package.json`)) {\n            return fs.readJSONSync(`${this.path}/package.json`, {encoding: 'utf-8'});\n        }\n        return Promise.resolve({});\n    }\n\n    copyNpmPackages(dest: string): Promise<void> {\n        if (fs.existsSync(`${this.path}/npm-packages`)) {\n            fs.copySync(`${this.path}/npm-packages`, `${dest}/npm-packages`);\n        }\n        return Promise.resolve();\n    }\n}\n\nlet instance: ProjectService;\n\nexport default (config?: any) => {\n    if (!instance && config) {\n        if (config.src.startsWith('http')) {\n            instance = new RemoteProjectService(config.src);\n        } else {\n            instance = new LocalProjectService(config.src);\n        }\n    }\n    return instance;\n}\n", "wavemaker-rn-codegen/src/increment-builder.ts": "import fs from 'fs-extra';\n\nexport class IncrementalBuilder {\n\n    private modifiledFiles = [] as string[];\n    \n    public constructor(public projectSrc: string, lastBuildTime: number) {\n        this.modifiledFiles = this.scanForModifiedSourceFiles(projectSrc, lastBuildTime);\n        console.log('Files Modified:');\n        console.log(this.modifiledFiles.join('\\n'));\n    }\n\n    private scanForModifiedSourceFiles(path: string, after: number) {\n        const lstat = fs.lstatSync(path);\n        const result = [];\n        const excludePattern = /\\/(build|classes)\\//;\n        const webappMatches = (path.match(/\\/webapp\\//g) || []).length;\n        const isValidWebappUsage = path.includes('/prefabs/') ? webappMatches === 2 : webappMatches == 1;\n        if (lstat.isDirectory()) {\n            fs.readdirSync(path)\n                .forEach(f => result.push(...this.scanForModifiedSourceFiles(`${path}/${f}`, after)));\n            \n        } else if (lstat.mtime.getTime() > after && isValidWebappUsage && !excludePattern.test(path)) {\n            result.push(path);\n        }\n        return result;\n    }\n\n    private isModified(path: string) {\n        return !!this.modifiledFiles.find(p => p.startsWith(path));\n    }\n\n    public isFragmentModified(name: string) {\n        return this.isModified(`${this.projectSrc}/pages/${name}/`);\n    }\n\n    public isPrefabModified(name: string) {\n        return this.isModified(`${this.projectSrc}/WEB-INF/prefabs/${name}/`);\n    }\n\n    public isResourceModified() {\n        return this.isModified(`${this.projectSrc}/resources/`);\n    }\n    \n    public isThemeModified() {\n        return this.isModified(`${this.projectSrc}/themes/`);\n    }\n\n    public isConfigModified() {\n        return this.isModified(`${this.projectSrc}/wm_rn_config.js`)\n            || this.isModified(`${this.projectSrc}/App.json`);\n    }\n\n    public isPackageJSONModified() {\n        return this.isModified(`${this.projectSrc}/package.json`);\n    }\n\n    public isAppScriptModified() {\n        return this.isConfigModified()\n            || this.isModified(`${this.projectSrc}/app.js`)\n            || this.isModified(`${this.projectSrc}/app.variables.js`);\n    }\n\n    public isAppStyleModified() {\n        return this.isModified(`${this.projectSrc}/app.css`);\n    }\n\n    public isThemeVariablesModified() {\n        return this.isModified(`${this.projectSrc}/theme.variables.js`);\n    }\n\n    public isAppVariablesModified() {\n        return this.isModified(`${this.projectSrc}/app.variables.json`);\n    }\n\n    public isEntityModified() {\n        return this.isModified(`${this.projectSrc}/metadata/entities/`);\n    }\n\n    public isFontConfigModified() {\n        return this.isModified(`${this.projectSrc}/font.config.js`);\n    }\n\n    public isFormatterModified() {\n        return this.isModified(`${this.projectSrc}/extensions`);\n    }\n\n    public isi18nModified() {\n        return this.isModified(`${this.projectSrc}/resources/i18n`);\n    }\n}", "wavemaker-rn-codegen/src/handlebar-helpers.ts": "import handlebars from 'handlebars';\nimport { isEmpty, isString, isNumber, isUndefined } from 'lodash';\nimport { prependSpace } from './fomatter';\n\nconst isEvalExpression = (val: string) => {\n    return /^[^\\.]+\\.eval\\(/.test(val);\n};\n\nconst registerHelpers = () => {\n    handlebars.registerHelper('stringify', (input: string): string => {\n        return JSON.stringify(input)\n            .replace(/\"([a-zA-Z]+\\.eval\\(.*?\\))\"/g,\n            (x: string) => x.substring(1, x.length - 1).replace(/\\\\\"/g, '\"'));\n    });\n    handlebars.registerHelper('prependSpace', prependSpace);\n    handlebars.registerHelper('ifEquals', (arg1, arg2, scope, options) => {\n        if (arg1 === arg2) {\n            return options && options.fn(scope || this);\n        } else if (options && options.inverse) {\n            return options.inverse(scope || this);\n        }\n    });\n\n    handlebars.registerHelper('surroundWithCurlyBraces', text => `{${text}}`);\n\n    handlebars.registerHelper('ifNotEmpty', (arg1, scope, options) => {\n        if (isNumber(arg1) && !isUndefined(arg1)) {\n            return options &&  options.fn(scope || this);\n        } else if (!isEmpty(arg1)) {\n            return options &&  options.fn(scope || this);\n        } else {\n            return options && options.inverse(scope || this);\n        }\n    });\n\n    handlebars.registerHelper('quoteIfString', (arg: string) => {\n        if (arg === '') {\n            return `\"${arg}\"`;\n        } \n        if (!isNaN(arg as any) || arg === 'true' || arg === 'false') {\n            return arg;\n        }\n        if (isString(arg) && !isEvalExpression(arg)) {\n            return `${JSON.stringify(arg)}`;\n        }\n        return arg;\n    });\n    handlebars.registerHelper('toLowerCase', (str: string) => {\n        if (isString(str)) {\n            return str.toLowerCase();\n        }\n        return str;\n    });\n};\n\nexport default registerHelpers;\n", "wavemaker-rn-codegen/src/utils.ts": "import fs from 'fs-extra';\nimport handlebars from 'handlebars';\nimport profile from './profiles/profile';\n\nexport const loadTemplate = (templatePath: string) => {\n    const template = fs.readFileSync(templatePath, 'utf8');\n    const fn = handlebars.compile(template);\n    return (data: any) => fn({profile: profile, ...data});\n};\n\nexport const writeFile = (path: string, content: string) => {\n    const parent = path.substring(0, path.lastIndexOf('/'));\n    if (!fs.existsSync(parent)) {\n        fs.mkdirpSync(parent);\n    }\n    if (profile.targetPlatform === 'native'  && (path.endsWith('js') || path.endsWith('jsx'))) {\n        content = content.replace(/debugger/ig, '//debugger')\n    }\n    fs.writeFileSync(path, content);\n};\n\nexport const readdir = (path: string, opts = {recursive : false}, callback = (f: string) => ({} as any)) => {\n    fs.readdirSync(path).forEach(name => {\n        const child = `${path}/${name}`;\n        if (fs.statSync(child).isDirectory() && opts.recursive) {\n            readdir(child, opts, callback);\n        } else {\n            callback(child);\n        }\n    });\n};\n\nexport const findNodeModules = (path: string): string => {\n    if (fs.existsSync(`${path}/node_modules`)) {\n        return `${path}/node_modules`;\n    } else {\n        const splits = path.split('/');\n        splits.pop();\n        if (splits.length) {\n            return findNodeModules(splits.join('/'));\n        }\n    }\n    return '';\n};\n\nexport const readAndReplaceFileContent = async function (path: string, writeFn: (c :string) => string) {\n    if (!fs.existsSync(path)) {\n        return Promise.resolve();\n    }\n    const content = fs.readFileSync(path, 'utf-8');\n    return Promise.resolve().then(() => {    \n        return writeFn && writeFn(content);\n    }).then((modifiedContent) => {\n        if (modifiedContent !== undefined && modifiedContent !== null) {\n            fs.writeFileSync(path, modifiedContent);\n            return modifiedContent;\n        }\n        return content;\n    });\n};\n\n// * node_modules/moment/locale\nexport const validMomentLocales = [\n    \"af\", \"ar-dz\", \"ar-kw\", \"ar-ly\", \"ar-ma\", \"ar-ps\", \"ar-sa\", \"ar-tn\", \"ar\",\n    \"az\", \"be\", \"bg\", \"bm\", \"bn-bd\", \"bn\", \"bo\", \"br\", \"bs\", \"ca\", \"cs\", \"cv\", \n    \"cy\", \"da\", \"de-at\", \"de-ch\", \"de\", \"dv\", \"el\", \"en-au\", \"en-ca\", \"en-gb\",\n    \"en-ie\", \"en-il\", \"en-in\", \"en-nz\", \"en-sg\", \"eo\", \"es-do\", \"es-mx\", \"es-us\", \n    \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fil\", \"fo\", \"fr-ca\", \"fr-ch\", \"fr\", \"fy\", \n    \"ga\", \"gd\", \"gl\", \"gom-deva\", \"gom-latn\", \"gu\", \"he\", \"hi\", \"hr\", \"hu\", \"hy-am\",\n    \"id\", \"is\", \"it-ch\", \"it\", \"ja\", \"jv\", \"ka\", \"kk\", \"km\", \"kn\", \"ko\", \"ku-kmr\",\n    \"ku\", \"ky\", \"lb\", \"lo\", \"lt\", \"lv\", \"me\", \"mi\", \"mk\", \"ml\", \"mn\", \"mr\", \"ms-my\",\n    \"ms\", \"mt\", \"my\", \"nb\", \"ne\", \"nl-be\", \"nl\", \"nn\", \"oc-lnc\", \"pa-in\", \"pl\", \"pt-br\",\n    \"pt\", \"ro\", \"ru\", \"sd\", \"se\", \"si\", \"sk\", \"sl\", \"sq\", \"sr-cyrl\", \"sr\", \"ss\", \"sv\",\n    \"sw\", \"ta\", \"te\", \"tet\", \"tg\", \"th\", \"tl-ph\", \"tlh\", \"tr\", \"tzl\", \"tzm-latn\", \"tzm\",\n    \"ug-cn\", \"uk\", \"ur\", \"uz-latn\", \"uz\", \"vi\", \"x-pseudo\", \"yo\", \"zh-cn\", \"zh-hk\",\n    \"zh-mo\", \"zh-tw\"\n];\n\nexport const isValidLocale = (locale: string) => {\n    try {\n        return validMomentLocales.includes(locale);\n    } catch (error) {\n        return false;\n    }\n};\n", "wavemaker-rn-codegen/src/app.generator.ts": "import fs from 'fs-extra';\nimport { sep } from 'path';\nimport { uniqBy, isUndefined, sortBy, capitalize, forEach, merge, isEmpty, last, isString, get, includes } from 'lodash';\nimport execa from 'execa';\nimport semver from 'semver';\nimport Path from 'path';\n\nimport { transpileMarkup } from './transpile/transpile';\nimport { PageConfig, PageInfo, ProjectService } from './project.service';\nimport transformVariable from './variables/variable.transformer';\nimport { loadTemplate, writeFile, isValidLocale } from './utils';\nimport transformEx from './transpile/bind.ex.transformer';\nimport { ThemeService } from './theme/theme.service';\nimport profile from './profiles/profile';\nimport { IncrementalBuilder } from './increment-builder';\n\nconst APP_TEMPLATE = loadTemplate(__dirname + '/templates/app.template');\nconst APP_THEME_TEMPLATE = loadTemplate(__dirname + '/templates/app.theme.template');\nconst BABEL_CONFIG_TEMPLATE = loadTemplate(__dirname + '/templates/babel.config.js.template');\nconst BOOTSTRAP_TEMPLATE = loadTemplate(__dirname + '/templates/bootstrap.template');\nconst RESOURCE_RESOLVER_TEMPLATE = loadTemplate(__dirname + '/templates/resource.resolver.template');\nconst THEME_ASSET_RESOLVER_TEMPLATE = loadTemplate(__dirname + '/templates/theme-asset.resolver.template');\nconst COMPONENT_TEMPLATE = loadTemplate(__dirname + '/templates/component/component.template');\nconst COMPONENT_PROPS_TEMPLATE = loadTemplate(__dirname + '/templates/component/component.props.template');\nconst SCRIPT_TEMPLATE = loadTemplate(__dirname + '/templates/component/script.template');\nconst STYLE_TEMPLATE = loadTemplate(__dirname + '/templates/component/style.template');\nconst PAGE_CONFIG_TEMPLATE = loadTemplate(__dirname + '/templates/pages-config.template');\nconst SERVICE_DEFINITIONS = loadTemplate(__dirname + '/templates/service.defs.template');\nconst FORMATTERS_TEMPLATE = loadTemplate(__dirname + '/templates/extensions/formatters.template');\nconst VARIABLE_TEMPLATE = loadTemplate(__dirname + '/templates/variables.template');\nconst DEVICE_SERVICES_TEMPLATE = loadTemplate(__dirname + '/templates/device-operation-loader.template');\nconst ENTITY_PROVIDER_TEMPLATE = loadTemplate(__dirname + '/templates/entity-provider.template');\n\nconst ALL_GENERATED_FILES = '(src/**/*.js|App.js|app.style.js|bootstrap.js)';\n\n// REF: https://github.com/facebook/metro/blob/master/packages/metro-config/src/defaults/defaults.js#L14-L44\nconst ALLOWED_RESOURCE_EXT = [\n    // Image formats\n    'bmp','gif','jpg','jpeg','png','psd','svg','webp',\n    // Video formats\n    'm4v','mov','mp4','mpeg','mpg','webm',\n    // Audio formats\n    'aac','aiff','caf','m4a','mp3','wav',\n    // Document formats\n    'html','pdf','yaml','yml', 'json',\n    // Font formats\n    'otf','ttf',\n    // Archives (virtual files)\n    'zip',\n    'js'\n  ];\n\ninterface operationConfig {\n    operation: string;\n    service: string;\n    filename: string;\n    method: string;\n    hasparams: boolean;\n    type: string;\n}\n\ninterface options {\n    // arguments from ui-build and maven command\n    appId: string;\n    serverUrl: string;\n}\n\nconst pluginOperationConfig: Array<operationConfig> = [];\nconst operationMap: any = {\n    'captureImage': {name: 'Camera', method: 'CaptureImageOperation', filename: 'capture-image', hasConstructorParams: true},\n    'captureVideo': {name: 'Camera', method: 'CaptureVideoOperation', filename: 'capture-video', hasConstructorParams: true},\n    'scanBarCode': {name: 'Scan', method: 'ScanOperation', filename: 'scan', hasConstructorParams: true},\n    'getAppInfo': {name: 'Device', method: 'AppInfoOperation', filename: 'app-info', hasConstructorParams: false},\n    'getDeviceInfo': {name: 'Device', method: 'DeviceInfoOperation', filename: 'device-info', hasConstructorParams: false},\n    'getNetworkInfo': {name: 'Device', method: 'NetworkInfoOperation', filename: 'network-info', hasConstructorParams: false},\n    'vibrate': {name: 'Device', method: 'VibrateOperation', filename: 'vibrate', hasConstructorParams: false},\n    'getCurrentGeoPosition': {name: 'Location', method: 'CurrentGeoPositionOperation', filename: 'current-geo-position', hasConstructorParams: true},\n    'getContacts': {name: 'Contacts', method: 'GetContactsOperation', filename: 'get-contacts', hasConstructorParams: true},\n    'getEvents': {name: 'Calendar', method: 'GetEventsOperation', filename: 'get-events', hasConstructorParams: true},\n    'createEvent': {name: 'Calendar', method: 'CreateEventOperation', filename: 'create-event', hasConstructorParams: true},\n    'deleteEvent': {name: 'Calendar', method: 'DeleteEventOperation', filename: 'delete-event', hasConstructorParams: true},\n    'upload': {name: 'File', method: 'UploadFileOperation', filename: 'upload-file', hasConstructorParams: false},\n};\nconst serviceParams: any = {\n    'Camera': [{\n        name: 'AppDisplayManagerService',\n        filename: 'app-display-manager.service'\n    }],\n     'Scan': [{\n        name: 'AppDisplayManagerService',\n        filename: 'app-display-manager.service'\n    }],\n    'Location': [],\n    'Contacts': [],\n    'Calendar': []\n}\nlet deviceVariables: any = [];\nlet appVersion: string;\nconst servicesConfig: Array<{name: string; constructorParams: any; servicesStr: string; filePath: string}> = [];\n\nexport default class AppGenerator {\n\n    private transpiledComponents: any = {\n        pages: {},\n        partials: {},\n        prefabs: {}\n    };\n    private liveVariables: any = [];\n    private isPrefabApp = false;\n    private themeService = new ThemeService();\n\n    constructor(private projectPath: string,\n        private projectService: ProjectService,\n        private appUrl: string,\n        private prefabName = '',\n        private incBuilder?: IncrementalBuilder,\n        private options?: options,\n        private dynamicPrefabProps?: any\n       ) {\n        this.options = options;\n        this.isPrefabApp = !!prefabName;\n    }\n\n    private prepareVariables(variableJSON: any, scope: string, imports: string[]): string {\n        const variables = Object.values(variableJSON)\n        .map((v: any) => transformVariable(v, scope, this.appUrl)).filter(v => !!v);\n        return VARIABLE_TEMPLATE({\n            scope: scope,\n            imports: imports,\n            addEntityProvider: !this.isPrefabApp && scope !== 'App',\n            isPrefabApp: this.isPrefabApp,\n            prefabName: this.prefabName,\n            context: {\n                Variables: variables.filter(v => v.group === 'variable'),\n                Actions: variables.filter(v => v.group === 'action')\n            }\n        });\n    }\n\n    private getFilePath(name: string): string {\n        let nameArr = name.split('');\n        const index: number = nameArr.findIndex(character => {\n            return (character === character.toUpperCase() && character !== '-');\n        });\n        if (index === -1) {\n            return name;\n        }\n        if (index === 0) {\n            name = name[index].toLowerCase() + name.substring(index + 1);\n        } else {\n            name = name.substring(0, index) + '-' + name[index].toLowerCase() + name.substring(index + 1);\n        }\n        return this.getFilePath(name);\n    }\n\n    private generatePluginsOperationConfig() {\n        const servicesList: Array<string> = [];\n\n        deviceVariables.forEach((v: any) => {\n            const hasEntry = pluginOperationConfig.find(p => p.operation === v.operation);\n            if (hasEntry) {\n                return false;\n            }\n            const selectedOperation = operationMap[v.operation];\n            if (!selectedOperation) {\n                console.log('Cannot find operation named ' + v.operation);\n            }\n            const excludeServices = ['Device', 'File'];\n\n            if (!servicesList.includes(selectedOperation.name) && !excludeServices.includes(selectedOperation.name)) {\n                servicesList.push(selectedOperation.name);\n            }\n            pluginOperationConfig.push({\n                'operation': v.operation,\n                'service': v.service,\n                'filename' : selectedOperation.filename,\n                'method' : selectedOperation.method,\n                'hasparams': selectedOperation.hasConstructorParams,\n                'type': selectedOperation.name\n            });\n        });\n        let uniqueImports: any[] = [];\n\n        servicesList.forEach((s: any) => {\n            const item = serviceParams[s] || [];\n            if (item && item.length) {\n                item.forEach((e: any) => {\n                    var itemName = e.name;\n                    const isImported = uniqueImports.length && uniqueImports.find(i => {\n                        return i.name === itemName\n                    });\n                    if (!isImported) {\n                        uniqueImports.push(e);\n                    }\n                })\n            }\n            servicesConfig.push({\n                name: s,\n                constructorParams: item,\n                servicesStr: '',\n                filePath: ''\n            });\n        });\n        servicesConfig.forEach((item: any) => {\n            let servicesStr = '';\n            item.constructorParams.forEach((o: any) => {\n                const serviceName = o['name'];\n                if (serviceName) {\n                    if (!servicesStr) {\n                        servicesStr = servicesStr + serviceName;\n                    }\n                    if (!servicesStr.includes(serviceName)) {\n                        servicesStr = servicesStr + ', ' + serviceName;\n                    }\n                }\n            });\n            item.servicesStr = servicesStr;\n            item.filePath = this.getFilePath(item.name);\n        });\n        const output = DEVICE_SERVICES_TEMPLATE({\n            pluginOperationConfig: pluginOperationConfig,\n            appVersion: appVersion,\n            servicesConfig: servicesConfig,\n            imports: uniqueImports\n        });\n        writeFile(`${this.projectPath}/src/device-operation-loader.js`, output);\n    }\n\n    private prepareDeviceOperationLoader() {\n        const config = fs.readJsonSync(`${this.projectPath}/wm_rn_config.json`, {\n            encoding: 'utf8'\n        });\n        appVersion = config.version;\n        this.generatePluginsOperationConfig();\n    }\n\n    private isPartial(type: string) {\n        return type === 'PARTIAL' || type === 'LEFTNAV' || type === 'POPOVER' || type === 'TEMPLATE';\n    }\n\n    private prettify(target = ALL_GENERATED_FILES) {\n        let prettierPath = null;\n        let d = __dirname;\n        while(d) {\n            prettierPath = d + sep + 'node_modules' + sep + 'prettier';\n            if (fs.existsSync(prettierPath)) {\n                break;\n            }\n            const s = d.split(sep);\n            s.pop();\n            d = s.join(sep);\n        }\n        if (d){\n            return execa('node', [`${prettierPath}${sep}bin-prettier.js`, '--write',  `${this.projectPath}/${target}`])\n        }\n        console.warn('Prettier is not found');\n        return Promise.reject();\n    }\n\n    private setDeviceVariables(variables: any) {\n        variables = Object.values(variables);\n        const filterOutput = variables.filter((v: any) => v.category === 'wm.DeviceVariable');\n        deviceVariables = deviceVariables.concat(filterOutput);\n    }\n\n    private savePageDesignStyles(designStyles: string, pageName: string): Promise<void> {\n        const p = `${this.projectPath}/designtime/pages/${pageName}`;\n        fs.mkdirpSync(p);\n        fs.writeFileSync(`${p}/${pageName}.css`, designStyles);\n        return Promise.resolve();\n    }\n\n    private saveAppDesignStyles(designStyles: string): Promise<void> {\n        const p = `${this.projectPath}/designtime`;\n        fs.mkdirpSync(p);\n        fs.writeFileSync(`${p}/app.css`, designStyles);\n        return Promise.resolve();\n    }\n\n    public generateAppVariables() {\n        if (this.incBuilder) {\n            console.log(`Generating App variables.`);\n        }\n        return this.projectService.getAppVariables().then(variables => {\n            this.setDeviceVariables(variables);\n            Object.keys(variables).map((key: string) => {\n                // @ts-ignore\n                if (variables[key][\"category\"] === 'wm.LiveVariable') {\n                    // @ts-ignore\n                    this.liveVariables.push(variables[key]);\n                }\n            });\n            const output = this.prepareVariables(variables, 'App', []);\n            writeFile(`${this.projectPath}/src/app.variables.js`, output);\n        });\n    }\n\n    private generateRNConfig() {\n        if (this.incBuilder) {\n            console.log(`Generating RN config.`);\n        }\n        return this.projectService.getRNConfig().then(data => {\n            const config = JSON.parse(data);\n            if (profile.generateWeb) {\n                config.serverPath = '..';\n            } else if (config.serverPath?.startsWith('http://NOSERVERREQUIRED.com')) {\n                config.serverPath = null;\n            }\n            if (isUndefined(config.preferences.enableLogs) && profile.targetPlatform === 'web') {\n                config.preferences.enableLogs = true;\n            }\n            config.splash.animationSrc = config.splash.animationSrc ? config.splash.animationSrc : '';\n            config.loader = config.loader ? config.loader : 'skeleton';\n            writeFile(`${this.projectPath}/wm_rn_config.json`, JSON.stringify(config, null, 4));\n        });\n    }\n\n    private generateAppConfig(){\n        if (this.incBuilder) {\n            console.log(`Generating App config.`);\n        }\n        let appConfig = fs.readJsonSync(`${this.projectPath}/app.json`, {encoding: 'utf8'});\n        this.projectService.getRNConfig().then(data => {\n            const config = JSON.parse(data);\n            if (config.splash.src) {\n                appConfig['expo']['name'] = config.name;\n                appConfig['expo']['slug'] = config.name;\n                appConfig['expo']['version'] = config.version;\n                appConfig['expo']['android']['package'] = config.id;\n                appConfig['expo']['ios']['bundleIdentifier'] = config.id;\n                appConfig['expo']['jsEngine'] = config.preferences.enableHermes ? 'hermes' : 'jsc';\n                appConfig['expo']['icon'] = './assets/'+config.icon.src;\n                appConfig[\"expo\"][\"splash\"][\"image\"] = './assets/'+config.splash.src;\n                appConfig['expo']['android']['adaptiveIcon']['foregroundImage'] = './assets/'+config.icon.src;\n                appConfig['expo']['plugins'].map((val: any) => {\n                    if (val[0] === 'expo-splash-screen') {\n                        val[1]['image'] = './assets/'+config.icon.src;\n                        val[1]['dark']['image'] = './assets/'+config.icon.src;\n                    }\n                })\n            }\n        }).then(() => {\n            return this.projectService.getAppJSON()\n                .then(appConfigOverride => merge(appConfig, appConfigOverride));\n        }).then(() => {\n            writeFile(`${this.projectPath}/app.json`, JSON.stringify(appConfig, null, 4));\n        });\n    }\n\n    private generateAppScript() {\n        if (this.incBuilder) {\n            console.log(`Generating App.js.`);\n        }\n        return this.projectService.getRNConfig().then(data => {\n            const config = JSON.parse(data);\n            const animatedSplash : boolean = (config.splash.animationSrc && profile.targetPlatform === 'native'  && fs.existsSync(this.projectPath + '/assets/'+ config.splash.animationSrc));\n            const sslPinning =  profile.targetPlatform === 'web' \n                || !config.sslPinning?.enabled\n                || isEmpty(config.sslPinning?.domains) ? null : config.sslPinning?.domains;\n            sslPinning && Object.values(sslPinning).forEach((v: any) => {\n                if (v.publicKeyHashes.length === 1) {\n                    v.publicKeyHashes.push(\"NoBackUpKey\" +v.publicKeyHashes[0].substring(11));\n                }\n            });\n            const enableWavePulse =  (!!config.preferences.enableWavePulse);\n            if (!enableWavePulse) {\n                if (fs.existsSync(`${this.projectPath}/wavepulse`)) {\n                    fs.rmSync(`${this.projectPath}/wavepulse`, {\n                        recursive: true\n                    });\n                }\n            }\n            return this.projectService.getAppVariables().then(variables => {\n                return this.projectService.getAppJs().then(script => {\n                    const supportedLocaleVariable = Object.values(variables).filter((v: any) => (v.startUpdate || v.category === 'wm.Variable') && v.name === 'supportedLocale')?.[0];\n                    const localeDataset = Object.keys((supportedLocaleVariable as any)?.dataSet);\n                    const supportedLocales = localeDataset.filter(isValidLocale);\n                    const output = APP_TEMPLATE({\n                        script: script,\n                        startUpVariables: Object.values(variables).filter((v: any) => (v.startUpdate || v.category === 'wm.Variable') && v.category !== 'wm.TimerVariable').map((v: any) => v.name),\n                        startUpActions: Object.values(variables).filter((v: any) => v.startUpdate && v.category === 'wm.TimerVariable').map((v: any) => v.name),\n                        autoUpdateVariables: Object.values(variables).filter((v: any) => v.autoUpdate || ((v.category === 'wm.Variable' || v.category === 'wm.LiveVariable')  && v.dataBinding && v.dataBinding.length)).map((v: any) => v.name),\n                        supportedLocales: supportedLocales,\n                        animatedSplash: animatedSplash,\n                        sslPinning: sslPinning,\n                        enableWavePulse: enableWavePulse\n                    });\n                    writeFile(`${this.projectPath}/App.js`, output);\n                });\n            });\n        });\n    }\n\n    private generatePageConfig(pageConfigs: any) {\n        pageConfigs = pageConfigs.filter((p: any) => p.type == 'PAGE');\n        const output = PAGE_CONFIG_TEMPLATE({\n            pageConfigs: pageConfigs,\n            pageConfigsStr: JSON.stringify(pageConfigs),\n            lazyload: profile.lazyloadPages\n        });\n        writeFile(`${this.projectPath}/src/pages/pages-config.js`, output);\n    }\n\n    private generatePartialConfig(pageConfigs: any) {\n        pageConfigs = pageConfigs.filter((p: any) => this.isPartial(p.type));\n        const output = PAGE_CONFIG_TEMPLATE({\n            pageConfigs: pageConfigs,\n            pageConfigsStr: JSON.stringify(pageConfigs),\n            lazyload: profile.lazyloadPartials\n        });\n        writeFile(`${this.projectPath}/src/partials/partial-config.js`, output);\n    }\n\n    private transformStyle(styles: string) {\n        if (!styles) {\n            return '{}';\n        }\n        const splitStr = '/*REACT_NATIVE_STYLES*/';\n        const splitAt = styles.indexOf(splitStr);\n        if (splitAt > 0) {\n            styles = styles.substr(splitAt + splitStr.length);\n        }\n        return this.themeService.generateReactNativeStyles(styles);\n    }\n\n    private generateDesignStyles(styles: string) {\n        if (!styles) {\n            return '';\n        }\n        return this.themeService.generateStudioStyles(styles);\n    }\n\n    private generateComponent(info: PageInfo, type: string, name: string): Promise<any> {\n        if (this.incBuilder && !this.incBuilder.isFragmentModified(name)) {\n            return Promise.resolve();\n        }\n        if (this.incBuilder) {\n            console.log(`Generating ${name} component.`);\n        }\n        const lType = type.toLowerCase();\n        const typeLabel = capitalize(type);\n        const variables = JSON.parse(info.variables);\n        Object.keys(variables).map((key) => {\n            if (variables[key][\"category\"] === 'wm.LiveVariable') {\n                this.liveVariables.push(variables[key]);\n            }\n        });\n        this.setDeviceVariables(variables);\n        const dest = type === 'PREFAB' ? `${this.projectPath}/src/pages/${name}` : `${this.projectPath}/src/${lType}s/${name}`;\n        try {\n            const output = this.prepareVariables(variables, typeLabel, []);\n            writeFile(`${dest}/${name}.variables.js`, output);\n            const transpiledOutput = transpileMarkup(info.markup, this.isPrefabApp);\n            if (info.markup.includes('metadata')) {\n                if (this.isPrefabApp) {\n                    transpiledOutput.imports.push({ name: '{dynamicForm}', from: `../../../../../../component/dynamic/form.generator`});\n                } else {\n                    transpiledOutput.imports.push({ name: '{dynamicForm}', from: `../../../component/dynamic/form.generator`});\n                }\n            }\n            if (this.isPrefabApp) {\n                transpiledOutput.imports.forEach(i => {\n                    if (i.from.indexOf('/prefabs/') > 0) {\n                        i.from = '../../../' + i.from;\n                    }\n                });\n            }\n            const imports = sortBy(uniqBy(transpiledOutput.imports, i => i.name + i.from), i => i.name);\n            const component = COMPONENT_TEMPLATE({\n                name: name,\n                type: type,\n                lType: lType,\n                typeLabel: typeLabel,\n                dynamicPrefabProps: this.dynamicPrefabProps || {},\n                prefabName: this.prefabName,\n                markup: '\\n' + transpiledOutput.markup,\n                components: transpiledOutput.components,\n                startUpVariables: Object.values(variables).filter((v: any) => v.startUpdate && v.category !== 'wm.TimerVariable').map((v: any) => v.name),\n                startUpActions: Object.values(variables).filter((v: any) => v.startUpdate && v.category === 'wm.TimerVariable').map((v: any) => v.name),\n                autoUpdateVariables: Object.values(variables).filter((v: any) => v.autoUpdate || ((v.category === 'wm.Variable' || v.category === 'wm.LiveVariable')  && v.dataBinding && v.dataBinding.length)).map((v: any) => v.name),\n                eagerImports: imports.filter(i => !i.lazy),\n                lazyImports: imports.filter(i => i.lazy)\n            });\n            writeFile(`${dest}/${name}.component.js`, component);\n            const script = SCRIPT_TEMPLATE({\n                typeLabel: typeLabel,\n                script: info.script\n            });\n            writeFile(`${dest}/${name}.script.js`, script);\n            const styles = STYLE_TEMPLATE({\n                styles: this.transformStyle(info.styles)\n            });\n            writeFile(`${dest}/${name}.style.js`, styles);\n            if (profile.targetPlatform === 'web' ) {\n                this.savePageDesignStyles(this.generateDesignStyles(info.styles), name);\n            }\n            return Promise.all(transpiledOutput.prefabs.map(p => this.generatePrefabComponent(p, false)));\n        } catch(e) {\n            console.log(`failed to generate component ${dest}/${name}`);\n            throw e;\n        }\n    }\n\n    private generatePrefabProps(name: string, projectPath: string) {\n        const dynamicProps = {} as any;\n        return this.projectService.getPrefabInfo(name)\n            .then(info => {\n                const propConfig: any = {};\n                Object.keys(info.config.properties).map((k: string) => {\n                    const value = info.config.properties[k].value;\n                    if (isString(value) && value.startsWith('bind:')) {\n                        let exStr = decodeURIComponent(value.substring(5));\n                        dynamicProps[k] = `this.eval(() => ${transformEx(exStr, '_this', 'attr')})`;\n                        propConfig[k] = null;\n                    } else {\n                        propConfig[k] = value === undefined ? null : value;\n                    }\n                });\n                let propsStr = JSON.stringify(propConfig);\n                if (info.config.events) {\n                    propsStr = propsStr.replace(/\\}$/, '');\n                    Object.keys(info.config.events).map((k: string) => {\n                        propsStr += `${propsStr.length === 1 ? '' : ','} ${k} : () => {}`;\n                    });\n                    propsStr += '}';\n                }\n                const props = COMPONENT_PROPS_TEMPLATE({\n                    props: propsStr\n                });\n                writeFile(`${projectPath}/src/prefabs/${name}/src/pages/Main/Main.props.js`, props);\n                return dynamicProps;\n            });\n    }\n\n    private generatePrefabComponent(name: string, overwrite = true): Promise<any> {\n        if ((!overwrite && this.transpiledComponents.prefabs[name])\n            || (this.incBuilder && !this.incBuilder?.isPrefabModified(name))) {\n            return Promise.resolve();\n        }\n        if (this.incBuilder) {\n            console.log(`Generating ${name} prefab component.`);\n        }\n        const projectPath = this.isPrefabApp ? this.projectPath.split('/src/prefabs/')[0] : this.projectPath;\n        const appUrl = this.isPrefabApp ? this.appUrl.split('/app/prefabs/')[0] : this.appUrl;\n        this.transpiledComponents.prefabs[name] = true;\n        return this.generatePrefabProps(name, projectPath).then(dynamicPrefabProps => {\n            const prefabGenerator =  new AppGenerator(\n                `${projectPath}/src/prefabs/${name}`,\n                this.projectService.getPrefabProjectService(name),\n                `${appUrl}/app/prefabs/${name}`,\n                name,\n                undefined,\n                dynamicPrefabProps);\n            return prefabGenerator.generatePagesAndPartials()\n            .then(() => prefabGenerator.generateResourceResolver());\n        });\n    }\n\n    private generateAllPrefabComponents(overwrite?: boolean): Promise<any> {\n        return this.projectService.getPrefabs().then(prefabs => {\n            return Promise.all(prefabs?.map(prefab => this.generatePrefabComponent(prefab, overwrite)));\n        });\n    }\n\n    private generatePageComponent(name: string, overwrite = true): Promise<any>  {\n        if (!overwrite && this.transpiledComponents.pages[name]) {\n            return Promise.resolve();\n        }\n        this.transpiledComponents.pages[name] = true;\n        return this.projectService.getPageInfo(name).then(info => {\n            return this.generateComponent(info, this.isPrefabApp ? 'PREFAB' : 'PAGE', name);\n        });\n    }\n\n    private generatePartialComponent(name: string, overwrite = true): Promise<any>  {\n        if (!overwrite && this.transpiledComponents.partials[name]) {\n            return Promise.resolve();\n        }\n        this.transpiledComponents.partials[name] = true;\n        return this.projectService.getPageInfo(name).then(info => {\n            return this.generateComponent(info, 'PARTIAL', name);\n        });\n    }\n\n    private generateServiceDefs(): Promise<any>  {\n        return this.projectService.getServiceDefs().then(serviceDefs => {\n            const output = SERVICE_DEFINITIONS({serviceDefs: JSON.stringify(serviceDefs)});\n            writeFile(`${this.projectPath}/src/service-definitions.js`, output);\n        });\n    }\n\n    private generateBootstrapScript() {\n        if (this.incBuilder) {\n            console.log(`Generating bootstrap.js .`);\n        }\n        const config = fs.readJsonSync(`${this.projectPath}/wm_rn_config.json`, {\n            encoding: 'utf8'\n        });\n        let appUrl = this.appUrl;\n        if (!isEmpty(config.serverPath) && config.serverPath !== '{{DEVELOPMENT_URL}}') {\n            appUrl = config.serverPath;\n        }\n        if (appUrl.endsWith('/')) {\n            appUrl = appUrl.substring(0, appUrl.length -1);\n        }\n        const output = BOOTSTRAP_TEMPLATE({\n            appUrl: appUrl,\n            enableLogs: config.preferences.enableLogs,\n            loader: config.loader || 'skeleton'\n        });\n        writeFile(`${this.projectPath}/bootstrap.js`, output);\n    }\n\n    private generateBabelConfig() {\n        if (this.incBuilder) {\n            console.log(`Generating babel config.`);\n        }\n        const config = fs.readJsonSync(`${this.projectPath}/wm_rn_config.json`, {\n            encoding: 'utf8'\n        });\n        const output = BABEL_CONFIG_TEMPLATE({\n            enableLogs: config.preferences.enableLogs\n        });\n        writeFile(`${this.projectPath}/babel.config.js`, output);\n    }\n\n    private generateAppStyles() {\n        if (this.incBuilder) {\n            console.log(`Generating app.styles.js .`);\n        }\n        return this.projectService.getAppCss().then(response => {\n            const styles = STYLE_TEMPLATE({\n                styles: this.transformStyle(response)\n            });\n            writeFile(`${this.projectPath}/app.style.js`, styles);\n            if (profile.targetPlatform === 'web' ) {\n                return this.saveAppDesignStyles(this.generateDesignStyles(response));\n            }\n        });\n    }\n\n    private generateThemeVariables() {\n        if (this.incBuilder) {\n            console.log(`Generating Theme variables.`);\n        }\n        return this.projectService.getAppThemeVariables().then(response => {\n            writeFile(`${this.projectPath}/app.theme.variables.js`, response);\n        }, () => {});\n    }\n\n    private generateFormatters() {\n        if (this.incBuilder) {\n            console.log(`Generating formatters.`);\n        }\n        return this.projectService.getFormatters()\n            .then((script) => {\n                const code = FORMATTERS_TEMPLATE({\n                    script: script\n                });\n                writeFile(`${this.projectPath}/src/extensions/formatters.js`, code);\n            });\n    }\n\n    private getAllResources(filter = (str: string) => true, dirPath = this.projectPath + '/assets/resources', pathPrefix = 'resources', arrayOfFiles: string[] = []) {\n        if (fs.existsSync(dirPath)) {\n            fs.readdirSync(dirPath).forEach((file) => {\n                if (fs.statSync(dirPath + \"/\" + file).isDirectory()) {\n                    arrayOfFiles = this.getAllResources(filter, dirPath + \"/\" + file, pathPrefix + '/' + file, arrayOfFiles)\n                } else if (filter(dirPath + \"/\" + file)){\n                    const ext = last(file.split('.'));\n                    if (file.indexOf('@') < 0 && ALLOWED_RESOURCE_EXT.indexOf(ext || '') >=  0) {\n                        arrayOfFiles.push(pathPrefix  + \"/\" + file);\n                    }\n                }\n            });\n        }\n        return arrayOfFiles;\n    }\n\n    private generateFontConfig() {\n        if (this.incBuilder) {\n            console.log(`Generating Font config.`);\n        }\n        return this.projectService.getFontConfig().then(code => {\n            writeFile(`${this.projectPath}/font.config.js`, code);\n        }).catch(() => {});\n    }\n\n    private generateResourceResolver() {\n        if (this.incBuilder) {\n            console.log(`Copying Resources.`);\n        }\n        return this.projectService.getResources().then(src => {\n            if (src) {\n                fs.copySync(src, this.projectPath + '/assets/resources', {\n                    filter: (src) => {\n                        return (\n                            !(profile.targetPlatform === 'web' \n                                && src.endsWith('.native.js'))\n                            && !(profile.targetPlatform === 'native' \n                                && src.endsWith('.web.js'))\n                            && (profile.copyResources\n                                || src.endsWith('.js')\n                                || src.indexOf('resources/icons/') >= 0\n                                || fs.lstatSync(src).isDirectory())\n                        );\n                    }\n                });\n            }\n        }).then(() => {\n            const resources = profile.copyResources ? this.getAllResources() : this.getAllResources((src) => src.endsWith('.js'));\n            const content = RESOURCE_RESOLVER_TEMPLATE({\n                resources: resources,\n                path: '../../assets/'\n            });\n            writeFile(`${this.projectPath}/src/resolve/resource.resolver.js`, content);\n        });\n    }\n\n    private generateLocaleResolver() {\n        if (this.incBuilder) {\n            console.log(`Generating Locale resolver.`);\n        }\n        return Promise.resolve().then(() => {\n            const resources = profile.useLocalMetadata ? this.getAllResources(() => true, this.projectPath + '/i18n',  'i18n') : [];\n            const content = RESOURCE_RESOLVER_TEMPLATE({\n                resources: resources,\n                path: '../../'\n            });\n            writeFile(`${this.projectPath}/src/resolve/locale.resolver.js`, content);\n        });\n    }\n\n    private copyi18nFiles() {\n        if (profile.useLocalMetadata) {\n            if (this.incBuilder) {\n                console.log(`Copying i18n files.`);\n            }\n            return this.projectService.geti18NFiles().then(p => {\n                if(p) {\n                    fs.copySync(p, this.projectPath+ '/i18n');\n                }\n            });\n        }\n        return Promise.resolve();\n    }\n\n    private generatePagesAndPartials() {\n        let pageConfigs: PageConfig[] = null as any;\n        return this.projectService.getPageConfigs().then(_pageConfigs => {\n            pageConfigs = _pageConfigs;\n            const pageCreationPromises = pageConfigs.map(p => {\n                if (p.type === 'PAGE') {\n                    return this.generatePageComponent(p.name);\n                }\n                if (this.isPartial(p.type)) {\n                    return this.generatePartialComponent(p.name);\n                }\n            });\n            return Promise.all(pageCreationPromises);\n        })\n        .then(() => this.generatePageConfig(pageConfigs))\n        .then(() => this.generatePartialConfig(pageConfigs));\n    }\n\n    public async mergePackageJson() {\n        if (this.incBuilder) {\n            console.log(`Merging package.json .`);\n        }\n        const config = await this.projectService.getRNConfig().then(data => JSON.parse(data));\n        let packageToOveride = fs.readJSONSync(`${this.projectPath}/package.json`, {encoding: 'utf-8'});\n        packageToOveride.name = config.name;\n        packageToOveride.version = config.version;\n        packageToOveride.description = config.description;\n        if (profile.targetPlatform === 'web') {\n            const webPackageJson = fs.readJSONSync(`${__dirname}/templates/package.web.json`, {encoding: 'utf-8'});\n            packageToOveride = merge(packageToOveride, webPackageJson);\n        }\n        const packageOverride = await this.projectService.getPackageJSONOverride();\n        if (packageOverride) {\n            const packageOverriden = merge(packageToOveride, packageOverride);\n            fs.writeFileSync(`${this.projectPath}/package.json`, JSON.stringify(packageOverriden, null, 4));\n        }\n    }\n\n    public async copyPackageLockJson() {\n        if (fs.existsSync(`${this.projectPath}/package-lock.json`)) {\n            return;\n        }\n        if (this.incBuilder) {\n            console.log(`Copying package-lock.json .`);\n        }\n        if (profile.packageLockFilePath && fs.existsSync(profile.packageLockFilePath)) {\n            fs.copySync(profile.packageLockFilePath, `${this.projectPath}/package-lock.json`);\n        }\n        if (profile.yarnLockFilePath && fs.existsSync(profile.yarnLockFilePath)) {\n            fs.copySync(profile.yarnLockFilePath, `${this.projectPath}/yarn.json`);\n        }\n    }\n\n    public async addCustomPluginsToPackageJson() {\n        if (this.incBuilder) {\n            console.log(`Adding custom plugins.`);\n        }\n        await this.projectService.getExpoPlugins().then(src => {\n            if (src) {\n                fs.mkdirsSync(`${this.projectPath}/expo-plugins`);\n                fs.copySync(src, this.projectPath + '/expo-plugins');\n            }\n        });    \n        const config = fs.readJsonSync(`${this.projectPath}/wm_rn_config.json`, {\n            encoding: 'utf8'\n        });\n        let plugins = config.plugins;\n        let data = fs.readFileSync(`${this.projectPath}/package.json`, 'utf-8');\n        const jsonData = JSON.parse(data);\n        if(Object.keys(this.transpiledComponents.prefabs).length>0){\n            Object.keys(this.transpiledComponents.prefabs)?.map(async (prefab: string) => {\n                await this.projectService.getPrefabInfo(prefab).then(info => {\n                    info.config[\"resources\"][\"scripts\"]?.map((script: string) => {\n                        if(script.includes('npm://')){\n                            if(jsonData['dependencies'][script.match(/[\\/]+(.*?)@\\d/)![1]] && semver.lt(jsonData['dependencies'][script.match(/[\\/]+(.*?)@\\d/)![1]], script.match('.*@(.*?)$')![1])){\n                                console.log(\"adding new version \" + script.match('.*@(.*?)$')![1] + \"for script.match(/[\\/]+(.*?)@\\d/)![1] dependency\")\n                                jsonData['dependencies'][script.match(/[\\/]+(.*?)@\\d/)![1]] = script.match('.*@(.*?)$')![1]     \n                            }\n                            else{\n                                jsonData['dependencies'][script.match(/[\\/]+(.*?)@\\d/)![1]] = script.match('.*@(.*?)$')![1];\n                            }\n                        }\n                    })    \n                })\n                plugins.forEach((p: any) => {\n                    if(p.spec){\n                        if (p.spec.includes('tgz')) {\n                            jsonData['dependencies'][p.name] = 'file:' + p.spec;\n                        }\n                        else if(semver.valid(p.spec) && !semver.lt(p.spec, jsonData['dependencies'][p.name] || '0.0.0')){\n                            jsonData['dependencies'][p.name] = p.spec;\n                        }\n                        else if(!semver.valid(p.spec)){\n                            jsonData['dependencies'][p.name] = p.spec;\n                        }\n                    }\n                });\n                fs.writeFileSync(`${this.projectPath}/package.json`, JSON.stringify(jsonData, null, 4));    \n            })    \n        }\n        else{\n            plugins.forEach((p: any) => {\n                if(p.spec){\n                    if (p.spec.includes('tgz')) {\n                        jsonData['dependencies'][p.name] = 'file:' + p.spec;\n                    }\n                    else if(semver.valid(p.spec) && !semver.lt(p.spec, jsonData['dependencies'][p.name] || '0.0.0')){\n                        jsonData['dependencies'][p.name] = p.spec;\n                    }\n                    else if(!semver.valid(p.spec)){\n                        jsonData['dependencies'][p.name] = p.spec;\n                    }\n                }\n            });\n            fs.writeFileSync(`${this.projectPath}/package.json`, JSON.stringify(jsonData, null, 4));    \n        }\n    }\n\n    public async generateAppTheme() {\n        if (this.isPrefabApp) {\n            return Promise.resolve();\n        }\n        if (this.incBuilder) {\n            console.log(`Generating App theme.`);\n        }\n        return this.projectService.getThemes().then(themes => {\n            return themes.map(t => {\n                const themeName = last(t.split('/'));\n                fs.copySync(t, this.projectPath + '/theme/' + themeName);\n                return themeName;\n            });\n        }).then(themes => {\n            themes.map(t => [\n                `${this.projectPath}/theme/${t}/android/assets`,\n                `${this.projectPath}/theme/${t}/ios/assets`\n            ]).flat().map(p => {\n                const resources = this.getAllResources(\n                    (str: string) => true,\n                    p,\n                    'theme/assets'\n                );\n                const content = THEME_ASSET_RESOLVER_TEMPLATE({\n                    resources: resources,\n                    path: '____'\n                });\n                writeFile(`${p}/../asset.resolver.js`, content.replace(/\\_\\_\\_\\_theme\\//g, './'));\n            });\n            return themes;\n        }).then(themes => {\n            const output = APP_THEME_TEMPLATE({\n                themes: themes\n            });\n            writeFile(`${this.projectPath}/app.theme.js`, output);\n        });\n    }\n\n    generateEntityMetadata() {\n        if (this.incBuilder) {\n            console.log(`Generating Entity data.`);\n        }\n        const liveSources: any = {};\n        this.liveVariables.forEach((lv: any) => {\n            const liveSource = lv.liveSource;\n            const entityName = lv.type;\n            if (!liveSources[liveSource]) {\n                liveSources[liveSource] = {};\n            }\n            if (!liveSources[liveSource][entityName]) {\n                liveSources[liveSource][entityName] = {\n                    \"propertiesMap\": lv.propertiesMap,\n                    \"relatedTables\": lv.relatedTables\n                };\n            }\n        });\n\n        Object.keys(liveSources).forEach((liveSource: any) => {\n            writeFile(`${this.projectPath}/metadata/entities/${liveSource}.json`,\n                JSON.stringify(liveSources[liveSource], null, 4));\n        })\n        const output = ENTITY_PROVIDER_TEMPLATE({\n            liveSources: Object.keys(liveSources)\n        });\n        writeFile(`${this.projectPath}/metadata/entities/entity-provider.js`, output);\n    }\n\n    generateFonts() {\n        return this.projectService.getFontConfig().then((code: any) => {\n            const fontConfigUrl = `${this.projectPath}/font.config.js`;\n            code = code.replace('export default', 'module.exports = ');\n            writeFile(fontConfigUrl, code);\n            return import(fontConfigUrl).then((fontConfig) => {\n                return Promise.all(fontConfig.default.fonts.map((font: any) => {\n                    if(font.csspath){\n                        return this.themeService.getIconFontScripts(Path.join(this.projectPath, '/assets/', font.csspath));\n                    }\n                    return;\n                }))\n            })\n        }).then(() => this.generateResourceResolver())\n    }\n\n    public generateApp() {\n        this.incBuilder || fs.copySync(__dirname + '/templates/project', this.projectPath);\n        return this.generatePagesAndPartials()\n        .then(() => this.incBuilder && this.generateAllPrefabComponents())\n        .then(() => !this.incBuilder || this.incBuilder.isResourceModified())\n        .then((build: boolean) =>  (build && this.generateResourceResolver()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isConfigModified())\n        .then((build: boolean) => (build && this.generateAppConfig()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isAppScriptModified())\n        .then((build: boolean) => (build && this.generateAppScript()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isAppStyleModified())\n        .then((build: boolean) => (build && this.generateAppStyles()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isThemeVariablesModified())\n        .then((build: boolean) => (build && this.generateThemeVariables()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isAppVariablesModified())\n        .then((build: boolean) => (build &&  this.generateAppVariables()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isEntityModified())\n        .then((build: boolean) => (build && this.generateEntityMetadata()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isFontConfigModified())\n        .then((build: boolean) => (build && this.generateFontConfig()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isFontConfigModified())\n        .then((build: boolean) => (build && this.generateFonts()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isConfigModified())\n        .then((build: boolean) => (build && this.generateRNConfig()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isFormatterModified())\n        .then((build: boolean) => (build && this.generateFormatters()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isConfigModified())\n        .then((build: boolean) => (build && this.generateBootstrapScript()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isConfigModified())\n        .then((build: boolean) => (build && this.generateBabelConfig()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isThemeModified())\n        .then((build: boolean) => (build && this.generateAppTheme()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isi18nModified())\n        .then((build: boolean) => (build && this.copyi18nFiles()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isi18nModified())\n        .then((build: boolean) => (build && this.generateLocaleResolver()) as any)\n        .then(() => !this.incBuilder)\n        .then((build: boolean) => (build && this.prepareDeviceOperationLoader()) as any)\n        .then(() => !this.incBuilder || this.incBuilder.isConfigModified())\n        .then((build: boolean) => (build && this.addCustomPluginsToPackageJson()) as any)\n        .then(() => !this.incBuilder)\n        .then((build) => (build && this.prettify()) as any)\n        .then(() => this.mergePackageJson())\n        .then(() => this.copyPackageLockJson())\n        .then(() => this.projectService.copyNpmPackages(this.projectPath))\n        .then(() => console.log('code generated at ' + this.projectPath));\n    }\n\n    public generateFragment(name: string) {\n        let pageConfigs: PageConfig[] = null as any;\n        return this.projectService.getPageConfigs().then(_pageConfigs => {\n            pageConfigs = _pageConfigs;\n            const info = pageConfigs.find((config) => config.name === name);\n            if (info) {\n                if (info.type === 'PAGE') {\n                    return this.generatePageComponent(info.name);\n                }\n                if (this.isPartial(info.type)) {\n                    return this.generatePartialComponent(name);\n                }\n            }\n        })\n        .then(() => this.generatePageConfig(pageConfigs))\n        .then(() => this.generatePartialConfig(pageConfigs))\n        .then(() => this.prettify(`**/${name}/**/*.js`))\n        .then(() => console.log('code generated at ' + this.projectPath));\n    };\n}\n", "wavemaker-rn-codegen/src/fomatter.ts": "const spaceCache:Array<string> = [''];\n\nexport const createSpace = (num = 0): string => {\n    if (spaceCache[num] == undefined) {\n        spaceCache[num] = ' ' + createSpace(num - 1);\n    }\n    return spaceCache[num];\n};\n\nexport const prependSpace = (input: string, num = 0): string => {\n    const space = createSpace(num);\n    return input.split('\\n').map(s => space + s).join('\\n');\n};", "wavemaker-rn-codegen/src/transpile/style.transformer.ts": "import { isEmpty, isNil, merge } from \"lodash\";\nimport { HTMLElement } from \"node-html-parser\";\nimport { StyleParser } from './style/style.parser';\nimport { DimensionStyleParser } from './style/dimension-style.parser';\nimport { MarginParser } from './style/margin.parser';\nimport { PaddingParser } from './style/padding.parser';\nimport { BorderWidthParser } from './style/border-width.parser';\nimport { NumericalStyleParser } from './style/numeric-style.parser';\nimport { HorizontalAlignParser } from './style/horizontal-align.parser';\nimport { BackgroundImageParser } from \"./style/background-image.parser\";\n\nconst StyleProps = new Map<string, StyleParser>([\n    ['backgroundimage', new BackgroundImageParser()],\n    ['backgroundsize', new StyleParser('backgroundSize')],\n    ['backgroundrepeat', new StyleParser('backgroundRepeat')],\n    ['backgroundresizemode', new StyleParser('backgroundResizeMode')],\n    ['backgroundposition', new StyleParser('backgroundPosition')],\n    ['backgroundcolor', new StyleParser('backgroundColor')],\n    ['bordercolor', new StyleParser('borderColor')],\n    ['borderradius', new DimensionStyleParser('borderRadius')],\n    ['borderstyle', new StyleParser('borderStyle')],\n    ['borderwidth', new BorderWidthParser('borderWidth')],\n    ['borderbottomwidth', new DimensionStyleParser('borderBottomWidth')],\n    ['borderleftwidth', new DimensionStyleParser('borderLeftWidth')],\n    ['borderrightwidth', new DimensionStyleParser('borderRightWidth')],\n    ['bordertopwidth', new DimensionStyleParser('borderTopWidth')],\n    ['color', new StyleParser('color')],\n    //['cursor', ''],\n    //['display', ''],\n    ['fontsize', new DimensionStyleParser('fontSize')],\n    ['fontfamily', new StyleParser('fontFamily')],\n    ['fontstyle',new StyleParser('fontStyle')],\n    //['fontunit', ''],\n    ['fontvariant', new StyleParser('fontVariant')],\n    ['fontweight', new StyleParser('fontWeight')],\n    ['height', new DimensionStyleParser('height')],\n    ['horizontalalign', new DimensionStyleParser('horizontalAlign')],\n    ['lineheight', new DimensionStyleParser('lineHeight')],\n    ['margin', new MarginParser()],\n    ['marginbottom', new DimensionStyleParser('marginBottom')],\n    ['marginleft', new DimensionStyleParser('marginLeft')],\n    ['marginright', new DimensionStyleParser('marginRight')],\n    ['margintop', new DimensionStyleParser('marginTop')],\n    ['opacity', new NumericalStyleParser('opacity')],\n    ['overflow', new StyleParser('overflow')],\n    ['padding', new PaddingParser()],\n    ['paddingbottom', new DimensionStyleParser('paddingBottom')],\n    ['paddingleft', new DimensionStyleParser('paddingLeft')],\n    ['paddingright', new DimensionStyleParser('paddingRight')],\n    ['paddingtop', new DimensionStyleParser('paddingTop')],\n    //['picturesource', ''],\n    ['textalign', new StyleParser('textAlign')],\n    ['textdecoration', new StyleParser('textDecorationLine')],\n    ['horizontalalign', new HorizontalAlignParser()],\n    ['verticalalign', new StyleParser('textAlignVertical')],\n    //['visibility', ''],\n    //['whitespace', ''],\n    ['width', new DimensionStyleParser('width')],\n    //['wordbreak', ''],\n    ['zindex', new NumericalStyleParser('zIndex')]\n]);\n\nconst TextStyleProps = [\n    'color',\n    'fontSize',\n    'fontFamily',\n    'fontStyle',\n    'fontVariant',\n    'fontWeight',\n    'lineHeight',\n    'textAlign',\n    'textDecorationLine',\n    'textAlignVertical'];\n\n\nexport default (element: HTMLElement, isStyleProperty?: (styleProp: string) => boolean) => {\n    const rootStyle: any = {};\n    const textStyle: any = {};\n    StyleProps.forEach((parser, k) => {\n        if(!!element.hasAttribute(k) && isStyleProperty && isStyleProperty(k)) {\n            const value = element.getAttribute(k);\n            element.removeAttribute(k);\n            if (value) {\n                if (value.startsWith('bind:')) {\n                    rootStyle[parser.styleName || k ] = value;\n                } else {\n                    merge(rootStyle, parser.parse(value));\n                }\n            }\n        }\n    });\n    Object.keys(rootStyle).forEach(k => { \n        if (isNil(rootStyle[k]) ) {\n            delete rootStyle[k];\n        }\n    });\n    if (isEmpty(rootStyle)) {\n        return null;\n    }\n    if (rootStyle['borderStyle'] === 'none') {\n        delete rootStyle['borderStyle'];\n    }\n    TextStyleProps.forEach(k => {\n        textStyle[k] = rootStyle[k];\n    });\n    const styles: any = {root: rootStyle};\n    if (!isEmpty(textStyle)) {\n        styles.text = textStyle;\n    }\n    return styles;\n};", "wavemaker-rn-codegen/src/transpile/bind.ex.transformer.ts": "import {\n  AST,\n  Binary,\n  BindingPipe,\n  Chain,\n  Conditional,\n  ImplicitReceiver,\n  KeyedRead,\n  Lexer,\n  LiteralArray,\n  LiteralMap,\n  LiteralPrimitive,\n  MethodCall,\n  Parser,\n  PrefixNot,\n  PropertyRead,\n  PropertyWrite\n} from '@angular/compiler';\nimport { isString } from 'lodash';\n\n\nconst STR_ESCAPE_REGEX = /[^ a-zA-Z0-9]/g;\nexport const FORMAT_CONTEXT = \"{formatContext:''}\";\n\nconst stringEscapeFn = (str: string) => {\n    return '\\\\u' + ('0000' + str.charCodeAt(0).toString(16)).slice(-4);\n};\n\nclass ExpressionTransformer {\n\n  constructor(private ctx = 'this', private mode: ('attr' | 'event') = 'attr') {}\n\n  processImplicitReceiver(ast: ImplicitReceiver) {\n    return this.ctx;\n  }\n\n  processLiteralPrimitive(ast: LiteralPrimitive) {\n    return isString(ast.value) ? `\"${ast.value.replace(/\"/g, '\\\"')}\"` : ast.value;\n  }\n\n  processLiteralArray(ast: LiteralArray) {\n    const s = [];\n    for (const item of ast.expressions) {\n        s.push(this.build(item));\n    }\n    return `[${s.join(',')}]`;\n  }\n\n  processLiteralMap(ast: LiteralMap) {\n    const _values = [] as any[];\n    for (const _value of ast.values) {\n        _values.push(this.build(_value));\n    }\n    return (`{${ast.keys.map((k, i) => `'${k.key}':${_values[i]}`)}}`);\n  }\n\n  processPropertyRead(ast: PropertyRead) {\n    const r = this.build(ast.receiver);\n    return `${r}.${ast.name}`\n  }\n\n  processKeyedRead(ast: KeyedRead) {\n    const k = this.build(ast.key);\n    const o = this.build(ast.receiver);\n    return `${o}[${k}]`;\n  }\n\n  processPrefixNot(ast: PrefixNot) {\n    const r = this.build(ast.expression);\n    return `!(${r})`;\n  }\n\n  processBinary(ast: Binary) {\n    const l = this.build(ast.left);\n    const r = this.build(ast.right);\n    return `(${l}${ast.operation}${r})`;\n  }\n\n  processConditional(ast: Conditional) {\n    const condition = this.build(ast.condition);\n    const trueExp = this.build(ast.trueExp);\n    const falseExp = this.build(ast.falseExp);\n    return `(${condition}?${trueExp}:${falseExp})`;\n  }\n\n  processChain(ast: Chain) {\n    return ast.expressions.map(e => this.build(e)).join(';');\n  }\n\n  processPropertyWrite(ast: PropertyWrite) {\n    let receiver, lhs;\n    if (ast.receiver instanceof ImplicitReceiver) {\n        lhs = `${this.ctx}.${ast.name}`;\n    } else {\n        receiver = this.build(ast.receiver);\n        lhs = `${receiver}${receiver.length ? '.' : ''}${ast.name}`;\n    }\n\n    const rhs = this.build(ast.value);\n    return `${lhs} = ${rhs}`;\n  }\n\n  processMethodCall(ast: MethodCall) {\n    const _args = [];\n    for (const arg of ast.args) {\n        let argExp = this.build(arg);\n        if (this.mode === 'event') {\n            argExp = argExp.replace(`${this.ctx}.`, '');\n        }\n        _args.push(argExp);\n    }\n    const fn = this.build(ast.receiver);\n    return `${fn}.${ast.name}(${_args.join(',')})`;\n  }\n\n  processPipe(ast: BindingPipe) {\n    let name = ast.name;\n    const _args = [];\n    const exp = this.build(ast.exp);\n    for (const arg of ast.args) {\n        _args.push(this.build(arg));\n    }\n    if (_args[0] && name === 'custom') {\n      name = `custom.${_args[0]}`.replace(/\"/g, '');\n      _args.shift();\n    }\n    _args.unshift(exp);\n    return `${this.ctx}.formatters.get('${name}').format(${_args}, ${FORMAT_CONTEXT})`;\n  }\n\n  build(ast: AST): string {\n    if (ast instanceof ImplicitReceiver) {\n        return this.processImplicitReceiver(ast as ImplicitReceiver);\n    } else if (ast instanceof LiteralPrimitive) {\n        return this.processLiteralPrimitive(ast as LiteralPrimitive);\n    } else if (ast instanceof LiteralArray) {\n        return this.processLiteralArray(ast as LiteralArray);\n    } else if (ast instanceof LiteralMap) {\n        return this.processLiteralMap(ast as LiteralMap);\n    } else if (ast instanceof PropertyRead) {\n        return this.processPropertyRead(ast as PropertyRead);\n    } else if (ast instanceof PropertyWrite) {\n        return this.processPropertyWrite(ast as PropertyWrite);\n    } else if (ast instanceof KeyedRead) {\n        return this.processKeyedRead(ast as KeyedRead);\n    } else if (ast instanceof PrefixNot) {\n        return this.processPrefixNot(ast as PrefixNot);\n    } else if (ast instanceof Binary) {\n        return this.processBinary(ast as Binary);\n    } else if (ast instanceof Conditional) {\n        return this.processConditional(ast as Conditional);\n    } else if (ast instanceof MethodCall) {\n        return this.processMethodCall(ast as MethodCall);\n    }  else if (ast instanceof Chain) {\n        return this.processChain(ast as Chain);\n    } else if (ast instanceof BindingPipe) {\n        return this.processPipe(ast as BindingPipe);\n    }\n    return '';\n  }\n}\n\nconst transform = (expr: string, scopeName = 'this', mode: ('event' | 'attr') = 'attr'): string => {\n  expr = expr && expr.trim();\n  if (!expr || !expr.length) {\n    return '';\n  }\n  try {\n    const parser = new Parser(new Lexer);\n    let expressions = expr.split(';'), transformedExpressions:any = [];\n    const $iExp = new RegExp('\\\\['+ scopeName +'\\\\.\\\\$i\\\\]', 'g');\n    expressions.forEach((currentExp: any) => {\n      const ast = parser.parseBinding(currentExp, '',0);\n      let exp = new ExpressionTransformer(scopeName, mode).build(ast.ast);\n      if (typeof exp === 'string') {\n        exp = exp.replace($iExp, '[0]');\n      }\n      transformedExpressions.push(exp);\n    });\n    return transformedExpressions.join(';');\n  } catch(e: any) {\n    console.error(`failed to parse ${expr}`);\n    throw new Error(e);\n  }\n};\n\nexport default transform;\n\n(() => {\n  const i = `Variables.callme($event)`;\n  const s = transform(i);\n  console.log(i + ' : \\n ' + s );\n});\n", "wavemaker-rn-codegen/src/transpile/transpile.ts": "import { assign, isNil, assignIn, capitalize, includes, isEmpty, isString, keys, replace } from 'lodash';\nimport { parse, HTMLElement, NodeType } from 'node-html-parser';\nimport { prependSpace } from '../fomatter';\nimport transformEx, { FORMAT_CONTEXT } from './bind.ex.transformer';\nimport transformStyleAttrs from './style.transformer';\nimport { parseProperty } from \"./property/property-parser\";\nexport const generateRandomString = (length=10) => Math.random().toString(20).substr(2, length);\n\nexport class TranspilationContext {\n    result: TranspiledOutput;\n    transformer: Transformer;\n    isPartOfPrefab: boolean;\n    listener?: string;\n    props: string[];\n    data: any;\n\n    constructor(args: {\n        result: TranspiledOutput,\n        transformer: Transformer,\n        isPartOfPrefab: boolean,\n        listener?: string,\n        props: string[]\n        data?: any\n    }) {\n        this.result = args.result;\n        this.transformer = args.transformer;\n        this.isPartOfPrefab = args.isPartOfPrefab;\n        this.listener = args.listener;\n        this.props = args.props;\n        this.data = assign({}, args.data);\n    }\n\n    get(key: string): any {\n        return this.data && this.data[key];\n    }\n\n    set(key: string, value: any) {\n        this.data[key] = value;\n    }\n}\n\nexport interface Transformer {\n    pre: (element: HTMLElement, context: TranspilationContext) => string;\n    post: (element: HTMLElement, context: TranspilationContext) => string;\n    imports: (element: HTMLElement, context: TranspilationContext) => Import[];\n    partials?: (element: HTMLElement, context: TranspilationContext) => string[];\n    prefabs?: (element: HTMLElement,  context: TranspilationContext) => string[];\n    createComponent?: (element: HTMLElement,  context: TranspilationContext) => any;\n    isStyleProperty?: (propName: string, element: HTMLElement,  context: TranspilationContext) => boolean;\n}\n\nexport interface Import {\n    name: string;\n    as?: string;\n    from: string;\n    lazy?: boolean;\n}\n\nexport interface TranspiledOutput {\n    markup: string;\n    components: any;\n    partials: string[];\n    prefabs: string[];\n    imports: Import[];\n}\n\nclass Transpiler {\n\n    private transformers = new Map<string, Transformer>();\n\n    private componentNamesList: string[] = [];\n\n    private transpileForPageScroll(e:HTMLElement, c: HTMLElement){\n        // making page scrollable if only navbar or tabbar has hideonscroll prop\n        const hideOnScroll = c?.parentNode?.rawTagName === 'wm-page' && c?.attributes?.hideonscroll === 'true'\n        if( hideOnScroll ){\n            e.setAttribute('scrollable', 'true')\n        }\n    }\n\n    public preTranspile(e: HTMLElement) {\n        Object.keys(e.attributes).forEach(name => {\n            let value: string = e.attributes[name];\n            if (value.startsWith('bind:')) {\n                value = value.substring(5);\n                e.setAttribute(name, 'bind:' + transformEx(value, 'fragment', 'attr'));\n            } else if (name === 'groupby' && value.includes('(')) {\n                e.setAttribute(name, transformEx(value, 'fragment', 'event'));\n            } else if (name.startsWith('on-')) {\n                if (name === 'on-tap') {\n                    value = (e.getAttribute('on-click') || '') + ';' + value\n                    e.removeAttribute('on-click');\n                } else if (name === 'on-click') {\n                    if (e.hasAttribute('on-tap')) {\n                        return;\n                    }\n                    name = 'on-tap';\n                    e.removeAttribute('on-click');\n                }\n                e.setAttribute(name, transformEx(value, 'fragment', 'event') + ';');\n            }\n        });\n        e.childNodes.forEach(c => {\n            if (c instanceof HTMLElement) {\n                if (c.rawTagName === 'wm-checkbox' && c.getAttribute('type') === 'toggle') {\n                    c.rawTagName = 'wm-toggle';\n                }\n                if (c.rawTagName === 'wm-chart') {\n                    const type = c.getAttribute('type');\n                    if (type === 'Line') {\n                        c.rawTagName = 'wm-line-chart';\n                    } else if (type === 'Pie') {\n                        c.rawTagName = 'wm-pie-chart';\n                    } else if (type === 'Bar') {\n                        c.rawTagName = 'wm-bar-chart';\n                    } else if (type === 'Column') {\n                        c.rawTagName = 'wm-column-chart';\n                    } else if (type === 'Area') {\n                        c.rawTagName = 'wm-area-chart';\n                    } else if (type === 'Donut') {\n                        c.rawTagName = 'wm-donut-chart';\n                    } else if (type === 'Bubble') {\n                        c.rawTagName = 'wm-bubble-chart';\n                    } else if (type === 'Stack') {\n                        c.rawTagName = 'wm-stack-chart';\n                    }\n                }\n                if(c.rawTagName === 'wm-mobile-navbar' || c.rawTagName === 'wm-mobile-tabbar'){\n                    this.transpileForPageScroll(e, c);\n                }\n                this.preTranspile(c);\n            }\n        });\n    }\n\n    private transformStyles(e: HTMLElement, context: TranspilationContext) {\n        const widgetName = e.getAttribute('name');\n        const styleObj = transformStyleAttrs(e, (propName: string) => {\n            const transformer = context.transformer\n            if (transformer && transformer.isStyleProperty) {\n                return transformer.isStyleProperty(propName, e, context);\n            }\n            return true;\n        }) ||  {};\n        let classes = e.getAttribute('class') || '';\n        let isStatic = true;\n        let styles = styleObj;\n        if (styles) {\n            Object.keys(styleObj).forEach((i) => {\n                Object.keys(styleObj[i]).forEach((name) => {\n                    const styleProp = styleObj[i][name];\n                    if (isString(styleProp) && styleProp.startsWith('bind:')) {\n                        isStatic = false;\n                        styleObj[i][name] = `{___${styleProp.substring(5)}___}`;\n                    }\n                });\n            });\n            if (styles.background) {\n                styles.root = styles.root || {};\n                styles.root._background = styles.background;\n                delete styles.background;\n            }\n            styles = JSON.stringify(styleObj).replace(/\\\\\"/g, '\"');\n            if (!isStatic) {\n                styles = styles.replace(/\"\\{___/g, 'watch(() =>');\n                styles = styles.replace(/___\\}\"/g, ')');\n            }\n        }\n        let conditionalClasses = e.getAttribute('conditionalclass') || e.getAttribute('ngclass');\n        if (classes.startsWith('bind:')) {\n            classes = `{${classes.substring(5)}}`;\n        }\n        if (conditionalClasses) {\n            conditionalClasses = conditionalClasses.startsWith('bind:') ? `${conditionalClasses.substring(5)}` : conditionalClasses;\n            if(conditionalClasses.startsWith('{') && conditionalClasses.endsWith('}')){\n                conditionalClasses = conditionalClasses.slice(1, -1); \n                let expressions = conditionalClasses.split(',').map(expression => {\n                    const [classname, condition] = expression.split(':');\n                    return `(${condition.trim()} ? ${classname.replace(/'$/,\" '\")} : '')`;\n                });    \n                conditionalClasses = expressions.join(\"+\");\n            }\n            if (classes?.startsWith('{')) {\n                classes = classes.substring(0, classes.length - 1);\n                classes = `${classes} + ' ' + ${conditionalClasses}}`;\n            } else if (classes) {\n                classes = `{'${classes} ' + ${conditionalClasses}}`;\n            } else {\n                classes = `{${conditionalClasses}}`;\n            }\n        } else if (!!classes && !classes.startsWith('{')) {\n            classes = `'${classes}'`;\n        }\n        e.removeAttribute('conditionalclass');\n        e.removeAttribute('ngclass');\n        e.removeAttribute('class');\n        return {\n            styles: styles,\n            classname: classes\n        };\n    }\n\n    private findArgs(str: string) {\n        let argStr = '';\n        let maxSplits = 0;\n        (str.match(/\\([^;]*\\)/g))?.forEach(s => {\n            const c = s.split(',').length;\n            if (maxSplits < c) {\n                maxSplits = c;\n                argStr = s;\n            }\n        });\n        argStr = argStr.replace(/\\(|\\)/g, '');\n        if (argStr.indexOf('currentItemWidgets') > 0) {\n            argStr = argStr.split(',').filter((s) => !includes(['$item', 'currentItemWidgets'], s.trim())).join(',');\n        }\n        return `(${argStr})`;\n    }\n\n    private quoteAttr(v: any) {\n        return ('' + v) /* Forces the conversion to string. */\n            .replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n            .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n            .replace(/\"/g, '&quot;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    };\n\n    private transformAttr(tagName: string, name: string, value: string, context: TranspilationContext, tx?: Function) {\n        if (name === 'styles' || name === 'classname') {\n            // conntinue\n        } else if(name === 'groupby' && value.includes('(')) {\n            value = `${this.findArgs(value)} => ${value}`;\n            value = `{${value}}`;\n        } else if (name.startsWith('on-')) {\n            name = 'on' + name.charAt(3).toUpperCase() + name.substr(4);\n            value = value.replace(/item,/g, '$item,');\n            value = `${this.findArgs(value)} => {${value}}`;\n            value = `{${value}}`;\n        } else if (value.startsWith('bind:')) {\n            let exp = `${value.substring(5)}`;\n            value = `{${parseProperty(exp, name, tagName, true)}}`;\n            if (name === 'conditionalclass') {\n                return '';\n            }\n        } else {\n            value = this.quoteAttr(value);\n            value = parseProperty(value, name, tagName);\n        }\n        if (tx) {\n            const rvalue = tx(name, value);\n            if (!isNil(rvalue)) {\n                value = rvalue;\n            }\n        }\n        return isNil(value) || isEmpty(value) ? '' : `${name}=${value}`;\n    }\n\n    public transformAttrs (e: HTMLElement, context: TranspilationContext, tx?: Function) {\n        const {styles, classname} = this.transformStyles(e, context);\n        const tagName = e.tagName.toLowerCase();\n        if (!isEmpty(styles) && styles!= '{}') {\n            e.setAttribute('styles', `{${styles}}`);\n        }\n        if (!isEmpty(classname) && classname) {\n            e.setAttribute('classname', classname);\n        }\n        \n        if (tagName === 'wm-composite' && e.getAttribute(\"captionposition\") === 'floating') {\n            const labelNode = e.childNodes.find((node: any) => node.tagName && node.tagName?.toLowerCase() === 'wm-label') as HTMLElement;\n            const labelCaption = labelNode?.getAttribute('caption') || '';\n            const containerNode = e.childNodes.find((node: any) => node.tagName && node.tagName?.toLowerCase() === 'wm-container') as HTMLElement;\n            const inputNode = containerNode?.childNodes?.find((node: any) => {\n                const inputTag = node.tagName?.toLowerCase();\n                return (inputTag === 'wm-text' \n                    || inputTag === 'wm-number'\n                    || inputTag === 'wm-currency'\n                    || inputTag === 'wm-date'\n                    || inputTag === 'wm-time'\n                    || inputTag === 'wm-datetime'\n                    || inputTag === 'wm-textarea')\n            }) as HTMLElement;\n\n            if (inputNode) {\n                inputNode.setAttribute('floatinglabel', labelCaption);\n                labelNode.remove();\n            }\n        }\n\n        const str = Object.keys(e.attributes)\n            .map(name => this.transformAttr(tagName, name, e.attributes[name], context, tx))\n            .join(' ') + ` listener={${context.listener || 'fragment'}}`;\n        return str;\n    }\n\n    private createUniqueComponentName(components: any , name: string, counter: number = 0): string {\n        name = name + counter;\n        if (components[name]) {\n            return this.createUniqueComponentName(components, name, counter++);\n        }\n        return name;\n    }\n\n    public createComponent(e: HTMLElement, context: TranspilationContext) {\n        const result = context.result;\n        let widgetName = 'PC_' + capitalize(e.attrs['name']);\n        widgetName = replace(widgetName, /[^a-zA-Z0-9]/g, '_');\n        if (this.componentNamesList.indexOf(widgetName) !== -1) {\n            widgetName = this.createUniqueComponentName(result.components, widgetName);\n        }\n        this.componentNamesList.push(widgetName);\n        const props = ['fragment', ...context.props];\n        result.components[widgetName] = `({${props.join(',')}}) => {\n            return (${result.markup});\n        }`;\n        result.markup = `<${widgetName} ${props.map(p => `${p}={${p}}`).join(' ')}/>`;\n        return result;\n    }\n\n    public transpile = (e: HTMLElement, isPartOfPrefab: boolean, splitCode = true, oldContext?: TranspilationContext) => {\n        const transformer = this.transformers.get(e && e.tagName.toLowerCase());\n        let result = {\n            markup: '',\n            components: {},\n            attrs: {},\n            imports: [] as Array<Import>,\n            partials: [],\n            prefabs: []\n        } as TranspiledOutput;\n        if (!e.getAttribute('name')) {\n            e.setAttribute('name', `${e.tagName.toLowerCase().replace(/-/g, '_')}_${generateRandomString()}`);\n        }\n        // for every new page, initially context is empty. Hence clearing the prev page componentNamesList array.\n        if (!oldContext) {\n            this.componentNamesList = [];\n        }\n        if (transformer != null) {\n            const context = new TranspilationContext({\n                result: result,\n                isPartOfPrefab: isPartOfPrefab,\n                transformer: transformer,\n                listener: oldContext?.listener,\n                props: oldContext?.props || [],\n                data: oldContext?.data\n            });\n            result.imports.push(...(transformer.imports(e, context)));\n            result.markup += transformer.pre(e, context).replace(new RegExp(FORMAT_CONTEXT, 'g'), \"\") + (e.childNodes.length > 0 ? '\\n' : '');\n            e.childNodes.forEach(c => {\n                if (c && c.nodeType == NodeType.ELEMENT_NODE) {\n                    const cResult = this.transpile(c as HTMLElement, isPartOfPrefab, splitCode, context);\n                    assignIn(result.components, cResult.components)\n                    result.markup +=  cResult.markup;\n                    result.imports.push(...cResult.imports);\n                    result.prefabs.push(...cResult.prefabs);\n                    result.partials.push(...cResult.partials);\n                    result.components = { ...result.components, ...cResult.components};\n                }\n            });\n            transformer.partials && result.partials.push(...(transformer.partials(e, context)));\n            transformer.prefabs && result.prefabs.push(...(transformer.prefabs(e, context)));\n            result.markup += transformer.post(e, context).replace(new RegExp(FORMAT_CONTEXT, 'g'), \"\");\n            splitCode && transformer.createComponent && transformer.createComponent(e, context);\n            const accessRole = e.attrs['accessroles'];\n            if(accessRole) {\n                result.markup= `{fragment.appConfig.SecurityService.hasAccessToWidget('${accessRole}') ? (${result.markup}): null}`;\n            }\n            result.markup = prependSpace(result.markup, 2) + '\\n';\n        }\n        return result;\n    }\n\n    registerTransformer(tagName: string, transformer: Transformer) {\n        transpiler.transformers.set(tagName, transformer);\n    }\n}\n\nconst transpiler = new Transpiler();\n\nexport const registerTransformer = transpiler.registerTransformer.bind(transpiler);\n\nexport const transpileMarkup = (markup: string, isPartOfPrefab: boolean, splitCode?: boolean) => {\n    const element = parse(markup, {\n        blockTextElements: {}\n    }).firstChild as HTMLElement;\n    transpiler.preTranspile(element);\n    const result = transpiler.transpile(element, isPartOfPrefab, splitCode);\n    return result;\n};\n\nexport const transformAttrs = transpiler.transformAttrs.bind(transpiler);\n\nexport const createComponent = transpiler.createComponent.bind(transpiler);\n\nexport const createExpression=  (element: HTMLElement, attrName: string) => {\n    let displayexpression = element.attrs[attrName];\n    if (displayexpression?.startsWith('bind:')) {\n        displayexpression = displayexpression.substring(5);\n        displayexpression = displayexpression.replace(/$\\[(.*?)\\]/g, \"$['$1']\");\n        displayexpression = displayexpression.replace(/fragment\\.\\$item/g, \"$item\");\n        displayexpression = displayexpression.replace(/fragment\\.\\$index/g, \"$index\");\n        displayexpression = displayexpression.replace(/fragment\\.\\$length/g, \"$length\");\n        displayexpression = displayexpression.replace(/fragment\\.\\$/g, '$item');\n        displayexpression = displayexpression.replace(/\\$item\\['fragment.(.*?)'\\]/g, \"$item['$1']\");\n        displayexpression = displayexpression.replace(/\\$item\\[fragment.(.*?)\\]/g, \"$item['$1']\");\n        displayexpression = displayexpression.replace(/\\$item\\['(.*?)'\\]/g, \"_get($item, '$1')\");\n        displayexpression = displayexpression.replace(/fragment.index/g, \"$index\");\n        if (displayexpression.indexOf('fragment.formatters.') >= 0) {\n            displayexpression = displayexpression.replace(new RegExp(FORMAT_CONTEXT, 'g'), \"$item\");\n        }\n        const exp = includes(displayexpression, '(') ? `${displayexpression}` : displayexpression;\n        if(displayexpression.indexOf('$index')>=0){\n            return `{($item, $index, $length) => (${exp})}`;\n        }\n        return `{($item) => (${exp})}`;\n    }\n}\n", "wavemaker-rn-codegen/src/transpile/property/property-parser.ts": "import { isString, isUndefined } from 'lodash';\nimport { DimensionStyleParser } from \"../style/dimension-style.parser\";\nimport { Parser } from './base-parser';\nimport { SHOW_IN_DEVICE_PARSER } from './show-in-device.parser';\n\nclass NumericParser extends Parser {\n    parse(value: string) {\n        const dimensionVal = new DimensionStyleParser('dimension').parse(value).dimension;\n        return isString(dimensionVal) && dimensionVal.endsWith('%')\n            ? `{'${dimensionVal}'}` : `{${dimensionVal}}`;\n    }\n\n    parseBind(value: string) {\n        return `fragment.toNumber(${value})`;\n    }\n}\nclass BooleanParser extends Parser {\n    parse(value: string): string {\n        if (value === 'true' || value === 'false') {\n            return `{${(value === 'true')}}`;\n        }\n        return super.parse(value);\n    }\n\n    parseBind(value: any) {\n        return value == 'true' ? true : value == 'false' ? false : value;\n    }\n}\nclass ArrayParser extends Parser {\n    parse(value: string): string {\n        if (!isNaN(Number(value))) {\n            return `{${value}}`;\n        }\n        if (value.indexOf(\",\") > 0) {\n            return `{[${value.split(',').map(v => isNaN(Number(v)) ? `\"${v}\"` : v).join(',')}]}`;\n        }\n        return super.parse(value);\n    }\n\n    parseBind(value: string) {\n        return super.parseBind(value);\n    }\n}\n\nconst NUMERIC_PARSER = new NumericParser();\nconst BOOLEAN_PARSER = new BooleanParser();\nconst STRING_PARSER = new Parser();\nconst ARRAY_PARSER = new ArrayParser();\n\nconst PARSER_MAP = new Map(\n    [['base', new Map([\n        ['animationinterval', NUMERIC_PARSER],\n        ['animationdelay', NUMERIC_PARSER],\n        ['autofocus', BOOLEAN_PARSER],\n        ['autoopen', BOOLEAN_PARSER],\n        // ['autocomplete', BOOLEAN_PARSER],\n        ['autotrim', BOOLEAN_PARSER],\n        ['autoplay', BOOLEAN_PARSER],\n        ['backbutton', BOOLEAN_PARSER],\n        ['cache', BOOLEAN_PARSER],\n        ['checkedvalue', BOOLEAN_PARSER],\n        ['collapsible', BOOLEAN_PARSER],\n        ['columnwidth', NUMERIC_PARSER],\n        ['controls', BOOLEAN_PARSER],\n        ['closable', BOOLEAN_PARSER],\n        ['closeothers', BOOLEAN_PARSER],\n        ['defaultpaneindex', NUMERIC_PARSER],\n        ['deferload', BOOLEAN_PARSER],\n        ['disabled', BOOLEAN_PARSER],\n        ['disableitem', BOOLEAN_PARSER],\n        ['donutratio', NUMERIC_PARSER],\n        ['encodeurl', BOOLEAN_PARSER],\n        ['expanded', BOOLEAN_PARSER],\n        ['flexgrow', NUMERIC_PARSER],\n        ['flexshrink', NUMERIC_PARSER],\n        ['hastwowaybinding', BOOLEAN_PARSER],\n        ['headernavigation', BOOLEAN_PARSER],\n        ['hideclose', BOOLEAN_PARSER],\n        ['iconsize', NUMERIC_PARSER],\n        ['imageheight', NUMERIC_PARSER],\n        ['imagequality', NUMERIC_PARSER],\n        ['imagetargetwidth', NUMERIC_PARSER],\n        ['imagetargetheight', NUMERIC_PARSER],\n        ['imagewidth', NUMERIC_PARSER],\n        ['index', NUMERIC_PARSER],\n        ['isDataSetBound', BOOLEAN_PARSER],\n        ['isRelated', BOOLEAN_PARSER],\n        ['limit', NUMERIC_PARSER],\n        ['loop', BOOLEAN_PARSER],\n        ['minchars', NUMERIC_PARSER],\n        ['maxchars', NUMERIC_PARSER],\n        ['maxsize', NUMERIC_PARSER],\n        ['maxvalue', NUMERIC_PARSER],\n        ['minvalue', NUMERIC_PARSER],\n        ['multiselect', BOOLEAN_PARSER],\n        ['modal', BOOLEAN_PARSER],\n        ['multilineskeleton', BOOLEAN_PARSER],\n        ['muted', BOOLEAN_PARSER],\n        ['pagesize', NUMERIC_PARSER],\n        ['primaryKey', BOOLEAN_PARSER],\n        ['offsettop', NUMERIC_PARSER],\n        ['offsetbottom', NUMERIC_PARSER],\n        ['offsetleft', NUMERIC_PARSER],\n        ['offsetright', NUMERIC_PARSER],\n        ['refreshdataonattach', BOOLEAN_PARSER],\n        ['readonly', BOOLEAN_PARSER],\n        ['required', BOOLEAN_PARSER],\n        ['scrollable', BOOLEAN_PARSER],\n        ['show', BOOLEAN_PARSER],\n        ['showindevice', SHOW_IN_DEVICE_PARSER],\n        ['showskeleton', BOOLEAN_PARSER],\n        ['showclear', BOOLEAN_PARSER],\n        ['searchbutton', BOOLEAN_PARSER],\n        ['selectionlimit', NUMERIC_PARSER],\n        ['selectfirstitem', BOOLEAN_PARSER],\n        ['showcaptions', BOOLEAN_PARSER],\n        ['showheader', BOOLEAN_PARSER],\n        ['speed', NUMERIC_PARSER],\n        ['step', NUMERIC_PARSER],\n        ['uncheckedvalue', BOOLEAN_PARSER],\n        ['updateMode', BOOLEAN_PARSER],\n        ['vertical', BOOLEAN_PARSER],\n        ['xscolumnwidth', NUMERIC_PARSER],\n        ['cancelable', BOOLEAN_PARSER],\n        ['highlightpoints', BOOLEAN_PARSER],\n        ['tooltips', BOOLEAN_PARSER],\n        ['showvalues', BOOLEAN_PARSER],\n        ['showyaxis', BOOLEAN_PARSER],\n        ['showxaxis', BOOLEAN_PARSER],\n        ['skeletonwidth', NUMERIC_PARSER],\n        ['skeletonheight', NUMERIC_PARSER],\n        ['wrap', BOOLEAN_PARSER],\n        ['thickness', NUMERIC_PARSER],\n        ['iconheight', NUMERIC_PARSER],\n        ['iconwidth', NUMERIC_PARSER],\n        ['iconmargin', NUMERIC_PARSER],\n        ['offsetxaxis', NUMERIC_PARSER],\n        ['offsetyaxis', NUMERIC_PARSER],\n        ['yaxislabeldistance', NUMERIC_PARSER],\n        ['xaxislabeldistance', NUMERIC_PARSER],\n        ['enableskip', BOOLEAN_PARSER],\n        ['disableprev', BOOLEAN_PARSER],\n        ['disablenext', BOOLEAN_PARSER],\n        ['disabledone', BOOLEAN_PARSER],\n        ['showprev', BOOLEAN_PARSER],\n        ['shownext', BOOLEAN_PARSER],\n        ['showdone', BOOLEAN_PARSER],\n        ['nooflines', NUMERIC_PARSER],\n        ['showskeletonchildren', BOOLEAN_PARSER],\n        ['numberofskeletonitems', NUMERIC_PARSER],\n        ['radiosetscroll', BOOLEAN_PARSER],\n        [\"skeletonanimationresource\", STRING_PARSER],\n        [\"skeletonanimationspeed\", NUMERIC_PARSER],\n        ['enablegestures', BOOLEAN_PARSER],\n        ['dateheadertitle', STRING_PARSER],\n        ['dateconfirmationtitle', STRING_PARSER],\n        ['datecanceltitle', STRING_PARSER],\n        ['timeheadertitle', STRING_PARSER],\n        ['timeconfirmationtitle', STRING_PARSER],\n        ['timecanceltitle', STRING_PARSER],\n        ['fastload', BOOLEAN_PARSER],\n        ['enablescroll', BOOLEAN_PARSER],\n        ['disabletoucheffect', BOOLEAN_PARSER],\n        ['threshold', NUMERIC_PARSER],\n        ['aspectRatio', NUMERIC_PARSER],\n        ['showdefaultvideoposter', BOOLEAN_PARSER],\n        ['hidehorizontalscrollbar', BOOLEAN_PARSER],\n        ['issticky', BOOLEAN_PARSER],\n        ['hideonscroll', BOOLEAN_PARSER],\n        ['showerror', BOOLEAN_PARSER],\n        ['keyboardverticaloffset', NUMERIC_PARSER],\n        ['consumenotch', BOOLEAN_PARSER],\n        ['triggeronrenderwhenhidden', BOOLEAN_PARSER],\n        ['barwidth', NUMERIC_PARSER],\n        ['showxaxislabels', BOOLEAN_PARSER],\n        ['showyaxislabels', BOOLEAN_PARSER],\n        ['horizontalondemandenabled', BOOLEAN_PARSER],\n        ['shouldswipe', BOOLEAN_PARSER],\n        ['debouncetime', NUMERIC_PARSER],\n        ['limitdisplaytext', STRING_PARSER]\n    ])\n    ], ['wm-checkbox', new Map([\n        ['datavalue', BOOLEAN_PARSER]\n    ])], ['wm-toggle', new Map([\n        ['datavalue', BOOLEAN_PARSER]\n    ])], ['wm-number', new Map([\n        ['datavalue', NUMERIC_PARSER]\n    ])], ['wm-currency', new Map([\n        ['datavalue', NUMERIC_PARSER]\n    ])], ['wm-rating', new Map([\n        ['datavalue', NUMERIC_PARSER]\n    ])], ['wm-slider', new Map([\n        ['datavalue', ARRAY_PARSER],\n        ['showmarkers', BOOLEAN_PARSER],\n        ['showtooltip', BOOLEAN_PARSER],\n        ['range', BOOLEAN_PARSER],\n    ])], ['wm-progress-bar', new Map([\n        ['datavalue', NUMERIC_PARSER]\n    ])], ['wm-progress-circle', new Map([\n        ['datavalue', NUMERIC_PARSER]\n    ])], ['wm-video', new Map([\n        ['controls', BOOLEAN_PARSER]\n    ])],\n    ['wm-chips', new Map([\n        ['searchable', BOOLEAN_PARSER]\n    ])]]);\n\nexport const parseProperty = (value: string, propertyName: string, widgetName: string, runtime = false) => {\n    if (isUndefined(value)) {\n        return `\"\"`;\n    }\n    let parser = PARSER_MAP.get(widgetName)?.get(propertyName);\n    parser = parser || PARSER_MAP.get('base')?.get(propertyName);\n    if (parser) {\n        return runtime ? parser.parseBind(value) : parser.parse(value);\n    }\n    return runtime ? STRING_PARSER.parseBind(value) : STRING_PARSER.parse(value);\n};\n", "wavemaker-rn-codegen/src/transpile/property/base-parser.ts": "\nexport class Parser {\n    parse(value: string) {\n        return `\"${value}\"`;\n    }\n\n    parseBind(value: string) {\n        return value;\n    }\n}\n", "wavemaker-rn-codegen/src/transpile/property/show-in-device.parser.ts": "import { Parser } from \"../property/base-parser\";\n\nclass ShowInDeviceParser extends Parser {\n\n    parse(value: string) {\n        if (value) {\n            const devices = value.split(',');\n            if (devices.indexOf('all') < 0) {\n                return `{[${devices.map(d => `'${d}'`).join(',')}]}`;\n            }\n        }\n        return '';\n    }\n}\n\nexport const SHOW_IN_DEVICE_PARSER = new ShowInDeviceParser();", "wavemaker-rn-codegen/src/transpile/style/border-width.parser.ts": "import { MultiDimensionStyleParser } from \"./multi-dimension-style.parser\";\n\nexport class BorderWidthParser extends MultiDimensionStyleParser {\n    constructor(styleName: string) {\n        super(styleName);\n    }\n\n    parse(value: string) {\n        const values = super.parseDimensions(value);\n        return {\n            borderTopWidth: values[0],\n            borderRightWidth: values[1],\n            borderBottomWidth: values[2],\n            borderLeftWidth: values[3]\n        };\n    }\n}", "wavemaker-rn-codegen/src/transpile/style/horizontal-align.parser.ts": "import { StyleParser } from \"./style.parser\";\n\nconst alignValues = {\n    'left': 'flex-start',\n    'right': 'flex-end',\n    'center': 'center'\n} as any;\n\nexport class HorizontalAlignParser extends StyleParser {\n    constructor() {\n        super('');\n    }\n\n    parse(value: string) {\n        return {\n            textAlign: value,\n            flexDirection: 'row',\n            justifyContent: alignValues[value],\n            flexWrap: 'wrap'\n        }\n    }\n}", "wavemaker-rn-codegen/src/transpile/style/style.parser.ts": "export class StyleParser {\n\n    constructor(public styleName: string) {}\n\n    parse(value: string): any {\n        const style = {} as any;\n        style[this.styleName] = value;\n        return style;\n    };\n}", "wavemaker-rn-codegen/src/transpile/style/padding.parser.ts": "import { MultiDimensionStyleParser } from \"./multi-dimension-style.parser\";\n\nexport class PaddingParser extends MultiDimensionStyleParser {\n    constructor() {\n        super('padding');\n    }\n\n    parse(value: string) {\n        const values = super.parseDimensions(value);\n        return {\n            paddingTop: values[0],\n            paddingRight: values[1],\n            paddingBottom: values[2],\n            paddingLeft: values[3]\n        };\n    }\n}", "wavemaker-rn-codegen/src/transpile/style/multi-dimension-style.parser.ts": "import { DimensionStyleParser } from \"./dimension-style.parser\";\n\nexport abstract class MultiDimensionStyleParser extends DimensionStyleParser {\n    constructor(styleName: string) {\n        super(styleName);\n    }\n\n    parseDimensions(value: string): any {\n        const splits = value.split(' ').map(v => {\n            if (v != 'unset') {\n                return super.parse(v)[this.styleName];\n            }\n            return null;\n        });\n        if (splits.length === 1) {\n            splits[1] = splits[0];\n            splits[2] = splits[0];\n            splits[3] = splits[0];\n\n        } else if (splits.length === 2) {\n            splits[2] = splits[0];\n            splits[3] = splits[1];\n        }\n        return splits;\n    }\n}", "wavemaker-rn-codegen/src/transpile/style/dimension-style.parser.ts": "import { NumericalStyleParser } from \"./numeric-style.parser\";\n\nexport class DimensionStyleParser extends NumericalStyleParser {\n\n    constructor(styleName: string) {\n        super(styleName);\n    }\n\n    parse(value: string): any {\n        if (value === 'auto') {\n            return {};\n        } else if (value && value.endsWith('%')) {\n            const style = {} as any;\n            style[this.styleName] = value;\n            return style;\n        } else if (value && (value.endsWith('vw') || value.endsWith('vh'))) {\n            const style = {} as any;\n            style[this.styleName] = value;\n            return style;\n        }\n        return super.parse(value);\n    }\n}", "wavemaker-rn-codegen/src/transpile/style/numeric-style.parser.ts": "import { StyleParser } from \"./style.parser\";\n\nexport class NumericalStyleParser extends StyleParser {\n    constructor(styleName: string) {\n        super(styleName);\n    }\n\n    parse(value: string): any {\n        const match = value && value.match('^[0-9\\.-]+');\n        const style = {} as any;\n        let val = match ? parseFloat(match[0]) : 0;\n        if (value.includes('em')) {\n            val = val * 8;\n        }\n        style[this.styleName] = val;\n        return style;\n    }\n}", "wavemaker-rn-codegen/src/transpile/style/background-image.parser.ts": "import { fromUnicode } from \"../components/utils\";\nimport { StyleParser } from \"./style.parser\";\n\nexport class BackgroundImageParser extends StyleParser {\n    constructor() {\n        super('backgroundImage');\n    }\n\n    parse(url: string): any {\n        if (url) {\n            url = fromUnicode(url);\n        }\n        const style = {} as any;\n        style[this.styleName] = url ? fromUnicode(url) : url;\n        return style;\n    }\n}\n", "wavemaker-rn-codegen/src/transpile/style/margin.parser.ts": "import { MultiDimensionStyleParser } from \"./multi-dimension-style.parser\";\n\nexport class MarginParser extends MultiDimensionStyleParser {\n    constructor() {\n        super('');\n    }\n\n    parse(value: string) {\n        const values = super.parseDimensions(value);\n        return {\n            marginTop: values[0],\n            marginRight: values[1],\n            marginBottom: values[2],\n            marginLeft: values[3]\n        };\n    }\n}", "wavemaker-rn-codegen/src/transpile/components/utils.ts": "import { HTMLElement } from 'node-html-parser';\nimport { FORMAT_CONTEXT } from '../bind.ex.transformer';\n\nexport const fromUnicode = (str: String) => JSON.parse('\"' + str.replace(/\\\"/g, '\\\\\"') + '\"');\n\nexport const replaceAll = (str: string, find: string, replaceWith: string) => {\n    const splits = str.split(find);\n    if (splits.length > 1) {\n      return splits.join(replaceWith);\n    }\n    return str;\n};\n\n\nexport const findElement = (\n    e: HTMLElement,\n    tagName: string,\n    callback: (e: HTMLElement, index: number) => void,\n    options: { recursive: boolean } = {recursive: true}) => {\n        let index = 0;\n        e.childNodes.forEach(n => {\n        if (n && n instanceof HTMLElement) {\n            if (n.tagName === tagName) {\n                callback && callback(n, index++);\n            }\n            if (options.recursive) {\n                findElement(n, tagName, callback, options);\n            }\n        }\n        });\n};\n\nexport const transformRepeatChildData = (element: HTMLElement, dataSetEx: string, prefix = 'repeat_item') => {\n    Object.keys(element.attributes).forEach(name => {\n        let value: string = element.attributes[name];\n        if (value.indexOf('fragment.formatters.') >= 0) {\n            value = value.replace(new RegExp(FORMAT_CONTEXT, 'g'), \"$item\");\n        }\n        element.setAttribute(name, replaceAll(value, dataSetEx, '$item'));\n    });\n    element.setAttribute('id', `bind:'${prefix}_' + $index + '_${element.getAttribute('name')}'`)\n    element.childNodes.forEach(c => {\n        if (c instanceof HTMLElement) {\n            transformRepeatChildData(c, dataSetEx);\n        }\n    });;\n}\n\nexport const transformRepeatChildAttr = (\n    element: HTMLElement, \n    replace: string, \n    replaceWith: string, \n    shouldTransform?: (name: string, tagName: string) => boolean\n) => {\n    const tagName = element.rawTagName;\n    Object.keys(element.attributes).forEach(name => {\n        if(!shouldTransform || shouldTransform(name, tagName)){\n            const value: string = element.attributes[name];\n            element.setAttribute(name, replaceAll(value, replace, replaceWith));\n        }\n    });\n    element.childNodes.forEach(c => {\n        if (c instanceof HTMLElement) {\n            transformRepeatChildAttr(c, replace, replaceWith, shouldTransform);\n        }\n    });\n}\n\nexport const transformFormat = (element: HTMLElement, attrName: string, replaceFnName: string, addDefault = true) => {\n    let attrValue = element.getAttribute(attrName);\n    if (!attrValue) {\n        if (addDefault) {\n            attrValue = `bind:fragment.${replaceFnName}()`;\n        }\n    } else if (attrValue.startsWith('bind:')) {\n        attrValue = `bind:fragment.${replaceFnName}(${attrValue.substring(5)})`;\n    } else {\n        attrValue = `bind:fragment.${replaceFnName}(\"${attrValue}\")`;\n    }\n    if (attrValue) {\n        element.setAttribute(attrName, attrValue);\n    }\n};\n\nexport const transformItemsPerRow = (element: HTMLElement) => {\n    let itemsPerRow = {} as any;\n    let itemsPerRowStr = element.getAttribute('itemsperrow');\n    if (itemsPerRowStr) {\n        itemsPerRowStr?.split(' ').forEach(s => {\n        const [k, v] = s.split('-');\n        itemsPerRow[k] = parseInt(v);\n        });\n        element.setAttribute('itemsperrow', 'bind:' + JSON.stringify(itemsPerRow));\n    }\n};\n\nexport const getRenderItemPartial = (context?: any) => {\n    let paramStr : string = ''\n    if (context?.isPartOfPrefab) {\n        paramStr = paramStr +  ' prefab={fragment.prefab || fragment}';\n    }\n    return `\n    renderitempartial={ (item, index, partialName)=>{\n      return (<WmPartialContainer parentWatcher={fragment.watcher} \n       ${paramStr} themeToUse={fragment.theme} content={partialName} item={item} listener={fragment} />)\n    }}\n    `;\n};\n\nexport const getOnChangeExprforFormWidget = (element: HTMLElement, eventName: any) => {\n    const formWidgetDatavalue = element.getAttribute('datavalue')?.split(':') || [];\n    let bindExpr = formWidgetDatavalue?.length > 1 ? formWidgetDatavalue[1]: null;\n    if (!bindExpr || bindExpr?.includes('?') || bindExpr?.includes('Widgets') || bindExpr?.includes('$formField')) {\n        return '';\n    }\n    const isVariable = bindExpr?.includes('Variables');\n    const variableExpr = bindExpr?.split('.');\n    const variableName = isVariable && variableExpr ? variableExpr[2] : null ;\n    const callbackEvent = element.getAttribute(eventName);\n    const value = eventName === 'on-change' ? 'newVal' : 'selectedValue';\n    const oldValue = eventName === 'on-change' ? 'oldVal' : '';\n    element.setAttribute('hastwowaybinding', `${!!bindExpr}`);\n    if (callbackEvent) {\n        element.removeAttribute(eventName);\n    }\n    return `\n      ($event, widget, ${value}, ${oldValue}) => {\n        if(!${isVariable}  || fragment.Variables.${variableName}.twoWayBinding) {\n          ${bindExpr != null ? `${bindExpr} = ${value};` : '' };\n        }\n        ${callbackEvent ? `${callbackEvent}` : '' };\n      }\n    `;\n}\n\nexport const inferTypeAndParseProperty = (name: string, valWithQuotes: string) => {\n    let val = valWithQuotes.startsWith('\"') ? valWithQuotes.substring(1): valWithQuotes;\n    val = val.endsWith('\"') ? val.substring(0, val.length - 1): val;\n    try {\n      if (val === 'true') {\n        return '{true}';\n      } else if (val === 'false') {\n        return '{false}';\n      }\n      return /^-?[0-9]*(.[0-9]*)$/.test(val) ? `{${parseFloat(val)}}` : valWithQuotes;\n    } catch(e) {\n      return valWithQuotes;\n    }\n  };\n", "wavemaker-rn-codegen/src/transpile/components/transform-register.ts": "import { registerTransformer } from \"../transpile\";\n\nimport AnchorTransformer from './basic/anchor.transformer';\nimport ButtonTransformer from './basic/button.transformer';\nimport LabelTransformer from './basic/label.transformer';\nimport PictureTransformer from './basic/picture.transformer';\nimport SpinnerTransformer from './basic/spinner.transformer';\nimport IconTransformer from './basic/icon.transformer';\n\nimport ContainerTransformer from './container/container.transformer';\nimport LayoutgridTransformer from './container/layoutgrid.transformer';\nimport GridrowTransformer from './container/layoutgrid/gridrow.transformer';\nimport GridcolumnTransformer from './container/layoutgrid/gridcolumn.transformer';\nimport RepeatTemplateTransformer from './container/repeat-template.transformer';\n\nimport ListTemplateTransformer from './data/list/list-template.transformer';\nimport ListTransformer from './data/list.transformer';\n\nimport AppNavbarTransformer from './navigation/appnavbar.transformer';\nimport NavbarTransformer from './navigation/navbar.transformer';\nimport NavItemTransformer from './navigation/navitem.transformer';\nimport MenuTransformer from './navigation/menu.transformer';\n\nimport PageTransformer from './page/page.transformer';\nimport PartialTransformer from './page/partial.transformer';\nimport PrefabTransformer from './prefab/prefab.transformer';\nimport PrefabContainerTransformer from './prefab/prefab-container.transformer';\nimport PageContentTransformer from './page/page-content.transformer';\nimport ContentTransformer from './page/content.transformer';\n\nimport WebviewTransformer from './advanced/webview.transformer';\nimport LeftPanelTransformer from './page/left-panel.transformer';\nimport TabbarTransformer from './page/tabbar.transformer';\nimport ModalTransformer from './basic/modal.transformer';\n\nimport ButtongroupTransformer from './basic/buttongroup.transformer';\nimport TextTransformer from './input/text.transformer';\nimport DateTransformer from './input/epoch/date.transformer';\nimport SwitchTransformer from './input/switch.transformer';\nimport TimeTransformer from './input/epoch/time.transformer';\nimport DatetimeTransformer from './input/epoch/datetime.transformer';\nimport CompositeTransformer from './input/composite.transformer';\nimport NumberTransformer from './input/number.transformer';\nimport CurrencyTransformer from './input/currency.transformer';\nimport SliderTransformer from './input/slider.transformer';\nimport RatingTransformer from './input/rating.transformer';\nimport ToggleTransformer from './input/toggle.transformer';\nimport RadiosetTransformer from './input/radioset.transformer';\nimport CheckboxsetTransformer from './input/checkboxset.transformer';\nimport LinearlayoutTransformer from './container/linearlayout.transformer';\nimport LinearlayoutitemTransformer from './container/linearlayout/linearlayoutitem.transformer';\nimport CheckboxTransformer from './input/checkbox.transformer';\nimport SelectTransformer from './input/select.transformer';\n\nimport FormTransformer from './data/form.transformer';\nimport LiveformTransformer from \"./data/liveform.transformer\";\nimport FormFieldTransformer from './data/form/form-field.transformer';\nimport TextareaTransformer from './input/textarea.transformer';\nimport TabsTransformer from './container/tabs.transformer';\nimport TabpaneTransformer from './container/tabs/tabpane.transformer';\nimport PaneContentTransformer from './container/pane-content.transformer';\nimport DialogTransformer from './dialogs/dialog.transformer';\nimport DialogactionsTransformer from './dialogs/dialogactions.transformer';\nimport DialogcontentTransformer from './dialogs/dialogcontent.transformer';\nimport AlertdialogTransformer from './dialogs/alertdialog.transformer';\nimport ConfirmdialogTransformer from './dialogs/confirmdialog.transformer';\nimport AccordionTransformer from './container/accordion.transformer';\nimport AccordionpaneTransformer from './container/accordion/accordionpane.transformer';\nimport PanelTransformer from './container/panel.transformer';\nimport PanelFooterTransformer from './container/panel/panel-footer.transformer';\nimport PopoverTransformer from './navigation/popover.transformer';\nimport TileTransformer from './container/tile.transformer';\nimport MessageTransformer from './basic/message.transformer';\nimport CardTransformer from './data/card.transformer';\nimport CardContentTransformer from './data/card/card-content.transformer';\nimport CardFooterTransformer from './data/card/card-footer.transformer';\nimport ProgressBarTransformer from './basic/progress-bar.transformer';\nimport ProgressCircleTransformer from './basic/progress-circle.transformer';\nimport CarouselTransformer from './advanced/carousel.transformer';\nimport CarouselContentTransformer from './advanced/carousel/carousel-content.transformer';\nimport CarouselTemplateTransformer from './advanced/carousel/carousel-template.transformer';\nimport CalendarTransformer from './input/calendar.transformer';\nimport WizardTransformer from './container/wizard.transformer';\nimport WizardstepTransformer from './container/wizard/wizardstep.transformer';\nimport SearchTransformer from './basic/search.transformer';\nimport ChipsTransformer from './input/chips.transformer';\nimport LoginTransformer from './advanced/login.transformer';\nimport PanelContentTransformer from './container/panel/panel-content.transformer';\nimport CameraTransformer from './device/camera.transformer';\nimport BarcodescannerTransformer from './device/barcodescanner.transformer';\nimport FormFooterTransformer from './data/form/form-footer.transformer';\nimport FormBodyTransformer from './data/form/form-body.transformer';\nimport FormActionTransformer from './data/form/form-action.transformer';\nimport FileuploadTransformer from './input/fileupload.transformer';\nimport LineChartTransformer from './chart/line-chart.transformer';\nimport BarChartTransformer from './chart/bar-chart.transformer';\nimport PieChartTransformer from './chart/pie-chart.transformer';\nimport AreaChartTransformer from './chart/area-chart.transformer';\nimport ColumnChartTransformer from './chart/column-chart.transformer';\nimport DonutChartTransformer from './chart/donut-chart.transformer';\nimport BubbleChartTransformer from './chart/bubble-chart.transformer';\nimport TabheaderTransformer from './container/tabs/tabheader.transformer';\nimport NetworkInfoToasterTransformer from './advanced/network-info-toaster.transformer';\nimport SkeletonTransformer from './basic/skeleton.transformer';\nimport VideoTransformer from './basic/video.transformer';\nimport CustomTransformer from './basic/custom.transformer';\nimport LottieTransformer from './basic/lottie.transformer';\nimport AudioTransformer from './basic/audio.transformer';\nimport StackChartTransformer from \"./chart/stack-chart.transformer\";\nimport ListActionTemplateTransformer from './data/list/list-action-template.transformer';\nimport ListContentTransformer from './data/list/list-content.transformer';\n//#IMPORT_STATEMENT\n\nexport default () => {\n    registerTransformer('wm-anchor', AnchorTransformer);\n    registerTransformer('wm-button', ButtonTransformer);\n    registerTransformer('wm-label', LabelTransformer);\n    registerTransformer('wm-picture', PictureTransformer);\n    registerTransformer('wm-spinner', SpinnerTransformer);\n\tregisterTransformer('wm-icon', IconTransformer);\n\n\n\tregisterTransformer('wm-layoutgrid', LayoutgridTransformer);\n\tregisterTransformer('wm-gridrow', GridrowTransformer);\n\tregisterTransformer('wm-gridcolumn', GridcolumnTransformer);\n\n    registerTransformer('wm-listtemplate', ListTemplateTransformer);\n    registerTransformer('wm-list', ListTransformer);\n\n    registerTransformer('wm-container', ContainerTransformer);\n    registerTransformer('wm-mobile-navbar', AppNavbarTransformer);\n    registerTransformer('wm-nav', NavbarTransformer);\n    registerTransformer('wm-nav-item', NavItemTransformer);\n    registerTransformer('wm-menu', MenuTransformer);\n\n    registerTransformer('wm-page', PageTransformer);\n    registerTransformer('wm-partial', PartialTransformer);\n    registerTransformer('wm-prefab-container', PrefabContainerTransformer);\n    registerTransformer('wm-prefab', PrefabTransformer);\n    registerTransformer('wm-page-content', PageContentTransformer);\n    registerTransformer('wm-content', ContentTransformer);\n\n    registerTransformer('wm-webview', WebviewTransformer);\n\tregisterTransformer('wm-left-panel', LeftPanelTransformer);\n\tregisterTransformer('wm-mobile-tabbar', TabbarTransformer);\n\tregisterTransformer('wm-modal', ModalTransformer);\n\n\tregisterTransformer('wm-buttongroup', ButtongroupTransformer);\n\tregisterTransformer('wm-text', TextTransformer);\n\tregisterTransformer('wm-date', DateTransformer);\n    registerTransformer('wm-switch', SwitchTransformer);\n\tregisterTransformer('wm-time', TimeTransformer);\n\tregisterTransformer('wm-datetime', DatetimeTransformer);\n\tregisterTransformer('wm-composite', CompositeTransformer);\n    registerTransformer('wm-number', NumberTransformer);\n    registerTransformer('wm-currency', CurrencyTransformer);\n    registerTransformer('wm-rating', RatingTransformer);\n\tregisterTransformer('wm-slider', SliderTransformer);\n    registerTransformer('wm-toggle', ToggleTransformer);\n    registerTransformer('wm-radioset', RadiosetTransformer);\n    registerTransformer('wm-checkboxset', CheckboxsetTransformer);\n\tregisterTransformer('wm-linearlayout', LinearlayoutTransformer);\n\tregisterTransformer('wm-linearlayoutitem', LinearlayoutitemTransformer);\n    registerTransformer('wm-checkbox', CheckboxTransformer);\n    registerTransformer('wm-select', SelectTransformer);\n\tregisterTransformer('wm-textarea', TextareaTransformer);\n    registerTransformer('wm-tabs', TabsTransformer);\n    registerTransformer('wm-tabpane', TabpaneTransformer);\n    registerTransformer('wm-panecontent', PaneContentTransformer);\n\tregisterTransformer('wm-dialog', DialogTransformer);\n\tregisterTransformer('wm-dialogactions', DialogactionsTransformer);\n\tregisterTransformer('wm-dialogcontent', DialogcontentTransformer);\n\tregisterTransformer('wm-alertdialog', AlertdialogTransformer);\n\tregisterTransformer('wm-confirmdialog', ConfirmdialogTransformer);\n    registerTransformer('wm-form', FormTransformer);\n\tregisterTransformer('wm-liveform', LiveformTransformer);\n    registerTransformer('wm-form-field', FormFieldTransformer);\n    registerTransformer('wm-accordion', AccordionTransformer);\n    registerTransformer('wm-accordionpane', AccordionpaneTransformer);\n    registerTransformer('wm-panel', PanelTransformer);\n    registerTransformer('wm-panel-footer', PanelFooterTransformer);\n\tregisterTransformer('wm-popover', PopoverTransformer);\n    registerTransformer('wm-tile', TileTransformer);\n\tregisterTransformer('wm-message', MessageTransformer);\n\tregisterTransformer('wm-card', CardTransformer);\n\tregisterTransformer('wm-card-content', CardContentTransformer);\n\tregisterTransformer('wm-card-footer', CardFooterTransformer);\n\tregisterTransformer('wm-progress-bar', ProgressBarTransformer);\n\tregisterTransformer('wm-progress-circle', ProgressCircleTransformer);\n\tregisterTransformer('wm-carousel', CarouselTransformer);\n\tregisterTransformer('wm-carousel-content', CarouselContentTransformer);\n\tregisterTransformer('wm-carousel-template', CarouselTemplateTransformer);\n\tregisterTransformer('wm-calendar', CalendarTransformer);\n    registerTransformer('wm-wizard', WizardTransformer);\n    registerTransformer('wm-wizardstep', WizardstepTransformer);\n    registerTransformer('wm-search', SearchTransformer);\n    registerTransformer('wm-chips', ChipsTransformer);\n\tregisterTransformer('wm-login', LoginTransformer);\n\tregisterTransformer('wm-panel-content', PanelContentTransformer);\n    registerTransformer('wm-camera', CameraTransformer);\n    registerTransformer('wm-barcodescanner', BarcodescannerTransformer);\n\tregisterTransformer('wm-form-footer', FormFooterTransformer);\n\tregisterTransformer('wm-form-body', FormBodyTransformer);\n    registerTransformer('wm-form-action', FormActionTransformer);\n\tregisterTransformer('wm-fileupload', FileuploadTransformer);\n\tregisterTransformer('wm-line-chart', LineChartTransformer);\n\tregisterTransformer('wm-bar-chart', BarChartTransformer);\n\tregisterTransformer('wm-stack-chart', StackChartTransformer);\n\tregisterTransformer('wm-pie-chart', PieChartTransformer);\n\tregisterTransformer('wm-area-chart', AreaChartTransformer);\n\tregisterTransformer('wm-column-chart', ColumnChartTransformer);\n\tregisterTransformer('wm-donut-chart', DonutChartTransformer);\n\tregisterTransformer('wm-bubble-chart', BubbleChartTransformer);\n\tregisterTransformer('wm-tabheader', TabheaderTransformer);\n\tregisterTransformer('wm-network-info-toaster', NetworkInfoToasterTransformer);\n\tregisterTransformer('wm-skeleton', SkeletonTransformer);\n\tregisterTransformer('wm-video', VideoTransformer);\n\tregisterTransformer('wm-custom', CustomTransformer);\n\tregisterTransformer('wm-lottie', LottieTransformer);\n\tregisterTransformer('wm-audio', AudioTransformer);\n\tregisterTransformer('wm-repeat-template', RepeatTemplateTransformer);\n\tregisterTransformer('wm-list-action-template', ListActionTemplateTransformer);\n\tregisterTransformer('wm-list-content', ListContentTransformer);\n\t//#REGISTER_COMPONENT\n};\n", "wavemaker-rn-codegen/src/transpile/components/advanced/network-info-toaster.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmNetworkInfoToaster', from: '@wavemaker/app-rn-runtime/components/advanced/network-info-toaster/network-info-toaster.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmNetworkInfoToaster ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmNetworkInfoToaster>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/advanced/carousel.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { transformRepeatChildAttr, transformRepeatChildData } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmCarousel', from: '@wavemaker/app-rn-runtime/components/advanced/carousel/carousel.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const type = element.attrs['type'];\n    let renderSlide = null;\n    if (type === 'dynamic') {\n      const widgetName = element.attrs['name'];\n      const template = element.childNodes.find(c => c instanceof HTMLElement);\n      let dataSet = element.getAttribute('dataset');\n      if (dataSet && dataSet.startsWith('bind:')) {\n        transformRepeatChildAttr(template as HTMLElement, `fragment.Widgets.${widgetName}.currentItemWidgets`, 'currentItemWidgets');\n        transformRepeatChildAttr(template as HTMLElement, `fragment.Widgets.${widgetName}.currentItem`, '$item');\n        transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[0]', 'carousel_item');\n        transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[$i]', 'carousel_item');\n        transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[fragment.$i]', 'carousel_item');\n      }\n      renderSlide = `renderSlide={($item, $index, carousel) => { const item = $item; const currentItemWidgets = []; return (`\n    }\n    const markup = `<WmCarousel ${transformAttrs(element, context)} ${renderSlide || '>'}`;\n    if (element.attrs['type'] === 'dynamic') {\n      context.listener = 'listener';\n      context.set('old_props', context.props);\n      context.props = ['listener', '$item', '$index', 'currentItemWidgets'];\n      context.data.carouselCount = (context.data.carouselCount || 0) + 1;\n    }\n    return markup;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => {\n    const type = element.attrs['type'];\n    if (type === 'dynamic') {\n      context.data.carouselCount--;\n      return ');}}></WmCarousel>';\n    }\n    return '</WmCarousel>';\n  },\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/advanced/login.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmLogin', from: '@wavemaker/app-rn-runtime/components/advanced/login/login.component'}\n];\n\nconst getOnLoginExpr = () => {\n    return `\n      (formData, success, error) => {\n        fragment.Actions.loginAction.invoke({formData},\n          success, error);\n      }\n    `;\n}\n\nconst setAction = (element: HTMLElement, form: HTMLElement[]) => {\n  const formactions = element.querySelectorAll('wm-form-action');\n    formactions.forEach((formAction) => {\n      const actionType = formAction.getAttribute('type')\n      let action = formAction.getAttribute('action');\n      if (actionType === 'submit') {\n        formAction.setAttribute('action', 'Widgets.loginForm.doLogin(fragment.Widgets.' + form[0].attrs['name'] + '.dataoutput)' + (action || '')); \n      }\n    });\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const form = element.querySelectorAll('wm-form');\n    form.forEach((formRef) => {\n      formRef.setAttribute('isLogin', 'true');\n    });\n    setAction(element, form);\n    return `<WmLogin ${transformAttrs(element, context)} ${`onLogin={${getOnLoginExpr()}}`}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLogin>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/advanced/webview.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmWebview', from: '@wavemaker/app-rn-runtime/components/advanced/webview/webview.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    if (element.attrs['webviewsrc']) {\n      element.setAttribute('src', element.attrs['webviewsrc']);\n      element.removeAttribute('webviewsrc');\n    } \n    return `<WmWebview ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmWebview>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-template.transformer.ts": "import { HTMLElement } from 'node-html-parser';\nimport listContentTransformer from '../../data/list/list-content.transformer';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCarouselTemplate', from: '@wavemaker/app-rn-runtime/components/advanced/carousel/carousel-template/carousel-template.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmCarouselTemplate ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCarouselTemplate>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (e: HTMLElement, context: TranspilationContext) => {\n    return (listContentTransformer as any).createComponent(e, context, 'carousel');\n  }\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/advanced/carousel/carousel-content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCarouselContent', from: '@wavemaker/app-rn-runtime/components/advanced/carousel/carousel-content/carousel-content.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmCarouselContent ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCarouselContent>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/page/partial-container.transformer.ts": "import parse, { HTMLElement } from 'node-html-parser';\nimport { encode } from 'html-entities';\n\nimport { inferTypeAndParseProperty } from '../utils';\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n    pre: (element: HTMLElement, context: TranspilationContext) => {\n        let content = element.attributes['content'];\n        if (content) {\n            const params = {} as any;\n            Object.keys(element.attrs).forEach(k => {\n                if (k !== 'name' && k !== 'show' && k != 'content') {\n                    params[k] = element.attrs[k];\n                }\n            })\n            element.childNodes\n                .filter(node => node instanceof HTMLElement && node.tagName === 'WM-PARAM')\n                .forEach((node) => {\n                    const e = node as HTMLElement;\n                    params[e.getAttribute('name') || '']= e.getAttribute('value');\n                });\n            let paramStr = Object.keys(params)\n                .filter(k => k !== 'on-load')\n                .map(k => `${k}=\"${encode(params[k])}\"`).join(' ');\n            paramStr = transformAttrs(parse(`<wm-partial-container ${paramStr}/>`).firstChild as HTMLElement, context, inferTypeAndParseProperty);\n            paramStr += ` name={props.name + '_partial_container'}`;\n            paramStr += ` partial_name={props.name + '_partial'}`;\n            paramStr += ` content={props.content}`;\n            paramStr += ' serviceDefinitions={fragment.serviceDefinitions}';\n            paramStr += ' parentWatcher={fragment.watcher}';\n            paramStr += ` invokeVariables={props.invokeVariables}`;\n            if (context.isPartOfPrefab) {\n                paramStr += ' prefab={fragment.prefab || fragment}';\n            }\n            return `<WmPartialContainer onLoad={onLoad} ${paramStr} themeToUse={fragment.theme}/>`;\n        }\n        return '';\n    },\n    post: (element: HTMLElement, context: TranspilationContext) => '',\n    imports: (element: HTMLElement, context: TranspilationContext) => element.hasAttribute('content') ? imports : []\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/page/tabbar.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmTabbar', from: '@wavemaker/app-rn-runtime/components/page/tabbar/tabbar.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmTabbar\n    ${transformAttrs(element, context)}\n    getDisplayExpression={(label) => label && (fragment.appLocale[label.trim()] || label)} \n    isActive={(item) => fragment.appConfig.currentPage?.isActiveTabbarItem({\n      label: item.label, \n      link: item.link,\n      links: [...(item.childnavigation ? item.childnavigation.map(i => i.link): []), item.link]\n    })}\n    activePage={fragment.appConfig.currentPage.pageName}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTabbar>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/page/content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmContent', from: '@wavemaker/app-rn-runtime/components/page/content/content.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmContent ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmContent>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/page/page.transformer.ts": "import { HTMLElement, parse } from 'node-html-parser';\n\nimport { createComponent, Import, Transformer, transformAttrs, TranspilationContext } from \"../../transpile\";\nimport { findElement } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmPage', from: '@wavemaker/app-rn-runtime/components/page/page.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let hasClippedTabbar = false;\n    findElement(element, 'WM-MOBILE-TABBAR', (e) => {\n      const classname = e.getAttribute('class');\n      hasClippedTabbar = !!classname?.split(' ').find(v => (v === 'clipped-tabbar'));\n    }, {\n      recursive: true\n    });\n\n    let hasAppNavbar = false;\n    findElement(element, 'WM-MOBILE-NAVBAR', (e) => {\n      hasAppNavbar = true;\n    }, {\n      recursive: true\n    });\n\n    if (hasClippedTabbar) {\n      findElement(element, 'WM-PAGE-CONTENT', (e) => {\n        const tabbarspacer = parse(`<wm-container\n            name=\"tabbarSpacer\"\n            class=\"app-tabbar tabbar-spacer\">\n          </wm-container>`).firstChild as HTMLElement;\n        e.appendChild(tabbarspacer);\n      }, {\n        recursive : true\n      });\n    }\n    return `<WmPage ${transformAttrs(element, context)} hasappnavbar={${hasAppNavbar}}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPage>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/page/left-panel.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport PartialContainerTransformer from './partial-container.transformer';\n\nexport const imports: Import[] = [\n  { name: 'WmLeftPanel', from: '@wavemaker/app-rn-runtime/components/page/left-panel/left-panel.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let partial = PartialContainerTransformer.pre(element, context) || '';\n    const widgetName = element.attrs['name'];\n    if (partial) {\n      partial = `renderPartial={(props, onLoad) => (${partial})}`;\n    }\n    return `<>{fragment.setDrawerContent((<ThemeProvider value={fragment.theme}><WmLeftPanel ${transformAttrs(element, context)} ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => `</WmLeftPanel></ThemeProvider>), '${element.attrs.animation || 'slide-in'}')}</>`,\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context))\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/page/page-content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createComponent, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmPageContent', from: '@wavemaker/app-rn-runtime/components/page/page-content/page-content.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    // checking if parent(page) is scrollable\n    let currentNode = element.parentNode;\n    while(currentNode) {\n      if(currentNode?.parentNode?.rawTagName === 'wm-page' && \n        currentNode?.parentNode?.attributes?.scrollable == 'true'\n      ){\n        element.setAttribute('scrollable', 'false')\n        break;\n      }\n      currentNode = currentNode.parentNode;\n    }\n   return `<WmPageContent ${transformAttrs(element, context)} showskeleton={fragment.App.isSkeletonEnabled() && !fragment.startUpVariablesLoaded}>`\n  },\n\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPageContent>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/page/partial.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createComponent, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmPartial', from: '@wavemaker/app-rn-runtime/components/page/partial/partial.component' }\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmPartial ${transformAttrs(element, context)} skeletonanimationresource={fragment.props.skeletonanimationresource} skeletonanimationspeed={fragment.props.skeletonanimationspeed} showskeleton={(fragment.App.isSkeletonEnabled() && !fragment.startUpVariablesLoaded) ? true : undefined}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPartial>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/input/chips.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport {createExpression, Import, transformAttrs, Transformer, TranspilationContext} from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmChips', from: '@wavemaker/app-rn-runtime/components/input/chips/chips.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let getDisplayExpression = createExpression(element, 'displayexpression');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n    }\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmChips ${transformAttrs(element, context)} ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''} ${onChange ? `onChange={${onChange}}` : ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmChips>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/rating.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmRating', from: '@wavemaker/app-rn-runtime/components/input/rating/rating.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let getDisplayExpression = createExpression(element, 'displayexpression');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n    }\n    return `<WmRating ${transformAttrs(element, context)}  ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmRating>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/toggle.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmToggle', from: '@wavemaker/app-rn-runtime/components/input/toggle/toggle.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let bgColor = element.attrs['backgroundcolor'];\n    if (bgColor) {\n      element.setAttribute('color', bgColor);\n      element.removeAttribute('backgroundcolor');\n    }\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmToggle ${transformAttrs(element, context)} ${onChange ? `onChange={${onChange}}`: ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmToggle>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/checkboxset.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget, getRenderItemPartial, transformItemsPerRow } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmCheckboxset', from: '@wavemaker/app-rn-runtime/components/input/checkboxset/checkboxset.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    transformItemsPerRow(element);\n    let getDisplayExpression = createExpression(element, 'displayexpression');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n    }\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmCheckboxset ${transformAttrs(element, context)} ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''} ${onChange ? `onChange={${onChange}}`: ''} ${getRenderItemPartial(context)}>`;\n  },\n  post: (element: HTMLElement) => '</WmCheckboxset>',\n  imports: (element: HTMLElement) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/select.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmSelect', from: '@wavemaker/app-rn-runtime/components/input/select/select.component'}\n];\n\nconst getOnChangeExpr = (element: HTMLElement) => {\n  const onChange = element.getAttribute('on-change');\n  return onChange ? `\n    ($event, widget, newVal, oldVal) => {\n      ${onChange}\n    }\n  `: '';\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let getDisplayExpression;\n    //supportedLocale select widget handling\n    const dataSet = element.getAttribute('dataset') || '';\n    let onChange;\n    if (dataSet.indexOf('supportedLocale') > -1) {\n      element.setAttribute('datafield', 'dataValue');\n      element.setAttribute('displayfield', 'displayValue');\n      onChange = getOnChangeExpr(element);\n      element.removeAttribute('on-change');\n      element.setAttribute('datavalue','bind:fragment.appConfig.selectedLocale');\n    } else {\n      getDisplayExpression = createExpression(element, 'displayexpression');\n      if (getDisplayExpression) {\n        element.removeAttribute('displayexpression');\n      }\n      onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    }\n    return `<WmSelect ${transformAttrs(element, context)}\n      ${onChange ? `onChange={${onChange}}` : ''}\n      ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmSelect>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/fileupload.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmFileupload', from: '@wavemaker/app-rn-runtime/components/input/fileupload/fileupload.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmFileupload ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmFileupload>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/input/checkbox.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmCheckbox', from: '@wavemaker/app-rn-runtime/components/input/checkbox/checkbox.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmCheckbox ${transformAttrs(element, context)} ${onChange ? `onChange={${onChange}}`: ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCheckbox>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/text.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmText', from: '@wavemaker/app-rn-runtime/components/input/text/text.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmText ${transformAttrs(element, context)} ${onChange ? `onChange={${onChange}}`: ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmText>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/number.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport {Import, transformAttrs, Transformer, TranspilationContext} from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmNumber', from: '@wavemaker/app-rn-runtime/components/input/number/number.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmNumber ${transformAttrs(element, context)} ${onChange ? `onChange={${onChange}}`: ''}>`;\n  },\n  post: (element: HTMLElement) => '</WmNumber>',\n  imports: (element: HTMLElement) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/calendar.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCalendar', from: '@wavemaker/app-rn-runtime/components/input/calendar/calendar.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmCalendar ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCalendar>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/textarea.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmTextarea', from: '@wavemaker/app-rn-runtime/components/input/textarea/textarea.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmTextarea ${transformAttrs(element, context)} ${onChange ? `onChange={${onChange}}`: ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTextarea>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/currency.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport {Import, transformAttrs, Transformer, TranspilationContext} from '../../transpile';\nimport { transformFormat } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmCurrency', from: '@wavemaker/app-rn-runtime/components/input/currency/currency.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const replaceFnName = 'getCurrencySymbol';\n    transformFormat(element, 'currency', replaceFnName);\n    return `<WmCurrency ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement) => '</WmCurrency>',\n  imports: (element: HTMLElement) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/input/slider.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmSlider', from: '@wavemaker/app-rn-runtime/components/input/slider/slider.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let getDisplayExpression = createExpression(element, 'displayexpression');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n      element.removeAttribute('displayfield');\n    }\n\n    let getToolTipExpression = createExpression(element, 'tooltipexpression');\n    if (getToolTipExpression) {\n      element.removeAttribute('tooltipexpression');\n    }\n\n    return `<WmSlider \n      ${transformAttrs(element, context)} \n      ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''}\n      ${getToolTipExpression ? `getToolTipExpression=${getToolTipExpression}` : ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmSlider>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/radioset.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget, transformItemsPerRow, getRenderItemPartial } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmRadioset', from: '@wavemaker/app-rn-runtime/components/input/radioset/radioset.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    transformItemsPerRow(element);\n    let getDisplayExpression = createExpression(element, 'displayexpression');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n    }\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmRadioset ${transformAttrs(element, context)} ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''} ${onChange ? `onChange={${onChange}}` : ''} ${getRenderItemPartial(context)}>`;\n  },\n  post: (element: HTMLElement) => '</WmRadioset>',\n  imports: (element: HTMLElement) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/composite.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmComposite', from: '@wavemaker/app-rn-runtime/components/input/composite/composite.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmComposite ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmComposite>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/switch.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport {createExpression, Import, transformAttrs, Transformer, TranspilationContext} from '../../transpile';\nimport { getOnChangeExprforFormWidget } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmSwitch', from: '@wavemaker/app-rn-runtime/components/input/switch/switch.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let getDisplayExpression = createExpression(element, 'displayexpression');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n    }\n    const onChange = getOnChangeExprforFormWidget(element, 'on-change');\n    return `<WmSwitch ${transformAttrs(element, context)} ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression}` : ''} ${onChange ? `onChange={${onChange}}`: ''}>`;\n  },\n  post: (element: HTMLElement) => '</WmSwitch>',\n  imports: (element: HTMLElement) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/input/epoch/time.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport { transformFormat } from \"../../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmTime', from: '@wavemaker/app-rn-runtime/components/input/epoch/time/time.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const replaceFnName = 'getTimeFormat';\n    transformFormat(element, 'timepattern', replaceFnName);\n    transformFormat(element, 'outputformat', replaceFnName, false);\n    element.setAttribute('datepattern', element.getAttribute('timepattern') || '');\n    element.removeAttribute('timepattern');\n    return `<WmTime ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTime>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/input/epoch/datetime.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport { transformFormat } from \"../../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmDatetime', from: '@wavemaker/app-rn-runtime/components/input/epoch/datetime/datetime.component'}\n];\n\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const replaceFnName = 'getDateTimeFormat';\n    transformFormat(element, 'datepattern', replaceFnName);\n    transformFormat(element, 'outputformat', replaceFnName, false);\n    element.setAttribute('locale', `bind:fragment.appConfig.selectedLocale`);\n    return `<WmDatetime ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmDatetime>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/input/epoch/date.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport { transformFormat } from \"../../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmDate', from: '@wavemaker/app-rn-runtime/components/input/epoch/date/date.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const replaceFnName = 'getDateFormat';\n    transformFormat(element, 'datepattern', replaceFnName);\n    transformFormat(element, 'outputformat', replaceFnName, false);\n    element.setAttribute('locale', `bind:fragment.appConfig.selectedLocale`);\n    return `<WmDate ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmDate>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/chart/line-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmLineChart', from: '@wavemaker/app-rn-runtime/components/chart/line-chart/line-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmLineChart ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLineChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/chart/column-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmColumnChart', from: '@wavemaker/app-rn-runtime/components/chart/column-chart/column-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const classname = 'app-column-chart ' +  (element.getAttribute('class') || '');\n    element.setAttribute('class', classname);\n    return `<WmColumnChart horizontal={false}  ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmColumnChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/chart/stack-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n    { name: 'WmStackChart', from: '@wavemaker/app-rn-runtime/components/chart/stack-chart/stack-chart.component'},\n    { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n    pre: (element: HTMLElement, context: TranspilationContext) => `<WmStackChart horizontal={true} ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`,\n    post: (element: HTMLElement, context: TranspilationContext) => '</WmStackChart>',\n    imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/chart/donut-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmDonutChart', from: '@wavemaker/app-rn-runtime/components/chart/donut-chart/donut-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const classname = 'app-donut-chart ' +  (element.getAttribute('class') || '');\n    element.setAttribute('class', classname);\n    return `<WmDonutChart ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmDonutChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/chart/area-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmAreaChart', from: '@wavemaker/app-rn-runtime/components/chart/area-chart/area-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let xtickexpr = createExpression(element, 'xtickexpr');\n    let ytickexpr = createExpression(element, 'ytickexpr');\n    if (xtickexpr) {\n      element.removeAttribute('xtickexpr');\n    }\n    if (ytickexpr) {\n      element.removeAttribute('ytickexpr');\n    }\n    return `<WmAreaChart ${transformAttrs(element, context)}\n    ${getRenderItemPartial(context)}\n    ${xtickexpr ? `xtickexpr=${xtickexpr}` : ''}\n    ${ytickexpr ? `ytickexpr=${ytickexpr}` : ''}>`\n  },\n     \n  post: (element: HTMLElement, context: TranspilationContext) => '</WmAreaChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/chart/bubble-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmBubbleChart', from: '@wavemaker/app-rn-runtime/components/chart/bubble-chart/bubble-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmBubbleChart ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmBubbleChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/chart/pie-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmPieChart', from: '@wavemaker/app-rn-runtime/components/chart/pie-chart/pie-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmPieChart ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPieChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/chart/bar-chart.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getRenderItemPartial } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmBarChart', from: '@wavemaker/app-rn-runtime/components/chart/bar-chart/bar-chart.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmBarChart horizontal={true} ${getRenderItemPartial(context)} ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmBarChart>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/basic/message.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmMessage', from: '@wavemaker/app-rn-runtime/components/basic/message/message.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmMessage ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmMessage>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/progress-bar.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmProgressBar', from: '@wavemaker/app-rn-runtime/components/basic/progress-bar/progress-bar.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmProgressBar ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmProgressBar>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/buttongroup.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { findElement } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmButtongroup', from: '@wavemaker/app-rn-runtime/components/basic/buttongroup/buttongroup.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let lastBtn: HTMLElement = null as any;\n    findElement(element, 'WM-BUTTON', (n, i) => {\n      lastBtn = n;\n      let mClass = (n.attrs['class'] || '') + ' btn-group-child ';\n      if (i === 0) {\n        mClass += 'btn-group-first-child '; \n      }\n      n.setAttribute('class', mClass);\n    })\n    lastBtn ? lastBtn.setAttribute('class', (lastBtn.attrs['class'] || '') + ' btn-group-last-child'): null;\n    return `<WmButtongroup ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmButtongroup>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/spinner.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmSpinner', from: '@wavemaker/app-rn-runtime/components/basic/spinner/spinner.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) =>{\n    return `<WmSpinner ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmSpinner>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/skeleton.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmSkeleton', from: '@wavemaker/app-rn-runtime/components/basic/skeleton/skeleton.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmSkeleton ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmSkeleton>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/audio.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmAudio', from: '@wavemaker/app-rn-runtime/components/basic/audio/audio.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmAudio ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmAudio>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/progress-circle.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmProgressCircle', from: '@wavemaker/app-rn-runtime/components/basic/progress-circle/progress-circle.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmProgressCircle ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmProgressCircle>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/picture.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nconst resizeModes = {\n    'fill': 'stretch',\n    'contain': 'contain',\n    'cover': 'cover',\n    'none': 'center'\n} as any;\n\nexport const imports: Import[] = [\n  { name: 'WmPicture', from: '@wavemaker/app-rn-runtime/components/basic/picture/picture.component'}\n];\n\nconst tResizeMode = (element: HTMLElement) => {\n  const value = resizeModes[element.getAttribute('resizemode') || ''];\n  value && element.setAttribute('resizemode', value);\n};\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const url = element.getAttribute('picturesource');\n    const pictureplaceholder = element.getAttribute('pictureplaceholder') || 'resources/images/imagelists/default-image.png';\n    pictureplaceholder && element.setAttribute('pictureplaceholder', pictureplaceholder);\n    tResizeMode(element);\n    if (url?.endsWith('.svg')) {\n      element.setAttribute('isSvg', 'true');\n    }\n    return `<WmPicture ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPicture>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/basic/label.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmLabel', from: '@wavemaker/app-rn-runtime/components/basic/label/label.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmLabel ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLabel>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/lottie.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmLottie', from: '@wavemaker/app-rn-runtime/components/basic/lottie/lottie.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmLottie ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLottie>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/video.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmVideo', from: '@wavemaker/app-rn-runtime/components/basic/video/video.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmVideo ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmVideo>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/anchor.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmAnchor', from: '@wavemaker/app-rn-runtime/components/basic/anchor/anchor.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmAnchor ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmAnchor>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/button.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmButton', from: '@wavemaker/app-rn-runtime/components/basic/button/button.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmButton ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmButton>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/icon.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmIcon', from: '@wavemaker/app-rn-runtime/components/basic/icon/icon.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmIcon ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmIcon>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/modal.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmModal', from: '@wavemaker/app-rn-runtime/components/basic/modal/modal.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmModal ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmModal>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/basic/search.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { getOnChangeExprforFormWidget, getRenderItemPartial } from \"../utils\";\n\nexport const imports: Import[] = [\n  { name: 'WmSearch', from: '@wavemaker/app-rn-runtime/components/basic/search/search.component'},\n  { name: 'WmPartialContainer', from: '@wavemaker/app-rn-runtime/components/page/partial-container/partial-container.component'}\n];\n\nconst getDatasetVariable = (element: HTMLElement) => {\n  const dataset = element.getAttribute('dataset');\n  if (dataset) {\n    const variableArr = dataset.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n    if (variableArr && variableArr.length) {\n     return variableArr[0];\n    }\n  }\n};\n\nconst getUpdateRequiredExpr = (element: HTMLElement) => {\n  let variable = getDatasetVariable(element);\n  if (variable) {\n    return `() => ${variable} && ${variable}.config?.serviceInfo?.parameters.length`;\n  }\n}\n\nconst getSearchSubmitExpr = (element: HTMLElement) => {\n  let variable = getDatasetVariable(element);\n  if (variable) {\n      return `(params, success, error) => {\n        ${variable} && ${variable}.setInput(params);\n        return ${variable}.invoke();\n      }`;\n    }\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let getDisplayExpression = createExpression(element, 'displayexpression') || createExpression(element, 'displaylabel');\n    if (getDisplayExpression) {\n      element.removeAttribute('displayexpression');\n      element.removeAttribute('displaylabel');\n    }\n    let displayimagesrc = element.getAttribute('displayimagesrc');\n    let getDisplayimagesrc = null;\n    if (displayimagesrc && displayimagesrc.startsWith('bind:') && !displayimagesrc.startsWith('bind:$formField')) {\n      getDisplayimagesrc = createExpression(element, 'displayimagesrc');\n      element.removeAttribute('displayimagesrc');\n    }\n    if (element.getAttribute('type') === 'autocomplete') {\n      const classname = element.getAttribute('class') || '';\n      element.setAttribute('class', `app-autocomplete ${classname}`);\n    }\n    const onSelect = getOnChangeExprforFormWidget(element, 'on-select');\n    const onQuerySearch = getSearchSubmitExpr(element);\n    const isUpdateRequired = getUpdateRequiredExpr(element);\n    return `<WmSearch ${transformAttrs(element, context)}\n      ${getRenderItemPartial(context)}\n      ${onQuerySearch ? `onQuerySearch={${onQuerySearch}}` : ''}\n      ${isUpdateRequired ? `isUpdateRequired={${isUpdateRequired}}` : ''}\n      ${getDisplayExpression ? `getDisplayExpression=${getDisplayExpression} ` : ''}\n      ${getDisplayimagesrc ? `displayimagesrc=${getDisplayimagesrc} `: ``} ${onSelect ? `onSelect={${onSelect}}` : ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmSearch>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/basic/custom.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCustom', from: '@wavemaker/app-rn-runtime/components/basic/custom/custom.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    for(let attr in element.attributes){\n      if(attr.includes('param')){\n        element.setAttribute((attr)?.replace('param',''), element.attributes[attr]);\n        element.removeAttribute(attr);  \n      }\n    }\n    return `<WmCustom ${transformAttrs(element, context)}>`},\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCustom>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/navigation/navitem.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmNavItem', from: '@wavemaker/app-rn-runtime/components/navigation/navitem/navitem.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    element.childNodes.forEach(n => {\n      if (n instanceof HTMLElement && n.tagName === 'WM-ANCHOR') {\n        n.setAttribute('class', 'navAnchorItem ' + (n.getAttribute('class') || ''));\n      }\n    });\n    return `<WmNavItem \n    getDisplayExpression={(label) => label && (fragment.appLocale[label.trim()] || label)} \n      ${transformAttrs(element, context)}>`\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmNavItem>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/navigation/popover.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport PartialContainerTransformer from '../page/partial-container.transformer';\n\nexport const imports: Import[] = [\n  { name: 'WmPopover', from: '@wavemaker/app-rn-runtime/components/navigation/popover/popover.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let partial = null;\n    if (element.getAttribute('contentsource') !== 'inline') {\n      partial = PartialContainerTransformer.pre(element, context) || '';\n      if (partial) {\n        partial = `renderPartial={(props, onLoad) => (${partial})}`;\n      }\n    }\n    return `<WmPopover ${transformAttrs(element, context)}  ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPopover>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context))\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/navigation/basenav.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createExpression, TranspilationContext, transformAttrs as _transformAttrs } from '../../transpile';\n\nconst PROPS = ['itemlabel', 'itemlink', 'itemicon', 'itembadge', 'isactive'];\n\nexport const transformAttrs = (element: HTMLElement, context: TranspilationContext) => {\n    const props = PROPS.map((p, i) => [p, createExpression(element, p) || (element.getAttribute(p) &&`'${element.getAttribute(p)}'`)])\n        .filter(p => !!p[1]);\n    props.forEach(p => p[0] && element.removeAttribute(p[0]));\n    return _transformAttrs(element, context) + props.map(p => `${p[0]}=${p[1]}`).join(' ');\n};", "wavemaker-rn-codegen/src/transpile/components/navigation/appnavbar.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext, createComponent } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmAppNavbar', from: '@wavemaker/app-rn-runtime/components/navigation/appnavbar/appnavbar.component'}\n];\n\nconst widgetClass = {\n  'WM-ANCHOR': 'navbarAnchorItem',\n  'WM-MENU': 'navbarMenu',\n  'WM-POPOVER': 'navbarPopover',\n  'WM-BUTTON': 'navbarButton'\n} as any;\n\nconst addClass = (element: HTMLElement)  => {\n  const defaultClass = widgetClass[element.tagName] as string;\n  if (!defaultClass) {\n    return;\n  }\n  let classname = element.getAttribute('class');\n    if (!classname) {\n      classname = defaultClass;\n    } if (!classname.includes(defaultClass)) {\n      classname = defaultClass + ' ' + classname ;\n    }\n    element.setAttribute('class', classname);\n};\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    element.childNodes.forEach(n => n instanceof HTMLElement && addClass(n));\n    if (!element.hasAttribute('on-backbtnclick')) {\n      element.setAttribute('on-backbtnclick', 'fragment.goBack()')\n    }\n    element.setAttribute('on-drawerbuttonpress', 'fragment.toggleDrawer()');\n      return `<WmAppNavbar ${transformAttrs(element, context)} showDrawerButton={fragment.hasDrawer}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmAppNavbar>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/navigation/navbar.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, Transformer, TranspilationContext } from '../../transpile';\nimport { transformAttrs } from './basenav.transformer';\n\nexport const imports: Import[] = [\n  { name: 'WmNavbar', from: '@wavemaker/app-rn-runtime/components/navigation/navbar/navbar.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const layout = element.getAttribute('layout');\n    if (layout) {\n      const className = layout === 'stacked' ? 'stackedNav ' : 'justifiedNav ';\n      if (layout === 'stacked') {\n        element.setAttribute('class', className + (element.getAttribute('class') || ''));\n      } else {\n        element.setAttribute('class', className + (element.getAttribute('class') || ''));\n      }\n    }\n\n    if (!element.hasAttribute('dataset')) {\n      element.childNodes.forEach(n => {\n        if (n instanceof HTMLElement && n.tagName === 'WM-NAV-ITEM') {\n          n.setAttribute('defaultview', 'true');\n        }\n      })\n    }\n\n    return `<WmNavbar \n    getDisplayExpression={(label) => label && (fragment.appLocale[label.trim()] || label)} \n      ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmNavbar>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/navigation/menu.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, Transformer, TranspilationContext } from '../../transpile';\nimport { transformAttrs } from './basenav.transformer';\n\nexport const imports: Import[] = [\n  { name: 'WmMenu', from: '@wavemaker/app-rn-runtime/components/navigation/menu/menu.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const menuclass = element.getAttribute('menuclass');\n    if (menuclass) {\n      element.setAttribute('class', menuclass);\n      element.removeAttribute('menuclass');\n    }\n    return `<WmMenu\n      getDisplayExpression={(label) => label && (fragment.appLocale[label.trim()] || label)} \n      ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmMenu>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/container/tabs.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createComponent, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmTabs', from: '@wavemaker/app-rn-runtime/components/container/tabs/tabs.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    return `<WmTabs ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTabs>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/panel.transformer.ts": "import { HTMLElement, parse } from 'node-html-parser';\n\nimport { createComponent, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport PartialContainerTransformer from \"../page/partial-container.transformer\";\nimport { findElement } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmPanel', from: '@wavemaker/app-rn-runtime/components/container/panel/panel.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const widgetName = element.getAttribute('name');\n    let partial = PartialContainerTransformer.pre(element, context) || '';\n    if (partial) {\n      partial = `renderPartial={(props, onLoad) => (${partial})}`;\n    }\n    const footerIndex = element.childNodes.findIndex(n => n instanceof HTMLElement && n.tagName === 'WM-PANEL-FOOTER');\n    if (footerIndex >= 0) {\n      const content = parse(`<wm-panel-content name=\"${widgetName}_content\"></wm-panel-content>`).firstChild;\n      const footer = element.childNodes.splice(footerIndex, 1)[0];\n      content.childNodes = element.childNodes;\n      element.childNodes = [\n        content,\n        footer\n      ];\n    }\n    return `<WmPanel ${transformAttrs(element, context)} ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPanel>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context)),\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid.transformer.ts": "import { isEmpty } from 'lodash';\nimport { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport { findElement } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmLayoutgrid', from: '@wavemaker/app-rn-runtime/components/container/layoutgrid/layoutgrid.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let classes = (element.attrs['class'] || '').split(' ');\n    if (element.attrs['class']) {\n      const stripIndex = classes.findIndex(c => c === 'table-striped');\n      const hasStrip = stripIndex >= 0;\n      if (hasStrip) {\n        classes.splice(stripIndex, 1);\n      }\n      findElement(element, 'WM-GRIDROW', (row: HTMLElement, index: number) => {\n        let rowClass = classes.map(c => c + '-row').join(' ');\n        if (hasStrip) {\n          rowClass += ' table-striped-row' + (index % 2);\n        }\n        \n        row.setAttribute('class', (rowClass + ' ' + (row.attrs['class'] || '')).trim());\n        findElement(row, 'WM-GRIDCOLUMN', (column: HTMLElement) => {\n          column.setAttribute('class', (classes.map(c => c + '-cell').join(' ') + ' ' + (column.attrs['class'] || '')).trim());\n        }, {\n          recursive: false\n        });\n      }, {\n        recursive: false\n      });\n    }\n    return `<WmLayoutgrid ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLayoutgrid>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/wizard.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createComponent, createExpression, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmWizard', from: '@wavemaker/app-rn-runtime/components/container/wizard/wizard.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) =>{\n    let i = 0;\n    element.childNodes.forEach((c) => {\n      if (c instanceof HTMLElement) {\n        c.setAttribute('index', '' + (i++));\n      }\n    });\n    let menudataexpr = createExpression(element, 'menudataexpr');\n    if (menudataexpr) {\n      element.removeAttribute('menudataexpr');\n    }\n    return `<WmWizard ${transformAttrs(element, context)} \n      ${menudataexpr ? `getmenudataexpression=${menudataexpr}` : ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmWizard>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/tile.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmTile', from: '@wavemaker/app-rn-runtime/components/container/tile/tile.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmTile ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTile>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/pane-content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createComponent, Import, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    return `<ScrollView nestedScrollEnabled={true}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</ScrollView>',\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context),\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/linearlayout.transformer.ts": "import { includes } from 'lodash';\nimport { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmLinearlayout', from: '@wavemaker/app-rn-runtime/components/container/linearlayout/linearlayout.component'}\n];\n\nconst SPACING_KEY = 'parentLinearLayout.spacing';\n\nconst addSpacing = (element: HTMLElement, context: TranspilationContext) => {\n  let spacing = element.attrs['spacing'];\n  spacing = !spacing || spacing === '0' ? context.get(SPACING_KEY) : spacing;\n  let styleName = 'marginLeft';\n  const direction = element.attrs['direction'] || 'row';\n  const isHorizontal = direction.startsWith('row');\n  if (spacing) {\n    const reverse = direction.indexOf('reverse') > 0;\n    if (isHorizontal && reverse) {\n      styleName = 'marginRight';\n    } else if (!isHorizontal && reverse) {\n      styleName = 'marginBottom';\n    } else if (!isHorizontal ) {\n      styleName = 'marginTop';\n    }\n    context.set(SPACING_KEY, spacing);\n  }\n  element.childNodes.filter(c => {\n    if (c instanceof HTMLElement) {\n      const e = c as HTMLElement;\n      return e.tagName === 'WM-LINEARLAYOUTITEM';\n    }\n    return false;\n  }).forEach((c, i) => {\n    const e = (c as HTMLElement);\n    i && spacing && e.setAttribute(styleName, spacing);\n    if (!isHorizontal && !e.hasAttribute('width')) {\n      e.setAttribute('width', '100%');\n    }\n    if (e.attrs['width'] === 'auto') {\n      e.removeAttribute('width');\n    }\n    if (e.attrs['height'] === 'auto') {\n      e.removeAttribute('height');\n    }\n  });\n};\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    addSpacing(element, context);\n    return `<WmLinearlayout ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLinearlayout>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  isStyleProperty: (propName: string, element: HTMLElement,  context: TranspilationContext) => {\n    return !includes(['horizontalalign', 'verticalalign'], propName);\n  }\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/repeat-template.transformer.ts": "import { capitalize } from 'lodash';\nimport { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from \"../../transpile\";\n\nexport const imports: Import[] = [];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => '',\n  post: (element: HTMLElement, context: TranspilationContext) => '',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/accordion.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { replaceAll, transformRepeatChildAttr, transformRepeatChildData } from '../utils';\nimport { createComponent, Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmAccordion', from: '@wavemaker/app-rn-runtime/components/container/accordion/accordion.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const widgetName = element.attrs['name'];\n    let dataSet = element.getAttribute('dataset');\n    if (dataSet && dataSet.startsWith('bind:') && element.getAttribute('type') === 'dynamic') {\n      dataSet = dataSet.substring(5);\n      const template = element.childNodes.find(c => c instanceof HTMLElement);\n      transformRepeatChildData(template as HTMLElement, dataSet + '[0]', 'repeat_item');\n      transformRepeatChildData(template as HTMLElement, dataSet + '[$i]', 'repeat_item');\n      transformRepeatChildData(template as HTMLElement, dataSet + '[fragment.$i]', 'repeat_item');\n      transformRepeatChildData(template as HTMLElement, dataSet + '[fragment.$i]', 'repeat_item');\n      context.set('old_props', context.props);\n      context.props = ['$item', '$index'];\n      return `<WmAccordion ${transformAttrs(element, context)}>\n        {fragment.eval(() => ${dataSet})?.map(($item, $index) => {\n          return (\n      `;\n    }\n    return `<WmAccordion ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => {\n    if (element.getAttribute('type') === 'dynamic') {\n      context.props = context.get('old_props');\n      return ');})}</WmAccordion>';\n    }\n    return '</WmAccordion>';\n  },\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => {\n    context.props = [];\n    return createComponent(element, context);\n  }\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/container.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\nimport PartialContainerTransformer from '../page/partial-container.transformer';\n\nexport const imports: Import[] = [\n  { name: 'WmContainer', from: '@wavemaker/app-rn-runtime/components/container/container.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let partial = PartialContainerTransformer.pre(element, context) || '';\n    if (partial) {\n      partial = `renderPartial={(props, onLoad) => (${partial})}`;\n    }\n    return `<WmContainer ${transformAttrs(element, context)} ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmContainer>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context))\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabheader.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmTabheader', from: '@wavemaker/app-rn-runtime/components/container/tabs/tabheader/tabheader.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmTabheader ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTabheader>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/tabs/tabpane.transformer.ts": "import { HTMLElement, parse } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport PartialContainerTransformer from \"../../page/partial-container.transformer\";\n\nexport const imports: Import[] = [\n  { name: 'WmTabpane', from: '@wavemaker/app-rn-runtime/components/container/tabs/tabpane/tabpane.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let partial = PartialContainerTransformer.pre(element, context) || '';\n    const paneContent = parse(`<wm-panecontent name=\"${element.getAttribute(\"name\")}Content\"></wm-panecontent>`).firstChild as HTMLElement;\n    paneContent.childNodes = element.childNodes;\n    element.childNodes = [paneContent];\n    if (partial) {\n      partial = `renderPartial={(props, onLoad) => (${partial})}`;\n    }\n    return `<WmTabpane memoize=\"false\" ${transformAttrs(element, context)} ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmTabpane>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context))\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridcolumn.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmGridcolumn', from: '@wavemaker/app-rn-runtime/components/container/layoutgrid/gridcolumn/gridcolumn.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let classname = element.attrs['class'];\n    if (classname) {\n      let classes = classname.split(' ');\n      classes.forEach(function(colClass) {\n        if(colClass === 'bordered') {\n          colClass = 'column-bordered';\n        }\n      });\n      element.setAttribute('class', classes.join(' '));\n    }\n    return `<WmGridcolumn ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmGridcolumn>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/layoutgrid/gridrow.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport { findElement } from '../../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmGridrow', from: '@wavemaker/app-rn-runtime/components/container/layoutgrid/gridrow/gridrow.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const isHeaderRow = (element.attrs['class'] || '').indexOf('table-header-row') >= 0;\n    if (isHeaderRow) {\n      findElement(element, 'WM-LABEL', (e) => {\n        const classes = ('table-header-label ' + (e.attrs['class'] || '')).trim();\n        e.setAttribute('class', classes);\n      });\n    }\n    return `<WmGridrow ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmGridrow>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-footer.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmPanelFooter', from: '@wavemaker/app-rn-runtime/components/container/panel/panel-footer/panel-footer.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmPanelFooter ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPanelFooter>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/panel/panel-content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmPanelContent', from: '@wavemaker/app-rn-runtime/components/container/panel/panel-content/panel-content.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmPanelContent ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPanelContent>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/accordion/accordionpane.transformer.ts": "import { HTMLElement, parse } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport PartialContainerTransformer from \"../../page/partial-container.transformer\";\n\nexport const imports: Import[] = [\n  { name: 'WmAccordionpane', from: '@wavemaker/app-rn-runtime/components/container/accordion/accordionpane/accordionpane.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let partial = PartialContainerTransformer.pre(element, context) || '';\n    const paneContent = parse(`<wm-panecontent name=\"${element.getAttribute(\"name\")}Content\"></wm-panecontent>`).firstChild as HTMLElement;\n    paneContent.childNodes = element.childNodes;\n    element.childNodes = [paneContent];\n    if (partial) {\n      partial = `renderPartial={(props, onLoad) => (${partial})}`;\n    }\n    element.setAttribute('key', element.getAttribute('title') || '');\n    return `<WmAccordionpane memoize=\"false\" ${transformAttrs(element, context)} ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmAccordionpane>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context))\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/container/wizard/wizardstep.transformer.ts": "import { HTMLElement, parse } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmWizardstep', from: '@wavemaker/app-rn-runtime/components/container/wizard/wizardstep/wizardstep.component'}\n];\n\nconst getOnNext = (element: HTMLElement) => {\n  const onNext = element.getAttribute('on-next');\n  return onNext ? `(widget, currentStep, stepIndex) =>{return ${onNext}}` : '';\n}\n\nconst getOnPrev = (element: HTMLElement) => {\n  const onPrev = element.getAttribute('on-prev');\n  return onPrev ? `(widget, currentStep, stepIndex) =>{return ${onPrev}}` : '';\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const onNext = getOnNext(element);\n    const onPrev = getOnPrev(element);\n    element.removeAttribute('on-next');    \n    element.removeAttribute('on-prev');\n    const paneContent = parse(`<wm-panecontent name=\"${element.getAttribute(\"name\")}Content\"></wm-panecontent>`).firstChild as HTMLElement;\n    paneContent.childNodes = element.childNodes;\n    element.childNodes = [paneContent];\n    return `<WmWizardstep ${transformAttrs(element, context)}\n    ${onNext ? `onNext={${onNext}}`: ''} ${onPrev ? `onPrev={${onPrev}}`: ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmWizardstep>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/container/linearlayout/linearlayoutitem.transformer.ts": "import { includes } from 'lodash';\nimport { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmLinearlayoutitem', from: '@wavemaker/app-rn-runtime/components/container/linearlayout/linearlayoutitem/linearlayoutitem.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmLinearlayoutitem ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmLinearlayoutitem>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/prefab/prefab-container.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { createComponent, Import, Transformer, transformAttrs, TranspilationContext } from \"../../transpile\";\n\nexport const imports: Import[] = [\n  { name: 'WmPrefabContainer', from: '@wavemaker/app-rn-runtime/components/prefab/prefab-container.component' }\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmPrefabContainer ${transformAttrs(element, context)} skeletonanimationspeed={fragment.props.skeletonanimationspeed} skeletonanimationresource={fragment.provideAsset(fragment.props.skeletonanimationresource)}  showskeleton={(fragment.App.isSkeletonEnabled() && !fragment.startUpVariablesLoaded) ? true : undefined}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmPrefabContainer>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/prefab/prefab.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport profile from '../../../profiles/profile';\nimport { createComponent, Transformer, transformAttrs, TranspilationContext, Import } from \"../../transpile\";\nimport { inferTypeAndParseProperty } from '../utils';\n\nconst capitalize = (str: string | undefined) => {\n  return str ? str.split('-')\n    .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n    .join('') : str;\n};\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const prefabName = capitalize(element.getAttribute('prefabname'));\n    const widgetname = capitalize(element.getAttribute('widgetname'));\n    const lazyLoad = profile.lazyloadPrefabs ? '<React.Suspense fallback={fragment.loadingMessage}>' : '';\n   // animationresource={fragment.provideAsset(fragment.props.animationresource)}\n   const skeletonanimationresource = element.getAttribute('skeletonanimationresource');\n   if(skeletonanimationresource) {\n    element.setAttribute('skeletonanimationresource', `bind:fragment.provideAsset('${skeletonanimationresource}')`)\n   } \n    if (widgetname) {\n      return `${lazyLoad}<Wm${widgetname} ${transformAttrs(element, context, inferTypeAndParseProperty)}>`;\n    }\n    return `${lazyLoad}<Wm${prefabName}Prefab ${transformAttrs(element, context, inferTypeAndParseProperty)} themeToUse={fragment.theme} parentWatcher={fragment.watcher}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => {\n    const prefabName = capitalize(element.getAttribute('prefabname'));\n    const widgetname = capitalize(element.getAttribute('widgetname'));\n    const lazyLoad = profile.lazyloadPrefabs ? '</React.Suspense>' : '';\n    if (widgetname) {\n      return `</Wm${widgetname}>${lazyLoad}`;\n    }\n    return `</Wm${prefabName}Prefab>${lazyLoad}`;\n  },\n  imports: (element: HTMLElement, context: TranspilationContext) => {\n    const prefabName = element.getAttribute('prefabname');\n    const widgetname = element.getAttribute('widgetname');\n    const widgetmodule = element.getAttribute('widgetmodule');\n    const imports = [{name: '* as ReactNative', from: 'react-native'}] as Import[];\n    if (widgetname) { \n      imports.push({name: 'Wm' + capitalize(widgetname), from: widgetmodule} as Import);\n    } else {\n      imports.push({name: 'Wm' + capitalize(prefabName) + 'Prefab', from: `../../prefabs/${prefabName}/src/pages/Main/Main.component`, lazy: profile.lazyloadPrefabs});\n    }\n    return imports;\n  },\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context),\n  prefabs: (element: HTMLElement, context: TranspilationContext) => [element.getAttribute('prefabname')]\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogcontent.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmDialogcontent', from: '@wavemaker/app-rn-runtime/components/dialogs/dialogcontent/dialogcontent.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmDialogcontent ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmDialogcontent>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/dialogs/alertdialog.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmAlertdialog', from: '@wavemaker/app-rn-runtime/components/dialogs/alertdialog/alertdialog.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmAlertdialog ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmAlertdialog>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/dialogs/dialogactions.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmDialogactions', from: '@wavemaker/app-rn-runtime/components/dialogs/dialogactions/dialogactions.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmDialogactions ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmDialogactions>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/dialogs/dialog.transformer.ts": "import { isString } from 'lodash';\nimport { HTMLElement, NodeType } from 'node-html-parser';\nimport { KeyAttributes } from 'node-html-parser/dist/nodes/html';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmDialog', from: '@wavemaker/app-rn-runtime/components/dialogs/dialog/dialog.component'}\n];\n\nconst applyAttr = (e: HTMLElement, replace: RegExp | string, replaceWith: string) => {\n  Object.keys(e.attrs).forEach(k => {\n    const v = e.getAttribute(k);\n    if (isString(v)) {\n      e.setAttribute(k, v.replace(replace, replaceWith))\n    }\n  });\n  e.childNodes.forEach(c => c instanceof HTMLElement && applyAttr(c, replace, replaceWith));\n};\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const widgetName = element.getAttribute('name');\n    const content = new HTMLElement('wm-dialogcontent', {} as KeyAttributes, null as any, element, [0, 41]);\n    content.nodeType = NodeType.ELEMENT_NODE;\n    const actionsIndex = element.childNodes.findIndex(e => (\n      (e instanceof HTMLElement  && (e as HTMLElement).tagName.toLowerCase() === 'wm-dialogactions')));\n    content.childNodes = element.childNodes;\n    element.childNodes = [content];\n    if (actionsIndex >= 0) {\n      const actions = content.childNodes.splice(actionsIndex, 1);\n      actions && element.childNodes.push(actions[0]);\n    }\n    applyAttr(element, new RegExp('closeDialog\\\\(\\\\)', 'g'), `Widgets.${widgetName}.close()`);\n    return `<WmDialog ${transformAttrs(element, context)}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmDialog>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/dialogs/confirmdialog.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmConfirmdialog', from: '@wavemaker/app-rn-runtime/components/dialogs/confirmdialog/confirmdialog.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmConfirmdialog ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmConfirmdialog>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/device/barcodescanner.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmBarcodescanner', from: '@wavemaker/app-rn-runtime/components/device/barcodescanner/barcodescanner.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmBarcodescanner ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmBarcodescanner>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/device/camera.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCamera', from: '@wavemaker/app-rn-runtime/components/device/camera/camera.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmCamera ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCamera>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/list.transformer.ts": "import parse, { HTMLElement } from 'node-html-parser';\n\nimport { Import, Transformer, transformAttrs, TranspilationContext, createComponent } from \"../../transpile\";\nimport { replaceAll, transformRepeatChildAttr, transformRepeatChildData, transformItemsPerRow } from '../utils';\n\nexport const imports: Import[] = [\n  { name: 'WmList', from: '@wavemaker/app-rn-runtime/components/data/list/list.component'}\n];\n\n\nconst addTemplateClass = (element: HTMLElement,) => {\n  const classesToAdd: string[] = [];\n  if (element.attrs['class']?.indexOf('list-card') >= 0) {\n    classesToAdd.push('list-card-template');\n  }\n  if (classesToAdd.length) {\n    element.childNodes.forEach(n => {\n      if (n instanceof HTMLElement && n.tagName === 'WM-LISTTEMPLATE') {\n        n.setAttribute('class', classesToAdd.join(' ') + ' ' + (n.getAttribute('class') || ''));\n      }\n    });\n  }\n};\n\nconst transformAttr = (name: string, value: string) => {\n    if  (name === 'itemclass') {\n        return value.replace(/fragment\\.item/g, 'item')\n          .replace(/fragment\\.index/g, 'index');\n    }\n    return value;\n};\n\nconst shouldTransformAttr = (name: string, tagName: string): boolean => {\n  if(name === 'itemclass' && tagName === 'wm-list'){\n    return false;\n  }\n\n  return true;\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const widgetName = element.attrs['name'];\n    const listContent = parse(`<wm-list-content name=\"${widgetName + 'Item'}\"></wm-list-content>`).firstChild as HTMLElement;\n    let dataSet = element.getAttribute('dataset');\n    let onEndReached = '';\n    let disableitem = '';\n    let itemKey = '';\n    let currentNode = element.parentNode;\n    while(currentNode) {\n      if(currentNode.rawTagName === 'wm-form' || currentNode.rawTagName === 'wm-liveform') {\n        break;\n      }\n      currentNode = currentNode.parentNode;\n    }\n    const formName = currentNode && currentNode.getAttribute('name');\n    if (formName) {\n      // @ts-ignore\n      element.setAttribute('formRef', formName);\n    }\n    transformItemsPerRow(element);\n    if (dataSet && dataSet.startsWith('bind:')) {\n      const template = element.childNodes.find(c => c instanceof HTMLElement);\n      transformRepeatChildAttr(template as HTMLElement, `fragment.Widgets.${widgetName}.currentItemWidgets`, 'currentItemWidgets');\n      transformRepeatChildAttr(template as HTMLElement, `fragment.Widgets.${widgetName}.currentItem`, '$item');\n      if (formName) {\n        transformRepeatChildAttr(template as HTMLElement, `fragment.Widgets.${formName}.formWidgets.${widgetName}.currentItem`, '$item');\n      }\n      transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[0]', 'list_item');\n      transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[$i]', 'list_item');\n      transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[fragment.$i]', 'list_item');\n      transformRepeatChildData(template as HTMLElement, dataSet.substring(5) + '[fragment.$i]', 'list_item');\n      transformRepeatChildAttr(template as HTMLElement, 'fragment.item', '$item', shouldTransformAttr);\n      transformRepeatChildAttr(template as HTMLElement, 'fragment.index', '$index', shouldTransformAttr);\n      const isLoading = (dataSet as string)\n              .match(/(fragment)+\\.Variables\\.[^\\.]+/g)?.map(v => v + '.isExecuting')\n              .join(' || ');\n      if (isLoading) {\n        element.setAttribute('loadingdata', `bind:${isLoading}`);\n      }\n      if (element.getAttribute('disableitem')?.startsWith('bind:')) {\n        const disabelItemExp = replaceAll(element.getAttribute('disableitem')?.substring(5) || '', \n          dataSet.substring(5) + '[fragment.$i]', '$item');\n        disableitem = `disableitem={($item, $index) => fragment.eval(() => ${disabelItemExp})}`;\n        element.removeAttribute('disableitem')\n      }\n      if (element.getAttribute('itemkey')?.startsWith('bind:')) {\n        let itemKeyExp = element.getAttribute('itemkey')?.substring(5) || '';\n        itemKeyExp = replaceAll(itemKeyExp, dataSet.substring(5) + '[fragment.$i]', '$item');\n        itemKeyExp = replaceAll(itemKeyExp, dataSet.substring(5) + '[0]', '$item');\n        itemKey = `itemkey={($item, $index) => fragment.eval(() => ${itemKeyExp})}`;\n        element.removeAttribute('itemkey')\n      }\n      const variableArr = (dataSet as string).match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n      if (variableArr && variableArr.length === 1) {\n        const variable = variableArr[0];\n        onEndReached=` getNextPageData={($event, $list, page) => {\n          return new Promise((resolve, reject) => {\n            return ${variable}.invoke && ${variable}.invoke({\n              page: page\n            }, (response) => {\n              resolve(${dataSet.substring(5).replace(variable + '.dataSet', 'response')});\n            }, reject);\n          });\n        }} `;\n      }\n    }\n    let listItemClass = element.getAttribute('itemclass');\n    if (listItemClass) {\n      if (listItemClass.startsWith('bind:')) {\n        listItemClass = `bind:(item, index) => (${listItemClass.substring(5)})`;\n      } else {\n        listItemClass = `bind:(item, index) => (\"${listItemClass}\")`\n      }\n      element.setAttribute('itemclass', listItemClass);\n    }\n    addTemplateClass(element);\n    listContent.childNodes = element.childNodes;\n    element.childNodes = [listContent];\n    const markup = `<WmList ${transformAttrs(element, context, transformAttr)}\n    ${disableitem || ''}\n    ${itemKey || ''}\n    ${onEndReached}\n     renderItem={($item, $index, list) => {\n       return (<>`;\n\n    context.listener = 'listener';\n    context.set('old_props', context.props);\n    context.data.listname = widgetName;\n    context.props = ['listener', '$item', '$index', 'currentItemWidgets', 'list'];\n    context.data.listCount = (context.data.listCount || 0) + 1;\n    return markup;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => {\n    delete context.data.listname;\n    context.data.listCount--;\n    return '</>)}}></WmList>';\n  },\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => {\n    if (!context.data.listCount) {\n      context.props = context.get('old_props') || [];\n    }\n    const componentMarkup = createComponent(element, context);\n    context.props = [];\n    return componentMarkup;\n  }\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/liveform.transformer.ts": "import { forEach, remove } from 'lodash';\nimport {HTMLElement, parse} from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n    { name: 'WmLiveForm', from: '@wavemaker/app-rn-runtime/components/data/liveform/liveform.component'}\n];\n\nconst getDataSetExpr = (element: HTMLElement, bindExpr: any) => {\n    return element.getAttribute('isLogin') ? '' : `${bindExpr}[widget.props.name] = newVal;`;\n}\nconst getOnChangeExpr = (element: HTMLElement) => {\n    const formDataSet = element.getAttribute('dataset')?.split(':') || [];\n    let bindExpr = formDataSet?.length > 1 ? formDataSet[1]: null;\n    if (!bindExpr || bindExpr?.includes('Widgets')) {\n        return '';\n    }\n    let currentNode = element.parentNode, exp;\n    const variableArr = bindExpr.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n    const variableName =  (variableArr && variableArr.length) ? variableArr[0] : null ;\n    while(currentNode) {\n        if(currentNode.rawTagName === 'wm-liveform') {\n            element.setAttribute('parentForm', currentNode.getAttribute('name') || '');\n            // assigning child form name.\n            element.setAttribute('childdatasetnode', element.getAttribute('name') || '');\n            break;\n        }\n        currentNode = currentNode.parentNode;\n    }\n    return `\n      ($event, widget, newVal, oldVal) => {\n        if(${variableName}?.twoWayBinding && newVal !== oldVal) {\n          ${bindExpr !== null ? getDataSetExpr(element, bindExpr) : ''}\n        }\n      }\n    `;\n}\n\nconst getFormSubmitExpr = (element: HTMLElement) => {\n    const dataset = element.getAttribute('dataset');\n    if (dataset) {\n        const variableArr = dataset.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n        if (variableArr && variableArr.length) {\n            let variable = variableArr[0];\n            return `\n      (formData, operationType, success, error) => {\n        if (${variable}) {\n            switch (operationType) {\n                case 'insert':\n                    return ${variable}.insertRecord(formData, success, error);\n                case 'update':\n                    return ${variable}.updateRecord(formData, success, error);\n                case 'delete':\n                    return ${variable}.deleteRecord(formData, success, error);\n                default:\n                    return ${variable}.listRecords(formData, success, error);\n            }\n        }\n      }\n    `;\n        }\n    }\n}\n\nconst getFormSuccessExpr = (element: HTMLElement) => {\n    const dataset = element.getAttribute('dataset');\n    if (dataset) {\n        const variableArr = dataset.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n        if (variableArr && variableArr.length) {\n            let variable = variableArr[0];\n            return `\n              (formData, success, error) => {\n                ${variable} && ${variable}.listRecords(formData, success, error);\n              }\n            `;\n        }\n    }\n}\n\nconst getRelatedTableData = (element: HTMLElement)  => {\n    const dataset = element.getAttribute('dataset');\n    if (dataset) {\n        const variableArr = dataset.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n        if (variableArr && variableArr.length) {\n            let variable = variableArr[0];\n            return `\n              (formField) => {\n                ${variable} && ${variable}.execute(\"getRelatedTableData\", {\n                relatedField: formField.state.props.formKey,\n                pagesize: formField.limit,\n                orderBy: formField.orderby ? _.replace(formField.orderby, /:/g, ' ') : '',\n                filterFields: {},\n                filterExpr: formField.filterexpressions ? formField.filterexpressions : {}\n            }).then(response => {\n                primaryKeys = ${variable}.execute(\"getRelatedTablePrimaryKeys\", formField.state.props.formKey);\n                displayField = primaryKeys.length < 0 ? undefined : primaryKeys[0];\n                formField.updateFormWidgetDataset(response, displayField);\n            });\n              }\n            `;\n        }\n    }\n}\n\nconst removeFormActionNodes = (element: any) => {\n    if(element.childNodes.length) {\n        forEach(element.childNodes, (n) => {\n            if (n instanceof HTMLElement && n.rawTagName === 'wm-form-action') {\n                n.remove();\n            } else {\n                removeFormActionNodes(n);\n            }\n        });\n    }\n}\n\nconst setFormActions = (element: HTMLElement, context: TranspilationContext) => {\n    const formActions = element.querySelectorAll('wm-form-action');\n    const formFooter = parse(`<wm-form-footer></wm-form-footer>`).firstChild as HTMLElement;\n    var btnMarkup;\n    removeFormActionNodes(element);\n    formActions.forEach((formAction) => {\n        formAction.setAttribute('formKey', element.attrs['name']);\n        formFooter.appendChild(formAction);\n    });\n    const formBody = parse(`<wm-form-body></wm-form-body>`).firstChild;\n    formBody.childNodes = element.childNodes;\n    element.childNodes = [formBody];\n    if(formActions.length) {\n        element.childNodes.push(formFooter);\n    }\n}\n\nexport default {\n    pre: (element: HTMLElement, context: TranspilationContext) => {\n        const onChange = getOnChangeExpr(element);\n        const formSubmit = getFormSubmitExpr(element);\n        const formSuccess = getFormSuccessExpr(element);\n        const relatedData = getRelatedTableData(element);\n        setFormActions(element, context);\n        return `<WmLiveForm ${transformAttrs(element, context)} \n      ${onChange ? `onChange={${onChange}}`: ''}\n      ${formSuccess ? `formSuccess={${formSuccess}}` : ''}\n      ${relatedData ? `relatedData={${relatedData}}` : ''}\n      ${formSubmit ? `formSubmit={${formSubmit}}` : ''}>`;\n\n    },\n    post: (element: HTMLElement, context: TranspilationContext) => `</WmLiveForm>`,\n    imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/data/card.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCard', from: '@wavemaker/app-rn-runtime/components/data/card/card.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmCard ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCard>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/form.transformer.ts": "import { forEach, remove } from 'lodash';\nimport {HTMLElement, parse} from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmForm', from: '@wavemaker/app-rn-runtime/components/data/form/form.component'}\n];\n\nconst getDataSetExpr = (element: HTMLElement, bindExpr: any) => {\n  return element.getAttribute('isLogin') ? '' : `${bindExpr}[widget.props.name] = newVal;`;\n}\nconst getOnChangeExpr = (element: HTMLElement) => {\n  const formDataSet = element.getAttribute('dataset')?.split(':') || [];\n    let bindExpr = formDataSet?.length > 1 ? formDataSet[1]: null;\n    if (!bindExpr || bindExpr?.includes('Widgets')) {\n      return '';\n    }\n    let currentNode = element.parentNode, exp;\n  const variableArr = bindExpr.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n    const variableName =  (variableArr && variableArr.length) ? variableArr[0] : null ;\n    while(currentNode) {\n      if(currentNode.rawTagName === 'wm-form') {\n        element.setAttribute('parentForm', currentNode.getAttribute('name') || '');\n        // assigning child form name.\n        element.setAttribute('childdatasetnode', element.getAttribute('name') || '');\n        break;\n      }\n      currentNode = currentNode.parentNode;\n    }\n    return `\n      ($event, widget, newVal, oldVal) => {\n        if(${variableName}?.twoWayBinding && newVal !== oldVal) {\n          ${bindExpr !== null ? getDataSetExpr(element, bindExpr) : ''}\n        }\n      }\n    `;\n}\n\nconst getFormSubmitExpr = (element: HTMLElement) => {\n  const dataset = element.getAttribute('dataset');\n  if (dataset) {\n    const variableArr = dataset.match(/(fragment)+\\.Variables\\.[^\\.]+/g);\n    if (variableArr && variableArr.length) {\n      let variable = variableArr[0];\n      return `\n      (formData, success, error) => {\n        ${variable} && \n        ${variable}.invoke(formData, success, error);\n      }\n    `;\n    }\n  }\n}\n\nconst pluckFormActionNodes = (element: any, actions: HTMLElement[] = []) => {\n  if(element.childNodes.length) {\n    forEach(element.childNodes, (n) => {\n      if (n instanceof HTMLElement && n.rawTagName === 'wm-form') {\n        return;\n      } else if (n instanceof HTMLElement && n.rawTagName === 'wm-form-action') {\n        actions.push(n);\n        n.remove();\n      } else {\n        pluckFormActionNodes(n, actions);\n      }\n    });\n    return actions;\n  }\n}\n\nconst setFormActions = (element: HTMLElement, context: TranspilationContext) => {\n  const formActions: any = pluckFormActionNodes(element);\n\n  const formFooter = parse(`<wm-form-footer></wm-form-footer>`).firstChild as HTMLElement;\n  var btnMarkup;\n  formActions.forEach((formAction: any) => {\n    formAction.setAttribute('formKey', element.attrs['name']);\n    formFooter.appendChild(formAction);\n  });\n  const formBody = parse(`<wm-form-body></wm-form-body>`).firstChild;\n  formBody.childNodes = element.childNodes;\n  element.childNodes = [formBody];\n  if(formActions.length) {\n    element.childNodes.push(formFooter);\n  }\n}\n\nconst getBeforeRenderEx = (element: HTMLElement) => {\n  const beforeRender = element.getAttribute('on-beforerender');\n  return beforeRender ? `($metadata, widget) =>{return ${beforeRender}}` : '';\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const onChange = getOnChangeExpr(element);\n    const formSubmit = getFormSubmitExpr(element);\n    const beforeRender = getBeforeRenderEx(element);\n    element.removeAttribute('on-beforerender');\n    let generateComponent;\n\n    if (element.getAttribute('metadata')) {\n      generateComponent = `generateComponent={(metadata, formName) => {return dynamicForm(metadata, formName, fragment);}\n      }`\n    }\n    setFormActions(element, context);\n    return `<WmForm ${transformAttrs(element, context)} \n      ${onChange ? `onChange={${onChange}}`: ''}\n      ${formSubmit ? `formSubmit={${formSubmit}}` : ''}\n      ${beforeRender ? `onBeforerender={${beforeRender}}` : ''}\n      ${generateComponent || ''}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => `</WmForm>`,\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/data/form/form-action.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n    { name: 'WmFormAction', from: '@wavemaker/app-rn-runtime/components/data/form/form-action/form-action.component'}\n];\n\nconst getFormActionExpr = (action: string) => {\n    return `($event) => {\n        ${action}\n    }`\n}\n\nexport default {\n    pre: (element: HTMLElement, context: TranspilationContext) => {\n        const listName = context.data.listname;\n        element.setAttribute('displayName', element.attrs['display-name']);\n        element.removeAttribute('display-name');\n        element.removeAttribute('key');\n        const updateMode = element.attrs['update-mode'];\n        updateMode && element.setAttribute('updateMode', updateMode);\n        element.removeAttribute('update-mode');\n\n        const formName = element.getAttribute('formKey') || element.attrs['key'] || element.attrs['name'];\n        const actionType = element.getAttribute('type');\n        let action = element.getAttribute('action');\n        let btnClass = 'btn-default';\n        if (actionType === 'submit') {\n            btnClass = 'btn-primary';\n            action =  listName ? action = `list.itemWidgets[$index].${formName}.submit();` + (action || '') :`Widgets.${formName}.submit();` + (action || '');\n        }\n        if (actionType === 'reset') {\n            action = listName ? `list.itemWidgets[$index].${formName}.formreset()` + (action || '') : `Widgets.${formName}.formreset();` + (action || '');\n        }\n        if (action) {\n            action = action.endsWith(';') ? action.substring(0, action.length - 1): action;\n            action = action.split(';').map(s => {\n                if(s === 'reset()') {\n                    return listName ? `list.itemWidgets[$index].${formName}.formreset()` : `fragment.Widgets.${formName}.formreset()`\n                } else if (s === 'edit()' || s === 'new()' || s === 'cancel()' || s === 'delete()') {\n                    return  listName ?  `list.itemWidgets[$index].${formName}.` + s : `fragment.Widgets.${formName}.` + s\n                } else {\n                    return  listName ? s : 'fragment.' + s\n                }\n            }).join(';');\n            element.setAttribute('action', `()=> ${action}`);\n        }\n\n        element.setAttribute('btnClass', btnClass);\n        element.removeAttribute('type');\n        element.setAttribute('name', formName + '_' + actionType + '_formAction');\n        return `<WmFormAction ${transformAttrs(element, context)}\n            ${action && actionType ? `formAction={${getFormActionExpr(action)}}` : ''} >`;\n    },\n    post: (element: HTMLElement, context: TranspilationContext) => '</WmFormAction>',\n    imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/data/form/form-footer.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmFormFooter', from: '@wavemaker/app-rn-runtime/components/data/form/form-footer/form-footer.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmFormFooter ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmFormFooter>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/form/form-body.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmFormBody', from: '@wavemaker/app-rn-runtime/components/data/form/form-body/form-body.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmFormBody ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmFormBody>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/form/form-field.transformer.ts": "import { HTMLElement, parse } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext, createComponent } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmFormField', from: '@wavemaker/app-rn-runtime/components/data/form/form-field/form-field.component'}\n];\n\nconst getAttribute = (element: HTMLElement, attrName: string) => {\n  const value = element.getAttribute(attrName);\n  return value?.replace(/\"/g, '&quot;');\n};\n\nconst getStyleProps = (element: HTMLElement) => {\n  const attributes = ['fontsize', 'fontweight', 'color', 'textalign', 'fontfamily', 'textdecoration', 'fontstyle'];\n  return attributes.reduce((propsString, attr) => {\n    const value = getAttribute(element, attr);\n    if (value !== undefined) {\n      propsString += `${attr}=${value} `;\n    }\n    return propsString\n  }, '');\n};\n\nconst extractField = (element: HTMLElement, context: TranspilationContext, formElement: any) => {\n  const widgetType = getAttribute(element, 'widget') || 'text';\n  const widgetName = getAttribute(element, 'key') ||  getAttribute(element, 'name') ||  'text' + '_formWidget';\n  return getFormWidgetTemplate(widgetType, widgetName, element, getAttribute(formElement, 'formdata'));\n};\n\nconst getFormWidgetTemplate = (widgetType: string, widgetName: string, element: HTMLElement, formDataVariable: any) => {\n  widgetName = widgetName.replace('.', '_');\n  var labelMarkup = getAttribute(element, 'displayname') ? `<wm-label \n    caption=\"bind:$formField.displayname\"\n    class=\"form-label ${widgetName}_formLabel\"\n    conditionalclass=\"fragment.getFormFieldStyles($formField, 'label')\"\n    memoize=\"false\"\n    required=\"bind:$formField.required\"\n    name=\"${widgetName}_formLabel\"></wm-label>` : '';\n\n  const onFocus = getAttribute(element, 'on-focus');\n  if (onFocus) {\n    element.removeAttribute('on-focus');\n  }\n  const onBlur = getAttribute(element, 'on-blur');\n  if (onBlur) {\n    element.removeAttribute('on-blur');\n  }\n  const onTap = getAttribute(element, 'on-tap');\n  if (onTap) {\n    element.removeAttribute('on-tap');\n  }\n  const placeholder = getAttribute(element, 'placeholder');\n  if (placeholder) {\n    element.removeAttribute('placeholder');\n  }\n  const formfieldName = getAttribute(element, 'name');\n\n  var commonFields = `name=\"${widgetName}\"\n                      formfieldname=\"${formfieldName}\"\n                      formfield=\"true\"\n                      memoize=\"false\"\n                      required=\"bind:$formField.required\"\n                      regexp=\"bind:$formField.regexp\"\n                      validationmessage=\"bind:$formField.validationmessage\"\n                      datavalue=\"bind:$formField.defaultvalue\"\n                      disabled=\"bind:$formField.disabled\"\n                      readonly=\"bind:$formField.readonly\"\n                      class=\"form-input form-${widgetType} form-${widgetName}-input\"\n                      conditionalclass=\"fragment.getFormFieldStyles($formField, 'commonField')\"\n                      ${placeholder ? 'placeholder=\"'+placeholder+'\"'  : ''}\n                      ${onFocus ? 'on-focus='+onFocus : ''}\n                      ${onBlur ? 'on-blur='+onBlur : ''}\n                      ${onTap ? 'on-tap='+onTap : ''}`;\n  var widgetMarkup = getWidgetMarkup(widgetType, widgetName, commonFields, element);\n  let currentNode = element.parentNode;\n  while(currentNode) {\n    if(currentNode.rawTagName === 'wm-form' || currentNode.rawTagName === 'wm-liveform' || currentNode.getAttribute('type') === \"dynamic\") {\n      break;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  const formFieldTags = ['text', 'password', 'number', 'currency', 'textarea'];\n  const isFloatingForm = currentNode.getAttribute('captionposition') === 'floating';\n  // * not showing label for a floating input\n  if (formFieldTags.includes(widgetType) && isFloatingForm) return {label: null, field: parse(widgetMarkup).firstChild as HTMLElement};\n\n  return {label: labelMarkup ? parse(labelMarkup).firstChild as HTMLElement : null, field: parse(widgetMarkup).firstChild as HTMLElement};\n};\n\nconst getWidgetMarkup = (widgetType: string, widgetName: string, commonFields: string, element: HTMLElement) => {\n  let tmpl = '';\n  const getDisplayExpr = element.getAttribute('displayexpression') || element.getAttribute('displaylabel');\n  const displayExp = getDisplayExpr ? `displayexpression='${getDisplayExpr}'` : '';\n  const formFieldTags = ['text', 'password', 'number', 'currency', 'textarea'];\n  let currentNode = element.parentNode;\n  while(currentNode) {\n    if(currentNode.rawTagName === 'wm-form' || currentNode.rawTagName === 'wm-liveform' || currentNode.getAttribute('type') === \"dynamic\") {\n      break;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  const isFloatingForm = currentNode.getAttribute('captionposition') === 'floating';\n  const floatinglabel = formFieldTags.includes(widgetType) && isFloatingForm ? `floatinglabel='${element.getAttribute('displayname')}'` : '';\n  const dateTimeDialogTags = ['date', 'time', 'datetime'];\n  const isDateTimeTag = dateTimeDialogTags.includes(widgetType);\n  // * date picker modal customization\n  const dateheadertitle = isDateTimeTag && element.getAttribute('dateheadertitle') ? `dateheadertitle='${element.getAttribute('dateheadertitle')}'` : '';\n  const dateconfirmationtitle = isDateTimeTag && element.getAttribute('dateconfirmationtitle') ? `dateconfirmationtitle='${element.getAttribute('dateconfirmationtitle')}'` : '';\n  const datecanceltitle = isDateTimeTag && element.getAttribute('datecanceltitle') ? `datecanceltitle='${element.getAttribute('datecanceltitle')}'` : '';\n\n  // * time picker modal customization\n  const timeheadertitle = isDateTimeTag && element.getAttribute('timeheadertitle') ? `timeheadertitle='${element.getAttribute('timeheadertitle')}'` : '';\n  const timeconfirmationtitle = isDateTimeTag && element.getAttribute('timeconfirmationtitle') ? `timeconfirmationtitle='${element.getAttribute('timeconfirmationtitle')}'` : '';\n  const timecanceltitle = isDateTimeTag && element.getAttribute('timecanceltitle') ? `timecanceltitle='${element.getAttribute('timecanceltitle')}'` : '';\n\n  const outputformat = element.getAttribute('outputformat') ? `outputformat='${element.getAttribute('outputformat')}'` : ``;\n\n\n  //Formats textAreaHelpText by replacing widget references with form widget references \n  const formatTextAreaHelpText = (textAreaHelpText: string | undefined, formFieldName: string | undefined, widgetName: string) => {\n    // Make sure textAreaHelpText is a string\n    if (!textAreaHelpText || typeof textAreaHelpText !== 'string' || !formFieldName || !widgetName || textAreaHelpText.length === 0) return '';\n\n    // For text that already contains formWidgets reference pattern, don't modify it\n    if (textAreaHelpText.includes(`Widgets.${formFieldName}.formWidgets.${widgetName}`)) {\n      return textAreaHelpText;\n    }\n    // Replace direct widget references with form widget references\n    return textAreaHelpText?.replace(\n      new RegExp(`fragment\\\\.Widgets\\\\.${widgetName}\\\\.maxchars`, 'g'),\n      `fragment.Widgets.${formFieldName}.formWidgets.${widgetName}.maxchars`\n    )?.replace(\n      new RegExp(`fragment\\\\.Widgets\\\\.${widgetName}\\\\.charlength`, 'g'),\n      `fragment.Widgets.${formFieldName}.formWidgets.${widgetName}.charlength`\n    );\n\n\n  }\n\n  switch (widgetType) {\n    case 'text':\n    case 'password':\n      let inputtype = widgetType === 'password' ? 'password' : getAttribute(element, 'inputtype');\n      inputtype = inputtype ? `type=${inputtype}` : '';\n      tmpl = `<wm-text ${inputtype} ${commonFields} \n                updateon=\"bind:$formField.updateon || 'blur'\"\n                maxchars=\"bind:$formField.maxchars\"\n                ${getStyleProps(element)}\n                showskeleton=${getAttribute(element, 'showtextskeleton') === 'false' ? \"false\" : \"undefined\"}\n                ${floatinglabel}\n                ></wm-text>`;\n      break;\n    case 'textarea':\n      const formfieldName = currentNode.getAttribute('name');\n      // Check if textAreaHelpText is defined before passing to the function\n      const helpText = element.getAttribute('limitdisplaytext');\n      const formattedTextAreaHelpText = formatTextAreaHelpText(helpText, formfieldName, widgetName);\n      // Only include formattedTextAreaHelpText in the template if it exists\n      const helpTextAttr = formattedTextAreaHelpText ? `limitdisplaytext='${formattedTextAreaHelpText}'` : '';\n\n      tmpl = `<wm-textarea ${commonFields}\n                updateon=\"bind:$formField.updateon || 'blur'\"\n                maxchars=\"bind:$formField.maxchars\"\n                ${helpTextAttr}\n                ${floatinglabel}\n                ${getStyleProps(element)} \n              ></wm-textarea>`;\n      break;\n    case 'number':\n      tmpl = `<wm-number ${commonFields}\n                updateon=\"bind:$formField.updateon || 'blur'\"\n                minvalue=\"bind:$formField.minvalue\"\n                maxvalue=\"bind:$formField.maxvalue\"\n                displayValue=\"bind:$formField.displayValue\"\n                ${floatinglabel}>\n                ${getStyleProps(element)}\n              </wm-number>`;\n      break;\n    case 'currency':\n      tmpl = `<wm-currency ${commonFields}\n                  updateon=\"bind:$formField.updateon || 'blur'\"\n                  minvalue=\"bind:$formField.minvalue\"\n                  maxvalue=\"bind:$formField.maxvalue\"\n                  ${floatinglabel}>\n                  ${getStyleProps(element)}\n                </wm-currency>`;\n      break;\n    case 'select':\n      tmpl = `<wm-select ${commonFields} ${displayExp}\n                dataset=\"bind:$formField.dataset\"\n                displayfield=\"bind:$formField.displayfield\"\n                datafield=\"bind:$formField.datafield\"\n                class=\"form-widget-select\"\n                ${getStyleProps(element)}\n              ></wm-select>`;\n      break;\n    case 'autocomplete':\n      tmpl = `<wm-search ${commonFields} ${displayExp}\n                type=\"autocomplete\"\n                limit=\"bind:$formField.limit\"\n                displayimagesrc=\"bind:$formField.displayimagesrc\"\n                searchkey=\"bind:$formField.searchkey\"\n                showclear=\"bind:$formField.showclear || false\"\n                dataset=\"bind:$formField.dataset\"\n                displayfield=\"bind:$formField.displaylabel\"\n                datafield=\"bind:$formField.datafield\"\n                ${getStyleProps(element)}\n                ></wm-search>`;\n      break;\n    case 'chips':\n      tmpl = `<wm-chips ${commonFields} ${displayExp}\n                minchars=\"bind:$formField.minchars || 1\"\n                maxsize=\"bind:$formField.maxsize\"\n                displayimagesrc=\"bind:$formField.displayimagesrc\"\n                searchkey=\"bind:$formField.searchkey\"\n                dataset=\"bind:$formField.dataset || 'Option 1, Option 2, Option 3'\"\n                displayfield=\"bind:$formField.displayfield\"\n                datafield=\"bind:$formField.datafield\"\n                ></wm-chips>`;\n      break;\n    case 'checkbox':\n      tmpl = `<wm-checkbox ${commonFields}\n                  caption=\"bind:$formField.caption\"\n                  checkedvalue=\"bind:$formField.checkedvalue || true\"\n                  uncheckedvalue=\"bind:$formField.uncheckedvalue || false\">\n              </wm-checkbox>`;\n      break;\n    case 'checkboxset':\n      tmpl = `<wm-checkboxset ${commonFields} ${displayExp}\n                dataset=\"bind:$formField.dataset || 'Option 1, Option 2, Option 3'\"\n                displayfield=\"bind:$formField.displayfield\"\n                datafield=\"bind:$formField.datafield\"\n              ></wm-checkboxset>`;\n      break;\n    case 'toggle':\n      tmpl = `<wm-toggle ${commonFields}\n                type=\"toggle\"\n                checkedvalue=\"bind:$formField.checkedvalue || true\"\n                uncheckedvalue=\"bind:$formField.uncheckedvalue || false\">\n              </wm-toggle>`;\n      break;\n    case 'switch':\n      tmpl = `<wm-switch ${commonFields} ${displayExp}\n                dataset=\"bind:$formField.dataset || 'yes, no, maybe'\"\n                displayfield=\"bind:$formField.displayfield\"\n                datafield=\"bind:$formField.datafield\"\n              ></wm-switch>`;\n      break;\n    case 'radioset':\n      tmpl = `<wm-radioset ${commonFields} ${displayExp}\n                dataset=\"bind:$formField.dataset || 'Option 1, Option 2, Option 3'\"\n                displayfield=\"bind:$formField.displayfield\"\n                datafield=\"bind:$formField.datafield\"\n              ></wm-radioset>`;\n      break;\n    case 'date':\n      tmpl += `<wm-date ${commonFields}\n                mindate=\"bind:$formField.mindate\"\n                maxdate=\"bind:$formField.maxdate\"\n                datepattern=\"bind:$formField.datepattern\"\n                ${outputformat}\n                ${dateheadertitle}\n                ${dateconfirmationtitle}\n                ${datecanceltitle}\n                ></wm-date>`;\n      break;\n    case 'datetime':\n    case 'timestamp':\n      tmpl = `<wm-datetime ${commonFields}\n                mindate=\"bind:$formField.mindate\"\n                maxdate=\"bind:$formField.maxdate\"\n                datepattern=\"bind:$formField.datepattern\"\n                ${outputformat}\n                ${dateheadertitle}\n                ${dateconfirmationtitle}\n                ${datecanceltitle}\n                ${timeheadertitle}\n                ${timeconfirmationtitle}\n                ${timecanceltitle}\n                ></wm-datetime>`;\n      break;\n    case 'time':\n      tmpl += `<wm-time ${commonFields} \n                timepattern=\"bind:$formField.timepattern\"\n                ${outputformat}\n                ${timeheadertitle}\n                ${timeconfirmationtitle}\n                ${timecanceltitle}\n                ></wm-time>`;\n      break;\n    case 'slider':\n      tmpl+= `<wm-slider ${commonFields} \n                minvalue=\"bind:$formField.minvalue || 0\"\n                maxvalue=\"bind:$formField.maxvalue || 100\"\n                step=\"bind:$formField.step || 1\"\n                ></wm-slider>`;\n      break;\n    case 'rating':\n      let showcaptions = getAttribute(element, 'showcaptions');\n      showcaptions = showcaptions ? `showcaptions=\"bind:$formField.showcaptions\"` : '';\n      tmpl+= `<wm-rating ${commonFields} ${displayExp}\n                ${getAttribute(element, 'dataset') ? 'dataset=\"bind:$formField.dataset\"' : ''}\n                displayfield=\"bind:$formField.displayfield || 'value'\"\n                datafield=\"bind:$formField.datafield || 'key'\"\n                ${showcaptions}\n                maxvalue=\"bind:$formField.maxvalue || 5\"\n                ></wm-rating>`;\n      break;\n  }\n  return tmpl;\n}\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    const listName = context.data.listname;\n    let currentNode = element.parentNode;\n    while(currentNode) {\n      if(currentNode.rawTagName === 'wm-form' || currentNode.rawTagName === 'wm-liveform' || currentNode.getAttribute('type') === \"dynamic\") {\n        break;\n      }\n      currentNode = currentNode.parentNode;\n    }\n    let formName, formScope;\n    if (currentNode.getAttribute('type') === \"dynamic\") {\n      formName = currentNode.getAttribute('dynamicForm');\n      formScope = `formScope={() => fragment.Widgets.${formName}}`;\n    } else {\n      formName = currentNode.getAttribute('name')\n    }\n\n    // @ts-ignore\n    element.setAttribute('formRef', formName);\n    if (element.attrs['primary-key']) {\n      element.setAttribute('primaryKey', element.attrs['primary-key']);\n    }\n    element.removeAttribute('primary-key');\n    element.setAttribute('isRelated', element.attrs['is-related']);\n    element.removeAttribute('is-related');\n    if (element.getAttribute('dataset')) {\n      element.setAttribute('isDataSetBound', \"true\");\n    }\n    const validate = `widget.validateFormField.call(widget);`;\n    let onChange = element.getAttribute('on-change') || '';\n    onChange = listName ? `list.itemWidgets[$index].${currentNode.getAttribute('name')} && list.itemWidgets[$index].${currentNode.getAttribute('name')}.props.onChange && list.itemWidgets[$index].${currentNode.getAttribute('name')}.props.onChange($event, widget, newVal, oldVal);` + onChange\n                        :`fragment.Widgets.${currentNode.getAttribute('name')} && fragment.Widgets.${currentNode.getAttribute('name')}.props.onChange && fragment.Widgets.${currentNode.getAttribute('name')}.props.onChange($event, widget, newVal, oldVal);` + onChange;\n    element.setAttribute('on-change', onChange);\n    const formField = extractField(element, context, currentNode);\n    if (formField.label) {\n      element.childNodes.push(formField.label);\n    }\n    element.childNodes.push(formField.field);\n    element.removeAttribute('datavalue');\n    element.removeAttribute('height');\n    element.setAttribute('on-validate', validate);\n    const childDatasetNode = currentNode.getAttribute('childdatasetnode');\n    if (childDatasetNode) {\n      element.setAttribute('formKey', childDatasetNode + '.' + element.attrs['name']);\n    } else {\n      element.setAttribute('formKey', element.attrs['key'] || element.attrs['name']);\n    }\n    element.removeAttribute('key');\n\n    return `<WmFormField ${formScope || ''} ${transformAttrs(element, context)} renderFormFields={($formField) => (<>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</>)}></WmFormField>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n  createComponent: (element: HTMLElement, context: TranspilationContext) => createComponent(element, context)\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/data/card/card-footer.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmCardFooter', from: '@wavemaker/app-rn-runtime/components/data/card/card-footer/card-footer.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmCardFooter ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCardFooter>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/card/card-content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\nimport PartialContainerTransformer from '../../page/partial-container.transformer';\n\nexport const imports: Import[] = [\n  { name: 'WmCardContent', from: '@wavemaker/app-rn-runtime/components/data/card/card-content/card-content.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    let partial = PartialContainerTransformer.pre(element, context) || '';\n    if (partial) {\n      partial = `renderPartial={(props, onLoad) => (${partial})}`;\n    }\n    return `<WmCardContent ${transformAttrs(element, context)}  ${partial}>`;\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmCardContent>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports.concat(PartialContainerTransformer.imports(element, context))\n} as Transformer;\n", "wavemaker-rn-codegen/src/transpile/components/data/list/list-content.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, Transformer, TranspilationContext } from '../../../transpile';\nimport { capitalize } from 'lodash';\n\nexport const imports: Import[] = [\n];\n\nexport default {\n    pre: (element: HTMLElement, context: TranspilationContext) => `<>`,\n    post: (element: HTMLElement, context: TranspilationContext) => '</>',\n    imports: (element: HTMLElement, context: TranspilationContext) => imports,\n    createComponent: (e: HTMLElement, context: TranspilationContext, component = 'list') => {\n      const result = context.result;\n      const widgetName = capitalize(e.attrs['name']);\n      result.components[widgetName] = `React.memo(({$item, $index, ${component}, fragment}) => {\n          const item = $item;\n          const [currentItemWidgets] = React.useState({});\n          ${component}.itemWidgets = ${component}.itemWidgets || [];\n          ${component}.itemWidgets[$index] = currentItemWidgets;\n          const [listener] = React.useState({\n            onComponentInit: (c) => {\n              currentItemWidgets[c.name] = c;\n              fragment.onComponentInit(c);\n            },\n            onComponentDestroy: (c) => {\n              fragment.onComponentDestroy(c);\n              delete currentItemWidgets[c.name];\n            }\n          });\n          const { watch } = useWatcher(fragment.watcher);\n          return (${result.markup});\n      })`;\n      result.markup = `<${widgetName} $item={$item} $index={$index} ${component}={${component}} key={$index} fragment={fragment}/>`;\n      return result;\n    }\n  } as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/list/list-template.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from \"../../../transpile\";\n\nexport const imports: Import[] = [\n  { name: 'WmListTemplate', from: '@wavemaker/app-rn-runtime/components/data/list/list-template/list-template.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => `<WmListTemplate ${transformAttrs(element, context)}>`,\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmListTemplate>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports,\n} as Transformer;", "wavemaker-rn-codegen/src/transpile/components/data/list/list-action-template.transformer.ts": "import { HTMLElement } from 'node-html-parser';\n\nimport { Import, transformAttrs, Transformer, TranspilationContext } from '../../../transpile';\n\nexport const imports: Import[] = [\n  { name: 'WmListActionTemplate', from: '@wavemaker/app-rn-runtime/components/data/list/list-action-template/list-action-template.component'}\n];\n\nexport default {\n  pre: (element: HTMLElement, context: TranspilationContext) => {\n    return `<WmListActionTemplate ${transformAttrs(element, context)}>`\n  },\n  post: (element: HTMLElement, context: TranspilationContext) => '</WmListActionTemplate>',\n  imports: (element: HTMLElement, context: TranspilationContext) => imports\n} as Transformer;", "wavemaker-rn-codegen/src/theme/font-stylesheet.transpiler.ts": "import * as csstree from 'css-tree';\nimport { assignIn, clone, extend, get, set, isEmpty } from 'lodash';\nimport transformCSSToReactNative from 'css-to-react-native-transform';\nimport { getRNSelector } from './components/style-definition.provider';\n\ninterface Rule {\n    selectors: string[][];\n    body: string;\n}\n\nexport class FontStylesheetTranspiler {\n    getRules(rnstylesheet: string) {\n        const ast = csstree.parse(rnstylesheet);\n        const rules = [] as Rule[];\n        let currentRule: Rule = {} as any;\n        let currentSelector: string[] = null as any;\n        csstree.walk(ast, {\n            enter(node: csstree.CssNode) {\n                if (node.type === 'Rule') {\n                    currentRule = {\n                        selectors: [],\n                        body: ''\n                    };\n                    rules.push(currentRule);\n                } else if (node.type === 'Selector') {\n                    currentSelector = [];\n                    currentRule.selectors.push(currentSelector);\n                } else if (node.type === 'ClassSelector') {\n                    currentSelector.push('.' + node.name);\n                } else if (node.type === 'Block') {\n                    currentRule.body = csstree.generate(node);\n                }\n            }\n        });\n        return rules;\n    }\n\n    toReactNativeStyles(rnstylesheet: string) {\n        const regex = /font-family:(.*?);/g;\n        const fontFamily = [...rnstylesheet.matchAll(regex)][0][1];\n        const rules = this.getRules(rnstylesheet.replace(/\\\\e/g, '\\\\ue'));\n        const reactStyles = {} as any;\n        rules.push({ selectors: [['.'+ fontFamily]], body: '{fontFamily: \"' + fontFamily +'\"}'});\n        rules.forEach(r => {\n            if ( !isEmpty(r.selectors[0]) ) {\n                const newStyles = transformCSSToReactNative(`.style${r.body}`).style;\n                r.selectors.map((s: any) => {\n                    s.push('.app-icon-shape');\n                    const _newStyles: any = clone(newStyles);\n                    if (_newStyles.content) {\n                        _newStyles.content = _newStyles.content?.replace(/\"u/,'@_u').replace(/\"/g, '');\n                    }\n                    if (!_newStyles.fontFamily) {\n                        _newStyles.fontFamily = fontFamily;\n                    }\n                    const cssClass = s.join('');\n                    const reactStyleName = getRNSelector(cssClass);\n\n                    if (reactStyleName) {\n                        const oldStyles = get(reactStyles, reactStyleName);\n                        set(reactStyles, reactStyleName, oldStyles ? extend(oldStyles, _newStyles) : _newStyles);\n                    } else {\n                        reactStyles[cssClass] = _newStyles;\n                    }\n                });\n            }\n        });\n        Object.keys(reactStyles).forEach(k => {\n            const stylename = Object.keys(reactStyles[k])[0];\n            if (stylename && stylename.startsWith('app-')) {\n                reactStyles[k] = reactStyles[k][stylename];\n            }\n            const styles = reactStyles[k];\n            const childStyles = styles && styles['__child'];\n            if (childStyles) {\n                delete styles['__child'];\n                assignIn(styles, childStyles);\n            }\n        });\n\n        return reactStyles;\n    }\n\n}\n\nconst fontStyleSheet = new FontStylesheetTranspiler();\nexport default fontStyleSheet;", "wavemaker-rn-codegen/src/theme/theme.service.ts": "import fs from \"fs-extra\";\nimport Path from 'path';\nimport CleanCSS from 'clean-css';\nimport rimraf from 'rimraf';\nimport AdmZip from 'adm-zip';\nimport puppeteer from 'puppeteer';\nimport { StyleDefinitions } from './components/style-definition.provider';\nimport { cloneDeep, isString } from 'lodash';\nimport variables from './variables';\nimport less from 'less';\nimport { loadTemplate, readAndReplaceFileContent, writeFile } from '../utils';\nimport { RnStylesheetTranspiler } from './rn-stylesheet.transpiler';\nimport {FontStylesheetTranspiler} from \"./font-stylesheet.transpiler\";\n\nconst THEME_TEMPLATE_PATH = __dirname  + '/../templates/theme';\nconst STYLE__TEMPLATE = loadTemplate(__dirname + '/../templates/theme/wavemaker/styles.less.template');\nconst VARIABLE__TEMPLATE = loadTemplate(__dirname + '/../templates/theme/wavemaker/variables.less.template');\nconst VARIABLE_JS_LESS__TEMPLATE = loadTemplate(__dirname + '/../templates/theme/wavemaker/variables.js.less.template');\nconst COMPONENT_STYLE_LESS_DEF_TEMPLATE = loadTemplate(__dirname + '/../templates/component/style-def.template');\nconst WM_PROPERTIES_TEMPLATE = loadTemplate(__dirname + '/../templates/theme/wmproject.properties.template');\n\nexport class ThemeService {\n\n    private rnStylesheetTranspiler = new RnStylesheetTranspiler();\n    private fontStylesheetTranspiler= new FontStylesheetTranspiler();\n\n    private cleanDir(path: string) {\n        return new Promise<void>((resolve, reject) => {\n            rimraf(path, (e) => e ? reject(e) : resolve());\n        }).then(() => {\n            fs.mkdirsSync(path);\n        });\n    }\n\n    private prepareBuildDir(src: string, os: string, dest: string) {\n        return this.cleanDir(`${dest}`).then(() => {\n            fs.copySync(`${src}/wavemaker`, `${dest}/wavemaker`);\n            fs.copySync(`${src}/src/common`, `${dest}/custom`);\n            fs.copySync(`${src}/src/${os}`, `${dest}/custom/os`);\n        });\n    }\n\n    public minifyCSS(src: string, dest = src): Promise<void> {\n        const data = fs.readFileSync(src, 'utf8');\n        return new Promise((resolve) => {\n            new CleanCSS({\n                format: {\n                    semicolonAfterLastProperty: true\n                }\n            }).minify(data, (errors, minified) => {\n            fs.writeFileSync(dest, minified.styles);\n            resolve();\n        })});\n    }\n\n    private compileLess(src: string, cwd: string, dest = src) {\n        const content = fs.readFileSync(src, 'utf8');\n        return less.render(content, {\n                paths: [cwd]\n            }).then(output => {\n                if (output) {\n                    fs.writeFileSync(dest, output.css);\n                }\n            });\n    }\n\n    private compressStyles(styles: string) {\n        return styles.trim().replace(/\\/\\*(.|\\s)*?\\*\\//g, '').replace(/\\}\\s\\./g, '}.');\n    }\n\n    update(themePath: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (fs.existsSync(`${themePath}/wavemaker`)) {\n                rimraf(`${themePath}/wavemaker`, (e) => {\n                    if (e) {\n                        reject(e);\n                    } else {\n                        resolve();\n                    }\n                });\n            }\n        }).then(() => {\n            fs.copySync(`${THEME_TEMPLATE_PATH}/wavemaker`, `${themePath}/wavemaker`, {\n                filter: (src) => !src.endsWith('.template')\n            })\n            this.generateStyle(themePath);\n            this.generateVariables(themePath);\n        });\n    }\n\n    generateStudioStyles(rawStyles: string) {\n        return this.rnStylesheetTranspiler.toDesignStyles(rawStyles);\n    }\n\n    generateReactNativeStyles(rawStyles: string) {\n        return JSON.stringify(this.rnStylesheetTranspiler.toReactNativeStyles(rawStyles), null, 4);\n    }\n\n    generateFontReactNativeStyles(rawStyles: string) {\n        return JSON.stringify(this.fontStylesheetTranspiler.toReactNativeStyles(rawStyles), null, 4)\n            .replace(/@_u/g, '\\\\u');\n    }\n\n    async takeScreenShots(themeProjectPath: string) {\n        const dist = `${themeProjectPath}/dist`;\n        let browser: puppeteer.Browser = null as any;\n        try {\n            browser = await puppeteer.launch();\n            const page = await browser.newPage();\n            await page.goto(`file://${dist}/index.html`);\n            await page.setViewport({width: 220, height: 232});\n            await page.screenshot({\n                path: `${themeProjectPath}/theme.png`,\n                clip: {\n                    x: 0,\n                    y: 0,\n                    width: 200,\n                    height: 160\n                }\n            });\n        } catch(e) {\n            console.log('Not able to take representative screenshot of theme, using Puppeteer. Please check the error.');\n            console.error(e);\n        } finally {\n            browser && browser.close();\n        }\n    }\n\n    compile(themeProjectPath: string, buildDir = themeProjectPath, os?: string): Promise<any> {\n        if (!fs.existsSync(`${themeProjectPath}`)) {\n            return Promise.resolve();\n        }\n        if (os) {\n            const osBuild = `${buildDir}/build/${os}`;\n            const osDist = `${buildDir}/dist/${os}`;\n            return this.cleanDir(osBuild)\n            .then(() => this.cleanDir(osDist))\n            .then(() => this.prepareBuildDir(themeProjectPath, os, osBuild))\n            .then(() => this.compileLess(\n                `${osBuild}/wavemaker/styles.less`,\n                `${osBuild}/wavemaker`,\n                `${osDist}/raw-styles.css`\n            )).then(() => this.minifyCSS(`${osDist}/raw-styles.css`, `${osDist}/raw-styles.min.css`))\n            .then(() => {\n                const rawStyle = fs.readFileSync(`${osDist}/raw-styles.min.css`, 'utf-8');\n                fs.writeFileSync(`${osDist}/style.css`, this.generateStudioStyles(rawStyle));\n                fs.writeFileSync(`${osDist}/style.js`, 'export default ' + this.generateReactNativeStyles(rawStyle) + ';');\n                fs.removeSync(`${osDist}/raw-styles.css`);\n                fs.removeSync(`${osDist}/raw-styles.min.css`);\n            })\n            .then(() => {\n                return this.compileLess(\n                    `${osBuild}/wavemaker/variables.js.less`,\n                    `${osBuild}/wavemaker`,\n                    `${osDist}/variables.js`\n                );\n            })\n            .then(() => {\n                fs.copySync(`${osBuild}/wavemaker/assets`, `${osDist}/assets`);\n                fs.copySync(`${osBuild}/custom/assets`, `${osDist}/assets`);\n            })\n            .then(async () => {\n                const platformFontConfigJson = require(`${themeProjectPath}/wavemaker/assets/fonts/font.config.json`);\n                const themeFontConfigJsonPath = `${osBuild}/custom/assets/fonts/font.config.json`;\n                let themeFontConfigJson =  null as any;\n                if (fs.existsSync(themeFontConfigJsonPath)) { \n                    themeFontConfigJson = require(`${osBuild}/custom/assets/fonts/font.config.json`);\n                }\n                const fontConfigTemplate = loadTemplate(`${themeProjectPath}/wavemaker/assets/fonts/font.config.js.hbs`);\n                fs.removeSync(`${osDist}/assets/fonts/font.config.js.hbs`);\n                fs.removeSync(`${osDist}/assets/fonts/font.config.json`);\n                const fonts = [...platformFontConfigJson.fonts, ...(themeFontConfigJson?.fonts || [])];\n                const fontGenPromise = Promise.all(fonts.map(f => {\n                    if (f.csspath) {\n                        f.stylePath = f.csspath.replace('.css', '.js');\n                        return this.getIconFontScripts(Path.normalize(`${osDist}/assets/fonts/${f.csspath}`));\n                    }\n                    return Promise.resolve();\n                }));\n                writeFile(`${osDist}/assets/fonts/font.config.js`, fontConfigTemplate({\n                    baseFont: themeFontConfigJson?.baseFont || platformFontConfigJson.baseFont,\n                    fonts: fonts\n                }));\n                let content = fs.readFileSync(`${osDist}/variables.js`, 'utf8');\n                content = content.replace(/;/g, ',');\n                content = 'import fontConfig from \"./assets/fonts/font.config\";\\n' +\n                        'export default {\\n' +\n                        '  baseFont: fontConfig.baseFont,\\n' +\n                        '  fontConfig: fontConfig,' +\n                        content.substring(content.indexOf('{') + 1);\n                fs.writeFileSync(`${osDist}/variables.js`, content);\n                return fontGenPromise;\n            });\n        } else {\n            if (fs.existsSync(`${themeProjectPath}/dist`)) {\n                fs.removeSync(`${themeProjectPath}/dist`)\n            } \n            return this.compile(themeProjectPath, buildDir, 'android')\n                .then(() => this.compile(themeProjectPath, buildDir, 'ios'))\n                .then(() => {\n                    fs.copyFileSync(`${__dirname}/../templates/theme.index.html`, `${buildDir}/dist/index.html`);\n                    const fontConfig = fs.readFileSync(`${buildDir}/dist/android/assets/fonts/font.config.js`, {\n                        encoding: 'utf-8'\n                    });\n                    const baseFont = (fontConfig.match(/baseFont: '(.*)',/) || [])[1];\n                    const fontPath = './android/assets/fonts/' \n                        + (fontConfig.match(new RegExp('name:\\\\s*\\''+baseFont+'\\',[\\\\n\\\\s\\\\t]*path:\\\\s*require\\\\(\\'\\(.*\\)\\'\\\\)')) || [])[1];\n                    return readAndReplaceFileContent(`${buildDir}/dist/index.html`, (content) => {\n                        return content.replace(/\\{\\{headerFontFamily\\}\\}/g, baseFont)\n                            .replace(/\\{\\{headerFontFamilyPath\\}\\}/g, fontPath)\n                            .replace(/\\{\\{labelFontFamily\\}\\}/g, baseFont)\n                            .replace(/\\{\\{labelFontFamilyPath\\}\\}/g, fontPath)\n                    });\n                }).then(() => {\n                    fs.copyFileSync(`${themeProjectPath}/.wmproject.properties`, `${buildDir}/dist/.wmproject.properties`);\n                    return this.takeScreenShots(themeProjectPath);\n                }).then(() => {\n                    fs.copyFileSync(`${themeProjectPath}/theme.png`, `${buildDir}/dist/theme.png`);\n                });\n        }\n    }\n\n    public zipTheme(themeProjectPath: string) {\n        const zipPath = `${themeProjectPath}/dist/theme.zip`;\n        return new Promise<String>((resolve, reject) => {\n            const zip = new AdmZip();\n            zip.addLocalFolder(`${themeProjectPath}/dist`);\n            zip.writeZip(zipPath, (error) => {\n                error ? reject(error) : resolve(zipPath); \n            });\n        });\n    }\n\n    private generateStyle(path: string) {\n        const components = [] as string[];\n        StyleDefinitions.forEach((defs, name) => {\n            const output = COMPONENT_STYLE_LESS_DEF_TEMPLATE({\n                styledefs: defs,\n                path: `components/${name}.less`,\n                basePath: name.split('/').map(c => '../').join('')\n            });\n            writeFile(`${path}/wavemaker/components/${name}.less`, output);\n            components.push(name);\n        });\n        const style = STYLE__TEMPLATE({\n            components: components.map(c => `./components/${c}.less`)\n        });\n        writeFile(`${path}/wavemaker/styles.less`, style);\n    }\n\n    private generateVariables(path: string) {\n        let mVariables = {} as any;\n        Object.keys(variables).forEach(k => {\n            const v = cloneDeep(((variables as any) [k]));\n            if (v && isString(v.md)) {\n                v.md = v.md.replace('--', '@--');\n                v.mdValue = v.mdValue.replace('--', '@--');\n            }\n            mVariables[k] = v;\n        });\n        writeFile(`${path}/wavemaker/variables.less`, VARIABLE__TEMPLATE({variables: mVariables}));\n        mVariables = {} as any;\n        Object.keys(variables).map(k => {\n            const v = ((variables as any) [k]).dValue;\n            if (isString(v)) {\n                mVariables[k] = `\"@{${k}}\"`;\n            } else {\n                mVariables[k] = `@${k}`;\n            }\n        });\n        writeFile(`${path}/wavemaker/variables.js.less`, VARIABLE_JS_LESS__TEMPLATE({variables: mVariables}));\n    }\n\n    generate(themeName: string, path: string, force = false): Promise<void> {\n        const themePath = `${path}/${themeName}`;\n        if (fs.existsSync(themePath)) {\n            return Promise.reject(`${themePath} exists`);\n        }\n        fs.copySync(THEME_TEMPLATE_PATH, themePath, {\n            filter: (src) => !src.endsWith('.template')\n        });\n        this.generateStyle(themePath);\n        this.generateVariables(themePath);\n        writeFile(`${themePath}/.wmproject.properties`, WM_PROPERTIES_TEMPLATE({theme: themeName}));\n        return Promise.resolve();\n    }\n\n    getIconFontScripts(csspath: string) {\n        const cssPathSplits = csspath.split(Path.sep);\n        const fileName = cssPathSplits[cssPathSplits.length - 1].replace('.css', '');\n        cssPathSplits.splice(cssPathSplits.length-1, 1);\n        const dest = cssPathSplits.join(Path.sep);\n        return this.minifyCSS(`${dest}/${fileName}.css`, `${dest}/font-styles.min.css`).then(() => {\n            let rawStyle = fs.readFileSync(`${dest}/font-styles.min.css`, 'utf8');\n            fs.writeFileSync(`${dest}/${fileName}.js`, 'export default ' + this.generateFontReactNativeStyles(rawStyle) + ';');\n            fs.removeSync(`${dest}/font-styles.min.css`);\n        })    \n    }\n}", "wavemaker-rn-codegen/src/theme/variables.ts": "class ColorProp {\n    constructor(public dValue: string | number, public md?: string, public mdValue?: string) {\n        this.mdValue = this.mdValue || this.md;\n    }\n}\nconst variables = new Map<string, ColorProp>();\n\nvariables.set('primaryColor', new ColorProp('#4263eb', '--md-ref-palette-primary40'));\nvariables.set('primaryColor1', new ColorProp('fade(@primaryColor, 80%)', '--md-ref-palette-primary80'));\nvariables.set('primaryColor2', new ColorProp('fade(@primaryColor, 60%)','--md-ref-palette-primary60'));\nvariables.set('primaryColor3', new ColorProp('fade(@primaryColor, 30%)','--md-ref-palette-primary30'));\nvariables.set('primaryContrastColor', new ColorProp('#ffffff', '--md-ref-palette-primary100'));\nvariables.set('secondaryColor', new ColorProp('#6c757d', '--md-ref-palette-secondary80'));\nvariables.set('secondaryContrastColor', new ColorProp('#ffffff', '--md-ref-palette-secondary100'));\nvariables.set('successColor', new ColorProp('#28a745'));\nvariables.set('successContrastColor', new ColorProp('#ffffff'));\nvariables.set('infoColor', new ColorProp('#17a2b8'));\nvariables.set('infoContrastColor', new ColorProp('#ffffff'));\nvariables.set('warningColor', new ColorProp('#ffc107'));\nvariables.set('warningContrastColor', new ColorProp('#ffffff'));\nvariables.set('dangerColor', new ColorProp('#dc3545','--md-ref-palette-error40'));\nvariables.set('dangerContrastColor', new ColorProp('#ffffff','--md-ref-palette-error100'));\nvariables.set('defaultColor', new ColorProp('#000000', '--md-ref-palette-neutral0'));\nvariables.set('defaultColor1', new ColorProp('#111111', '--md-ref-palette-neutral05'));\nvariables.set('defaultColor2', new ColorProp('#222222', '--md-ref-palette-neutral10'));\nvariables.set('defaultColor3', new ColorProp('#333333', '--md-ref-palette-neutral15'));\nvariables.set('defaultColor4', new ColorProp('#444444', '--md-ref-palette-neutral20'));\nvariables.set('defaultColor5', new ColorProp('#555555', '--md-ref-palette-neutral25'));\nvariables.set('defaultColor6', new ColorProp('#666666', '--md-ref-palette-neutral30'));\nvariables.set('defaultColor7', new ColorProp('#777777', '--md-ref-palette-neutral40'));\nvariables.set('defaultColor8', new ColorProp('#888888', '--md-ref-palette-neutral45'));\nvariables.set('defaultColor9', new ColorProp('#999999', '--md-ref-palette-neutral60'));\nvariables.set('defaultColorA', new ColorProp('#aaaaaa'));\nvariables.set('defaultColorB', new ColorProp('#bbbbbb', '--md-ref-palette-neutral80'));\nvariables.set('defaultColorC', new ColorProp('#cccccc', '--md-ref-palette-neutral85'));\nvariables.set('defaultColorD', new ColorProp('#dddddd','--md-ref-palette-neutral90')); \nvariables.set('defaultColorE', new ColorProp('#eeeeee','--md-ref-palette-neutral100')); \nvariables.set('defaultColorF', new ColorProp('#ffffff')); \nvariables.set('defaultBgColor', new ColorProp('@defaultColorF'));\nvariables.set('defaultTextColor', new ColorProp('#151420'));\nvariables.set('lightColor', new ColorProp('@defaultColorF','--md-sys-color-primary-light'));\nvariables.set('darkColor', new ColorProp('@defaultColor','--md-sys-color-primary-dark'));\nvariables.set('muteColor', new ColorProp('@defaultColorA'));\nvariables.set('heading1FontSize', new ColorProp(36, '--md-sys-typescale-headline-large-font-size'));\nvariables.set('heading2FontSize', new ColorProp(30, '--md-sys-typescale-headline-medium-font-size'));\nvariables.set('heading3FontSize', new ColorProp(24, '--md-sys-typescale-headline-small-font-size'));\nvariables.set('heading4FontSize', new ColorProp(18));\nvariables.set('heading5FontSize', new ColorProp(14));\nvariables.set('heading6FontSize', new ColorProp(12));\nvariables.set('transparent', new ColorProp('transparent'));\nvariables.set('badgeColor', new ColorProp('#6c757d','--md-ref-palette-error40'));\nvariables.set('badgeContrastColor', new ColorProp('#ffffff'));\n\n\n//rippleColor\nvariables.set('rippleColor', new ColorProp('fade(@primaryColor, 70%)', '--md-ref-palette-primary40', 'fade(--md-ref-palette-primary40, 70%)'));\n\n// Page\nvariables.set('pageContentBgColor', new ColorProp('@defaultColorE', '--md-ref-palette-neutral80'));\n\n// Common Widget Colors\nvariables.set('widgetHeaderBgColor', new ColorProp('@defaultColorF'));\nvariables.set('widgetHeaderTextColor', new ColorProp('@defaultColor3','--md-ref-palette-neutral-variant30'));\nvariables.set('widgetActiveHeaderBgColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('widgetActiveHeaderTextColor', new ColorProp('@primaryContrastColor','--md-ref-palette-neutral10'));\nvariables.set('widgetBorderColor', new ColorProp('@defaultColorC','--md-ref-palette-neutral-variant90'));\nvariables.set('widgetBgColor', new ColorProp('@defaultColorF'));\n\n//App Navbar\nvariables.set('titleBadgeTextColor', new ColorProp('#151420', '--md-ref-palette-neutral-variant30'));\nvariables.set('titleBadgeBackgroundColor', new ColorProp('fade(@titleBadgeTextColor, 20%)'));\n\n// Navbar variables\nvariables.set('navbarBackgroundColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\nvariables.set('navbarBorderColor', new ColorProp('@widgetBorderColor','--md-ref-palette-neutral-variant50'));\nvariables.set('navbarTextColor', new ColorProp('#151420','--md-ref-palette-neutral-variant30'));\nvariables.set('navbarIconSize', new ColorProp(24));\nvariables.set('navbarFontSize', new ColorProp(24));\nvariables.set('navbarImageSize', new ColorProp(32));\nvariables.set('navbarCaretColor', new ColorProp('@primaryColor','--md-ref-palette-neutral-variant30'));\nvariables.set('navitemChildBackgroundColor', new ColorProp('@primaryContrastColor','--md-ref-palette-neutral98'));\nvariables.set('navitemChildTextColor', new ColorProp('@primaryColor','--md-ref-palette-neutral-variant30'));\nvariables.set('navitemChildIconColor', new ColorProp('@primaryColor','--md-ref-palette-neutral-variant30'));\nvariables.set('navitemActiveBackgroundColor', new ColorProp('@primaryColor', '--md-ref-palette-secondary90'));\nvariables.set('navitemActiveTextColor', new ColorProp('@primaryContrastColor', '--md-ref-palette-secondary10'));\nvariables.set('navitemActiveIconColor', new ColorProp('@navitemActiveTextColor', '--md-ref-palette-secondary10'));\n\n// Anchor variables\nvariables.set('linkDefaultColor', new ColorProp('@defaultTextColor'));\nvariables.set('linkPrimaryColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('linkSecondaryColor', new ColorProp('@secondaryColor', '--md-ref-palette-secondary80'));\nvariables.set('linkSuccessColor', new ColorProp('@successColor'));\nvariables.set('linkInfoColor', new ColorProp('@infoColor'));\nvariables.set('linkWarningColor', new ColorProp('@warningColor'));\nvariables.set('linkDangerColor', new ColorProp('@dangerColor', '--md-ref-palette-error40'));\nvariables.set('linkLightColor', new ColorProp('@lightColor', '--md-sys-color-primary-light'));\nvariables.set('linkDarkColor', new ColorProp('@darkColor', '--md-sys-color-primary-dark'));\nvariables.set('anchorTextPadding', new ColorProp(2));\n\n// Grid Layout variables\nvariables.set('layoutGridBgColor', new ColorProp('@widgetBgColor'));\nvariables.set('layoutGridBorderColor', new ColorProp('@widgetBorderColor'));\nvariables.set('layoutGridStripColor1', new ColorProp('fade(@primaryColor, 10%)'));\nvariables.set('layoutGridHeaderBgColor', new ColorProp('@widgetHeaderBgColor'));\nvariables.set('layoutGridHeaderTextColor', new ColorProp('@widgetHeaderTextColor'));\nvariables.set('layoutGridStripColor2', new ColorProp('@transparent'));\nvariables.set('gridColumnBorderColor', new ColorProp('@widgetBorderColor'));\n\n// Spinner Variables\nvariables.set('spinnerIconColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\n\n// Tabbar variables\nvariables.set('tabbarBackgroundColor', new ColorProp('@primaryContrastColor','--md-ref-palette-neutral98'));\nvariables.set('tabbarTextColor', new ColorProp('@primaryColor', '--md-ref-palette-neutral-variant30'));\nvariables.set('tabbarIconColor', new ColorProp('@primaryColor','--md-ref-palette-neutral-variant30'));\nvariables.set('tabShadowColor', new ColorProp('@defaultColor', '--md-ref-palette-nuetral10'));\nvariables.set('tabActiveBackgroundColor', new ColorProp('@secondaryColor', '--md-ref-palette-secondary90'));\nvariables.set('tabActiveIconColor', new ColorProp('@secondaryColor','--md-ref-palette-secondary10'));\nvariables.set('tabLabelTextColor', new ColorProp('@primaryColor', '--md-ref-palette-neutral-variant30'));\nvariables.set('centerHubItemColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('centerHubIconColor', new ColorProp('@defaultColorF', '--md-ref-palette-neutral100'));\nvariables.set('centerHubLabelColor', new ColorProp('@defaultColorF', '--md-ref-palette-neutral100'));\n\n// Tab variables\nvariables.set('tabHeaderBgColor', new ColorProp('@widgetBgColor','--md-ref-palette-neutral98')); \nvariables.set('tabHeaderTextColor', new ColorProp('@defaultColorA', '--md-ref-palette-neutral-variant30'));\nvariables.set('tabHeaderIconColor', new ColorProp('@defaultColorA', '--md-ref-palette-neutral-variant30'));\nvariables.set('tabActiveHeaderBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98')); \nvariables.set('tabActiveHeaderTextColor', new ColorProp('@primaryColor', '--md-ref-palette-neutral10'));\nvariables.set('tabActiveIndicatorBgColor', new ColorProp('@primaryColor'));\nvariables.set('tabActiveHeaderIconColor', new ColorProp('@primaryColor','--md-ref-palette-neutral10'));\nvariables.set('tabBorderColor', new ColorProp('@widgetBorderColor','--md-ref-palette-neutral-variant90'));\nvariables.set('tabContentBgColor', new ColorProp('@widgetBgColor'));\nvariables.set('tabArrowIndicatorBgColor', new ColorProp('@tabContentBgColor','--md-ref-palette-primary40'));\nvariables.set('tabArrowIndicatorDotColor', new ColorProp('@primaryColor'));\n\n// Label Variables\nvariables.set('labelHeaderColor', new ColorProp('#151420'));\nvariables.set('labelDefaultColor', new ColorProp('@defaultColor8'));\nvariables.set('labelDefaultContrastColor', new ColorProp('@defaultColorF'));\nvariables.set('labelDangerColor', new ColorProp('@dangerColor', '--md-ref-palette-error40'));\nvariables.set('labelDangerContrastColor', new ColorProp('@dangerContrastColor', '--md-ref-palette-error100'));\nvariables.set('labelInfoColor', new ColorProp('@infoColor'));\nvariables.set('labelInfoContrastColor', new ColorProp('@infoContrastColor'));\nvariables.set('labelPrimaryColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('labelPrimaryContrastColor', new ColorProp('@primaryContrastColor', '--md-sys-color-surface-light'));\nvariables.set('labelSuccessColor', new ColorProp('@successColor'));\nvariables.set('labelSuccessContrastColor', new ColorProp('@successContrastColor'));\nvariables.set('labelWarningColor', new ColorProp('@warningColor'));\nvariables.set('labelWarningContrastColor', new ColorProp('@warningContrastColor'));\nvariables.set('labelTextSuccessColor', new ColorProp('@successColor'));\nvariables.set('labelTextDangerColor', new ColorProp('@dangerColor','-md-ref-palette-error40'));\nvariables.set('labelTextInfoColor', new ColorProp('@infoColor'));\nvariables.set('labelTextMutedColor', new ColorProp('@muteColor'));\nvariables.set('labelTextPrimaryColor', new ColorProp('@primaryColor','--md-ref-palette-primary40'));\nvariables.set('labelTextWarningColor', new ColorProp('@warningColor'));\nvariables.set('labelAsteriskColor', new ColorProp('@dangerColor'));\n\n// List\nvariables.set('listHeaderBgColor', new ColorProp('@widgetHeaderBgColor','--md-ref-palette-neutral98'));\nvariables.set('listTitleColor', new ColorProp('@widgetHeaderTextColor','--md-ref-palette-neutral10'));\nvariables.set('listSubTitleColor', new ColorProp('@defaultColor6', '--md-ref-palette-neutral-variant30'));\nvariables.set('listDividerColor', new ColorProp('@widgetBorderColor'));\nvariables.set('itemBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\nvariables.set('selectedItemBorderColor', new ColorProp('@primaryColor','--md-ref-palette-primary40'));\n\n// Button Variables\nvariables.set('buttonBorderColor', new ColorProp('@widgetBorderColor','--md-ref-palette-neutral-variant50')); \nvariables.set('buttonBadgeBackgroundColor', new ColorProp('@badgeColor'));  \nvariables.set('buttonBadgeTextColor', new ColorProp('@badgeContrastColor'));\nvariables.set('buttonTextPadding', new ColorProp('2px'));\nvariables.set('buttonSuccessColor', new ColorProp('@successColor'));\nvariables.set('buttonDefaultColor', new ColorProp('@defaultColorF'));\nvariables.set('buttonPrimaryColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('buttonSecondaryColor', new ColorProp('@defaultColorF', '--md-ref-palette-secondary90'));\nvariables.set('buttonDangerColor', new ColorProp('@dangerColor'));\nvariables.set('buttonWarningColor', new ColorProp('@warningColor'));\nvariables.set('buttonInfoColor', new ColorProp('@infoColor'));\nvariables.set('buttonSuccessTextColor', new ColorProp('@successContrastColor'));\nvariables.set('buttonDefaultTextColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('buttonPrimaryTextColor', new ColorProp('@primaryContrastColor', '--md-ref-palette-primary100'));  \nvariables.set('buttonSecondaryTextColor', new ColorProp('@secondaryColor', '--md-ref-palette-secondary10'));\nvariables.set('buttonDangerTextColor', new ColorProp('@dangerContrastColor'));\nvariables.set('buttonWarningTextColor', new ColorProp('@warningContrastColor'));\nvariables.set('buttonInfoTextColor', new ColorProp('@infoContrastColor'));\nvariables.set('buttonLinkColor', new ColorProp('transparent'));\nvariables.set('buttonLinkTextColor', new ColorProp('@primaryColor','--md-ref-palette-primary40'));\nvariables.set('buttonDarkColor', new ColorProp('@darkColor'));\nvariables.set('buttonDarkTextColor', new ColorProp('@lightColor'));\nvariables.set('buttonLightColor', new ColorProp('@lightColor'));\nvariables.set('buttonLightTextColor', new ColorProp('@darkColor'));\nvariables.set('buttonGrpBorderColor', new ColorProp('@widgetBorderColor','--md-ref-palette-neutral-variant50'));\nvariables.set('buttonGrpBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\n\n// Picture Variables\nvariables.set('pictureThumbBgColor', new ColorProp('@defaultColorF'));\nvariables.set('pictureThumbBorderColor', new ColorProp('@defaultColorD'));\n\n// Input Variables\nvariables.set('inputTextColor', new ColorProp('@defaultTextColor'));\nvariables.set('inputBorderColor', new ColorProp('@defaultColorD'));\nvariables.set('inputBackgroundColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\nvariables.set('inputFocusBorderColor', new ColorProp('@primaryColor'));\nvariables.set('inputInvalidBorderColor', new ColorProp('@dangerColor'));\nvariables.set('inputPlaceholderColor', new ColorProp('@defaultColorB','--md-ref-palette-neutral10'));\n\n// Wheel Picker Variables\nvariables.set('wheelSelectedColor', new ColorProp('#1d1d1b'))\nvariables.set('wheelColor', new ColorProp('#737373'))\n\n//floating label\nvariables.set('floatingLabelColor', new ColorProp('@inputPlaceholderColor'));\nvariables.set('activeFloatingLabelColor', new ColorProp('@primaryColor'));\n\n// Slider Variables\nvariables.set('minimumTrackTintColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('maximumTrackTintColor', new ColorProp('@widgetHeaderBgColor', '--md-ref-palette-neutral90'));\nvariables.set('thumbTintColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\n\n// Rating Color\nvariables.set('ratingIconColor', new ColorProp('@defaultColorA'));\nvariables.set('ratingSelectedIconColor', new ColorProp('#eb8600'));\n\n// Toggle Variables\nvariables.set('toggleOnColor', new ColorProp('fade(@primaryColor, 40%)','--md-ref-palette-primary40'));\nvariables.set('toggleOffColor', new ColorProp('@defaultColorB', '--md-ref-palette-neutral90'));\nvariables.set('toggleHandleColor', new ColorProp('@primaryColor', '--md-ref-palette-primary100'));\nvariables.set('toggleHandleDisableColor', new ColorProp('@defaultColorA', '--md-ref-palette-neutral50'));\nvariables.set('toggleOffBorderColor', new ColorProp('@defaultColorB', '--md-ref-palette-neutral-variant50'));\n\n// Radioset and Checkboxset Variables\nvariables.set('groupHeadingBgColor', new ColorProp('@transparent'));\nvariables.set('checkedColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('checkedDisabledColor', new ColorProp('@defaultColorA','--md-ref-palette-neutral-variant30'));\nvariables.set('checkedEnabledColor', new ColorProp('@defaultColorF'));\nvariables.set('checkboxBorderColor', new ColorProp('@defaultColor9'));\nvariables.set('checkedBgColor', new ColorProp('@checkedColor'));\nvariables.set('uncheckedBgColor', new ColorProp('@transparent'));\nvariables.set('checkedIconColor', new ColorProp('@defaultColorF'));\nvariables.set('checkedBorderColor', new ColorProp('@primaryColor'));\nvariables.set('uncheckedBorderColor', new ColorProp('@defaultColor9'));\n\n// Form\nvariables.set('formBorderColor', new ColorProp('@widgetBorderColor'));\nvariables.set('formTitleColor', new ColorProp('@defaultTextColor'));\nvariables.set('formSubTitleColor', new ColorProp('@defaultColor6'));\n\n// Dialog\nvariables.set('dialogBackgroundColor', new ColorProp('@widgetBgColor','--md-ref-palette-neutral90'));\nvariables.set('dialogBorderColor', new ColorProp('@widgetBorderColor', '--md-sys-color-outline-variant-light'));\nvariables.set('dialogCloseIconColor', new ColorProp('@defaultColorA','--md-ref-palette-neutral10'));\nvariables.set('dialogLabelColor', new ColorProp('@defaultColor3', '--md-ref-palette-neutral10'));\nvariables.set('dialogIconColor', new ColorProp('@defaultColor4', '--md-ref-palette-neutral-variant30'));\nvariables.set('dialogSupportingTextColor', new ColorProp('@defaultColor1', '--md-ref-palette-neutral-variant30'));\n\n\n// Alert Dialog\nvariables.set('alertMessageColor', new ColorProp('@defaultColor8'));\n\n// Badge Text Color\nvariables.set('badgeTextColor', new ColorProp('@defaultColorF'));\n\n// Popover\nvariables.set('popoverBackgroundColor', new ColorProp('@defaultColorF'));\nvariables.set('popoverTitleBackgroundColor', new ColorProp('@defaultColorD'));\nvariables.set('popoverTitleColor', new ColorProp('@defaultColor1'));\n\n// Menu\nvariables.set('menuIconColor', new ColorProp('@defaultColor6', '--md-ref-palette-neutral-variant30'));\nvariables.set('menuTextColor', new ColorProp('@defaultColor6',  '--md-ref-palette-neutral10'));\nvariables.set('menuBackgroundColor', new ColorProp('@popoverBackgroundColor', '--md-ref-palette-neutral98'));\nvariables.set('menuItemBorderColor', new ColorProp('@widgetBorderColor', '--md-ref-palette-neutral-variant90'));\nvariables.set('menuItemIconColor', new ColorProp('@defaultColor6',  '--md-ref-palette-neutral-variant30'));\nvariables.set('menuItemTextColor', new ColorProp('@defaultColor6', '--md-ref-palette-neutral10'));\n\n// Tile Variables\nvariables.set('tileDangerColor', new ColorProp('@dangerColor'));\nvariables.set('tileInfoColor', new ColorProp('@infoColor'));\nvariables.set('tilePrimaryColor', new ColorProp('@primaryColor'));\nvariables.set('tileSuccessColor', new ColorProp('@successColor'));\nvariables.set('tileWarningColor', new ColorProp('@warningColor'));\nvariables.set('tileWellbgColor', new ColorProp('@defaultColorF'));\nvariables.set('tileWellBorderColor', new ColorProp('@defaultColorE'));\nvariables.set('tilePrimaryTextColor', new ColorProp('@primaryContrastColor'));\n\n// Switch\nvariables.set('switchBgColor', new ColorProp('@widgetBgColor'));\nvariables.set('switchTextColor', new ColorProp('@defaultTextColor','--md-ref-palette-neutral10'));\nvariables.set('switchActiveBgColor', new ColorProp('@primaryColor','--md-ref-palette-secondary90'));\nvariables.set('switchActiveTextColor', new ColorProp('@primaryContrastColor', '--md-ref-palette-secondary10'));\nvariables.set('switchBorderColor', new ColorProp('@widgetBorderColor','--md-ref-palette-neutral-variant50'));\n\n// Message\nvariables.set('messageSuccessColor', new ColorProp('@successColor'));\nvariables.set('messageErrorColor', new ColorProp('@dangerColor'));\nvariables.set('messageWarningColor', new ColorProp('@warningColor'));\nvariables.set('messageInfoColor', new ColorProp('@infoColor'));\nvariables.set('messageLoadingColor', new ColorProp('@infoColor'));\n\n// Panel\nvariables.set('panelBgColor', new ColorProp('@widgetBgColor','--md-ref-palette-neutral98'));\nvariables.set('panelHeaderBgColor', new ColorProp('@widgetHeaderBgColor','--md-ref-palette-secondary90'));\nvariables.set('panelHeaderTextColor', new ColorProp('@widgetHeaderTextColor'));\nvariables.set('panelFooterColor', new ColorProp('@defaultColorD','--md-ref-palette-secondary90'));\nvariables.set('panelBorderColor', new ColorProp('@widgetBorderColor'));\nvariables.set('panelDangerColor', new ColorProp('@dangerColor'));\nvariables.set('panelDefaultColor', new ColorProp('@defaultColor'));\nvariables.set('panelInfoColor', new ColorProp('@infoColor'));\nvariables.set('panelPrimaryColor', new ColorProp('@primaryColor'));\nvariables.set('panelSuccessColor', new ColorProp('@successColor'));\nvariables.set('panelWarningColor', new ColorProp('@warningColor'));\nvariables.set('panelTextColor', new ColorProp('@defaultColorF'));\n\n// Card\nvariables.set('cardHeaderBgColor', new ColorProp('@defaultColorD','--md-ref-palette-neutral98'));\nvariables.set('cardBgColor', new ColorProp('@widgetBgColor','--md-ref-palette-neutral98'));\nvariables.set('cardTitleColor', new ColorProp('@listTitleColor','--md-ref-palette-neutral10'));\nvariables.set('cardShadowColor', new ColorProp('@defaultColor','--md-ref-palette-neutral40'));\nvariables.set('cardSubTitleColor', new ColorProp('@listSubTitleColor','--md-ref-palette-neutral-variant30'));\nvariables.set('cardBorderColor', new ColorProp('@defaultColorD'));\nvariables.set('cardContentBgColor', new ColorProp('@defaultColorF'));\nvariables.set('cardFooterBgColor', new ColorProp('@defaultColorF'));\nvariables.set('cardFooterBorderColor', new ColorProp('@defaultColorD'));\n\n// Progress Bar\nvariables.set('progressBarDefaultColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('progressBarSuccessColor', new ColorProp('@successColor'));\nvariables.set('progressBarDangerColor', new ColorProp('@dangerColor', '--md-ref-palette-error40'));\nvariables.set('progressBarInfoColor', new ColorProp('@infoColor'));\nvariables.set('progressBarWarningColor', new ColorProp('@warningColor'));\nvariables.set('progressBarTrackColor', new ColorProp('@defaultColorD','--md-ref-palette-neutral90'));\n\n\n// Progress Circle\nvariables.set('progressCircleDefaultColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('progressCircleSuccessColor', new ColorProp('@successColor'));\nvariables.set('progressCircleDangerColor', new ColorProp('@dangerColor', '--md-ref-palette-error40'));\nvariables.set('progressCircleInfoColor', new ColorProp('@infoColor'));\nvariables.set('progressCircleWarningColor', new ColorProp('@warningColor'));\n\n// Container\nvariables.set('containerOutlineColor', new ColorProp('@defaultColorC'));\n\n// Accordion\nvariables.set('accordionBgColor', new ColorProp('@widgetBgColor','--md-ref-palette-neutral98'));\nvariables.set('accordionTitleColor', new ColorProp('@widgetHeaderTextColor','--md-ref-palette-neutral-variant30'));\nvariables.set('accordionHeaderBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\nvariables.set('accordionIconColor', new ColorProp('@defaultColorB','--md-ref-palette-neutral-variant30'));\nvariables.set('accordionActiveIconColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral10'));\nvariables.set('accordionActiveHeaderBgColor', new ColorProp('@widgetActiveHeaderBgColor','--md-ref-palette-neutral98'));\nvariables.set('accordionActiveHeaderTextColor', new ColorProp('@widgetActiveHeaderTextColor','--md-ref-palette-neutral10'));\nvariables.set('accordionBorderColor', new ColorProp('@defaultColorE','--md-ref-palette-neutral-variant90'));\nvariables.set('accordionPaneBgColor', new ColorProp('@defaultColorF'));\n\n// Carousel\nvariables.set('carouselPrevBtnColor', new ColorProp('@defaultColorF'));\nvariables.set('carouselPrevBgColor', new ColorProp('fade(@defaultColorF, 40%)'));\nvariables.set('carouselNextBtnColor', new ColorProp('@defaultColorF', ''));\nvariables.set('carouselNextBgColor', new ColorProp('fade(@defaultColorF, 40%)'));\nvariables.set('carouselDotWrapperBgColor', new ColorProp('@transparent'));\nvariables.set('carouselDotColor', new ColorProp('@defaultColorF'));\nvariables.set('carouselActiveDotColor', new ColorProp('@defaultColorF'));\n\n// Calendar\nvariables.set('calendarBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral90'));\nvariables.set('calendarHeaderBgColor', new ColorProp('@defaultColorF', '--md-ref-palette-neutral90'));\nvariables.set('calendarHeaderTextColor', new ColorProp('@defaultTextColor'));\nvariables.set('calendarWeekDayTextColor', new ColorProp('@defaultColorA','--md-ref-palette-neutral10'));\nvariables.set('calendarDateColor', new ColorProp('@defaultColor','--md-ref-palette-neutral10'));\nvariables.set('calendarNotCurrentMonthDateColor', new ColorProp('@defaultColor6','--md-ref-palette-neutral-variant30'));\nvariables.set('calendarHeaderColor', new ColorProp('@defaultColorF'));\nvariables.set('calendarPrevYearIconColor', new ColorProp('@defaultColorA'));\nvariables.set('calendarNextYearIconColor', new ColorProp('@defaultColorA'));\nvariables.set('calendarPrevMonthIconColor', new ColorProp('@defaultColorA', '--md-ref-palette-neutral-variant30'));\nvariables.set('calendarNextMonthIconColor', new ColorProp('@defaultColorA', '--md-ref-palette-neutral-variant30'));\nvariables.set('calendarDayBgColor', new ColorProp('@defaultColor'));\nvariables.set('calendarSelectedDayBgColor', new ColorProp('@primaryColor', '--md-ref-palette-primary40'));\nvariables.set('calendarSelectedDayTextColor', new ColorProp('@defaultColorF','--md-ref-palette-primary100'));\nvariables.set('calendarTodayBgColor', new ColorProp('@defaultColorF'));\nvariables.set('calendarEventDay1Color', new ColorProp('@primaryColor1'));\nvariables.set('calendarEventDay2Color', new ColorProp('@primaryColor2'));\nvariables.set('calendarEventDay3Color', new ColorProp('@primaryColor3'));\n\n// Date Picker\nvariables.set('datepickerBgColor', new ColorProp('@defaultColorF'));\n\n// Wizard\nvariables.set('wizardBackgroundColor', new ColorProp('@widgetBgColor'));\nvariables.set('wizardStepActiveColor', new ColorProp('@primaryColor','--md-ref-palette-secondary90'));\nvariables.set('wizardStepDoneColor', new ColorProp('@successColor','--md-ref-palette-secondary90'));\nvariables.set('wizardStepIconColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral10'));\nvariables.set('wizardStepColor', new ColorProp('@defaultColor9','--md-ref-palette-neutral-variant30'));\nvariables.set('wizardActiveStepColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral10'));\nvariables.set('wizardDoneStepColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral-variant30'));\nvariables.set('wizardStepTitleColor', new ColorProp('@defaultColorA','--md-ref-palette-neutral-variant30'));\nvariables.set('wizardNextBtnColor', new ColorProp('@primaryColor','--md-ref-palette-secondary90'));\nvariables.set('wizardDoneBtnColor', new ColorProp('@successColor','--md-ref-palette-secondary90'));\nvariables.set('wizardStepConnectorColor', new ColorProp('@defaultColorE'));\nvariables.set('wizardStepCounerColor', new ColorProp('@defaultColor9'));\nvariables.set('wizardBorderColor', new ColorProp('@widgetBorderColor'));\n\n// Search\nvariables.set('searchBorderColor', new ColorProp('@defaultColorD'));\nvariables.set('searchButtonColor', new ColorProp('@primaryColor'));\nvariables.set('searchButtonTextColor', new ColorProp('@primaryContrastColor'));\nvariables.set('searchItemBorderColor', new ColorProp('@defaultColorD'));\nvariables.set('searchItemTextColor', new ColorProp('@defaultColor6'));\nvariables.set('searchDropdownBackgroundColor', new ColorProp('@defaultColorF'));\nvariables.set('searchDataCompleteItemBgColor', new ColorProp('@defaultColorE'));\nvariables.set('searchBgContainerColor', new ColorProp('@defaultColorD','--md-ref-palette-neutral98'));\n\n// Chip\nvariables.set('chipIconColor', new ColorProp('@primaryColor','--md-ref-palette-secondary10'));\nvariables.set('chipActiveTextColor', new ColorProp('@defaultColorF', '--md-ref-palette-secondary10'));  \nvariables.set('chipDefaultTextColor', new ColorProp('@defaultColorA','--md-ref-palette-neutral-variant30'));  \nvariables.set('chipborderColor', new ColorProp('@defaultColorD','--md-ref-palette-neutral-variant50'));  \nvariables.set('chipSelectedContainerColor', new ColorProp('@primaryColor','--md-ref-palette-secondary90'));  \nvariables.set('chipContainerColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral90'));   \nvariables.set('chipSelectedOutlineColor', new ColorProp('@defaultColor6','--md-ref-palette-secondary90'));   \n\n// Login\nvariables.set('loginErrorMsgColor', new ColorProp('@dangerContrastColor'));\nvariables.set('loginErrorMsgBgColor', new ColorProp('@dangerColor'));\nvariables.set('loginErrorMsgBorderColor', new ColorProp('@dangerColor'));\n\n// Camera\nvariables.set('cameraBgColor', new ColorProp('@defaultColorF', '--md-ref-palette-neutral98'));\nvariables.set('cameraBorderColor', new ColorProp('@widgetBorderColor'));\nvariables.set('cameraTextColor', new ColorProp('@defaultTextColor', '--md-ref-palette-neutral10'));\n\n// Barcode Scanner\nvariables.set('barcodeScannerBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\nvariables.set('barcodeScannerBorderColor', new ColorProp('@widgetBorderColor'));\nvariables.set('barcodeScannerTextColor', new ColorProp('@defaultTextColor', '--md-ref-palette-neutral10'));\n\n// File Upload\nvariables.set('fileuploadBgColor', new ColorProp('@defaultColorF','--md-ref-palette-neutral98'));\nvariables.set('fileuploadBorderColor', new ColorProp('@widgetBorderColor'));\nvariables.set('fileuploadTextColor', new ColorProp('@defaultTextColor'));\n\n// Charts\nvariables.set('chartLabelColor', new ColorProp('@defaultTextColor'));\nvariables.set('chartGraphLinesColor', new ColorProp('@defaultColorC'));\nvariables.set('chartLineColor', new ColorProp('@defaultColor8'));\nvariables.set('chartLegendBorder', new ColorProp('@defaultColor7',));\nvariables.set('chartAxisColor', new ColorProp('@defaultColor5'));\nvariables.set('chartAxisPointColor', new ColorProp('@defaultColor9'));\nvariables.set('chartTitleColor', new ColorProp('@widgetHeaderTextColor'));\nvariables.set('chartSubTitleColor', new ColorProp('@defaultColor6'));\n\n// Network Toast\nvariables.set('networkToastBgColor', new ColorProp('@defaultColor3'));\nvariables.set('networkToastTextColor', new ColorProp('@defaultColorF'));\nvariables.set('networkToastActionTextColor', new ColorProp('@primaryColor'));\nvariables.set('networkToastActionSeparatorColor', new ColorProp('@networkToastTextColor'));\n\n// Skeleton\nvariables.set('skeletonBgColor', new ColorProp('@defaultColorE'));\nvariables.set('skeletonAnimatedBgColor', new ColorProp('@defaultColorE'));\nvariables.set('skeletonGradientBgColor', new ColorProp('@defaultColorF'));\nvariables.set('skeletonGradientShadowColor', new ColorProp('@defaultColorF'));\nvariables.set('skeletonGradientForegroundColor', new ColorProp('transparent'));\nvariables.set('skeletonBackgroundColor', new ColorProp('#F4F5F8'));\n\n// Audio\nvariables.set('audioPlayerBgColor', new ColorProp('@defaultColorF'));\nvariables.set('audioPlayerFgColor', new ColorProp('@defaultColor3'));\n\n//Tool tip\nvariables.set('tooltipBgColor', new ColorProp('fade(#fff, 40%)'));\nvariables.set('tooltipBorderColor', new ColorProp('#404040'));\n\n\nconst result = {} as any;\nvariables.forEach((v,k)=>{\n    result[k] = variables.get(k);\n})\nexport default result;\n", "wavemaker-rn-codegen/src/theme/runtime-styles.generator.ts": "export class RuntimeStyleGenerator {\n\n}", "wavemaker-rn-codegen/src/theme/rn-stylesheet.transpiler.ts": "import * as csstree from 'css-tree';\nimport { assignIn, clone, extend, get, set, isString } from 'lodash';\nimport transformCSSToReactNative from 'css-to-react-native-transform';\nimport { getRNSelector, getStudioSelector } from './components/style-definition.provider';\n\ninterface Rule {\n    selectors: string[][];\n    body: string;\n}\n\nconst DESIGN_STYLE_PREFIX = '.wm-studio .wm-right-panel-container .file-container-pane .wm-file-container .wm-workspace .workspace-content .canvas-panel ';\n\nexport class RnStylesheetTranspiler {\n\n    getRules(rnstylesheet: string) {\n        const ast = csstree.parse(rnstylesheet);\n        const rules = [] as Rule[];\n        let currentRule: Rule = null as any;\n        let currentSelector: string[] = null as any;\n        csstree.walk(ast, {\n            enter(node: csstree.CssNode) {\n                if (node.type === 'Rule') {\n                    currentRule = {\n                        selectors: [],\n                        body: ''\n                    };\n                    rules.push(currentRule);\n                } else if (node.type === 'Selector') {\n                    currentSelector = [];\n                    currentRule.selectors.push(currentSelector);\n                } else if (node.type === 'ClassSelector') {\n                    currentSelector.push('.' + node.name);\n                }  else if (node.type === 'PseudoClassSelector' && node.name === 'theme-variables') {\n                    currentSelector.push(':theme-variables');\n                } else if (node.type === 'Block') {\n                    currentRule.body = csstree.generate(node);\n                    if (!/\\{[\\s]*\\}/.test(currentRule.body) \n                        && !currentRule.body.endsWith(';}')) {\n                        currentRule.body = currentRule.body.replace('}', ';}');\n                    }\n                }\n            }\n        });\n        return rules;\n    }\n\n    toDesignStyles(rnstylesheet: string) {\n        const rules = this.getRules(rnstylesheet);\n        const designStyles = rules.map(r => {\n            return r.selectors.map(s => {\n                return `${DESIGN_STYLE_PREFIX} ${getStudioSelector(s.join(''))}`;\n            }).join(',') + r.body; \n        }).join(' ');\n        return designStyles;\n    }\n\n    toReactNativeStyles(rnstylesheet: string) {\n        const rules = this.getRules(rnstylesheet);\n        const reactStyles = {} as any;\n        rules.forEach(r => {\n            let rBody = r.body.replace(/:\\s*var\\(\\s*--/g, '_var:var(--');\n            rBody = rBody.replace(\"box-shadow\", \"parsedBoxShadow\")\n            const newStyles: any = transformCSSToReactNative(`.style${rBody}`).style;\n            Object.keys(newStyles).forEach(k => {\n                if (isString(k) && k.endsWith('Var')) {\n                    newStyles[k.replace('Var', '')] = newStyles[k];\n                    delete newStyles[k];\n                }\n                if (isString(k) && k.endsWith('_var')) {\n                    newStyles[k.replace('_var', '')] = newStyles[k];\n                    delete newStyles[k];\n                }\n                if (isString(k) && k === \"parsedBoxShadow\") {\n                    newStyles[\"boxShadow\"] = newStyles[k];\n                    delete newStyles[k];\n                }\n            });\n            r.selectors.map(s => {\n                const _newStyles = clone(newStyles);\n                const cssClass = s.join('');\n                const reactStyleName = getRNSelector(cssClass);\n                if (reactStyleName) {\n                    const oldStyles = get(reactStyles, reactStyleName);\n                    set(reactStyles, reactStyleName, oldStyles ? extend(oldStyles, _newStyles) : _newStyles);\n                } else {\n                    reactStyles[cssClass] = _newStyles;\n                }\n            });\n        });\n        Object.keys(reactStyles).forEach(k => {\n            const stylename = Object.keys(reactStyles[k])[0];\n            if (stylename && stylename.startsWith('app-')) {\n                reactStyles[k] = reactStyles[k][stylename];\n            }\n            const styles = reactStyles[k];\n            const childStyles = styles && styles['__child'];\n            if (childStyles) {\n                delete styles['__child'];\n                assignIn(styles, childStyles);\n            }\n        });\n        return reactStyles;\n    }\n\n}", "wavemaker-rn-codegen/src/theme/studio-css.generator.ts": "export class StudioThemeGenerator {\n    \n}", "wavemaker-rn-codegen/src/theme/components/prefab.styledef.ts": "import { ComponentStyle, StyleDefinition } from './base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-prefab',\n        rnStyleSelector: 'app-prefab.root',\n        studioStyleSelector: '.app-prefab',\n        style: {}\n    }, {\n        className: '.app-prefab-skeleton',\n        rnStyleSelector: 'app-prefab.skeleton',\n        studioStyleSelector: '.app-prefab-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container.styledef.ts": "import { ComponentStyle, StyleDefinition } from './base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-container',\n        rnStyleSelector: 'app-container.root',\n        studioStyleSelector: '.app-container',\n        style: {}\n    }, {\n        className: '.app-container-content',\n        rnStyleSelector: 'app-container.content',\n        studioStyleSelector: '.app-container',\n        style: {}\n    }, {\n        className: '.media-body.app-container',\n        style: {}\n    }, {\n        className: '.media-right.app-container',\n        style: {}\n    }, {\n        className: '.app-elevated-container.app-container',\n        style: {}\n    }, {\n        className: '.app-outlined-container.app-container',\n        style: {}\n    }, {\n        className: \".app-container-skeleton\",\n        rnStyleSelector: \"app-container.skeleton\",\n        studioStyleSelector: '.app-container-skeleton',\n        style: {}\n    }, {\n        className: '.app-container-sticky',\n        rnStyleSelector: 'app-container.sticky',\n        studioStyleSelector: '.app-container-sticky',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page.styledef.ts": "import { ComponentStyle, StyleDefinition } from './base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-page',\n        rnStyleSelector: 'app-page.root',\n        studioStyleSelector: '.app-page',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/style-definition.provider.ts": "import fs from 'fs-extra';\n\nimport { readdir } from '../../utils';\nimport { StyleDefinition } from './base-style-definition';\nimport CarouselcontentStyleDef from './advanced/carousel/carousel-content.styledef';\nimport CarouseltemplateStyleDef from './advanced/carousel/carousel-template.styledef';\nimport CarouselStyleDef from './advanced/carousel.styledef';\nimport LoginStyleDef from './advanced/login.styledef';\nimport WebviewStyleDef from './advanced/webview.styledef';\nimport AnchorStyleDef from './basic/anchor.styledef';\nimport ButtonStyleDef from './basic/button.styledef';\nimport ButtongroupStyleDef from './basic/buttongroup.styledef';\nimport IconStyleDef from './basic/icon.styledef';\nimport LabelStyleDef from './basic/label.styledef';\nimport MessageStyleDef from './basic/message.styledef'\nimport ModalStyleDef from './basic/modal.styledef';\nimport PictureStyleDef from './basic/picture.styledef';\nimport ProgressbarStyleDef from './basic/progress-bar.styledef';\nimport ProgresscircleStyleDef from './basic/progress-circle.styledef';\nimport SearchStyleDef from './basic/search.styledef';\nimport SpinnerStyleDef from './basic/spinner.styledef';\nimport AccordionpaneStyleDef from './container/accordion/accordionpane.styledef';\nimport AccordionStyleDef from './container/accordion.styledef';\nimport GridcolumnStyleDef from './container/layoutgrid/gridcolumn.styledef';\nimport GridrowStyleDef from './container/layoutgrid/gridrow.styledef';\nimport LayoutgridStyleDef from './container/layoutgrid.styledef';\nimport LinearlayoutitemStyleDef from './container/linearlayout/linearlayoutitem.styledef';\nimport LinearlayoutStyleDef from './container/linearlayout.styledef';\nimport PanelcontentStyleDef from './container/panel/panel-content.styledef';\nimport PanelfooterStyleDef from './container/panel/panel-footer.styledef';\nimport PanelStyleDef from './container/panel.styledef';\nimport TabpaneStyleDef from './container/tabs/tabpane.styledef';\nimport TabsStyleDef from './container/tabs.styledef';\nimport TileStyleDef from './container/tile.styledef';\nimport WizardstepStyleDef from './container/wizard/wizardstep.styledef';\nimport WizardStyleDef from './container/wizard.styledef';\nimport ContainerStyleDef from './container.styledef';\nimport CardcontentStyleDef from './data/card/card-content.styledef';\nimport CardfooterStyleDef from './data/card/card-footer.styledef';\nimport CardStyleDef from './data/card.styledef';\nimport FormbodyStyleDef from './data/form/form-body.styledef';\nimport FormfieldStyleDef from './data/form/form-field.styledef';\nimport FormfooterStyleDef from './data/form/form-footer.styledef';\nimport FormStyleDef from './data/form.styledef';\nimport ListtemplateStyleDef from './data/list/list-template.styledef';\nimport ListStyleDef from './data/list.styledef';\nimport BarcodescannerStyleDef from './device/barcodescanner.styledef';\nimport CameraStyleDef from './device/camera.styledef';\nimport AlertdialogStyleDef from './dialogs/alertdialog.styledef';\nimport ConfirmdialogStyleDef from './dialogs/confirmdialog.styledef';\nimport DialogStyleDef from './dialogs/dialog.styledef';\nimport DialogactionsStyleDef from './dialogs/dialogactions.styledef';\nimport DialogcontentStyleDef from './dialogs/dialogcontent.styledef';\nimport BasedatasetStyleDef from './input/basedataset.styledef';\nimport BaseinputStyleDef from './input/baseinput.styledef';\nimport BasenumberStyleDef from './input/basenumber.styledef';\nimport ViewsStyleDef from './input/calendar/views.styledef';\nimport CalendarStyleDef from './input/calendar.styledef';\nimport CheckboxStyleDef from './input/checkbox.styledef';\nimport CheckboxsetStyleDef from './input/checkboxset.styledef';\nimport ChipsStyleDef from './input/chips.styledef';\nimport CompositeStyleDef from './input/composite.styledef';\nimport CurrencyStyleDef from './input/currency.styledef';\nimport DateStyleDef from './input/epoch/date.styledef';\nimport DatetimeStyleDef from './input/epoch/datetime.styledef';\nimport TimeStyleDef from './input/epoch/time.styledef';\nimport NumberStyleDef from './input/number.styledef';\nimport RadiosetStyleDef from './input/radioset.styledef';\nimport RatingStyleDef from './input/rating.styledef';\nimport SelectStyleDef from './input/select.styledef';\nimport SliderStyleDef from './input/slider.styledef';\nimport SwitchStyleDef from './input/switch.styledef';\nimport TextStyleDef from './input/text.styledef';\nimport TextareaStyleDef from './input/textarea.styledef';\nimport ToggleStyleDef from './input/toggle.styledef';\nimport FileuploadStyleDef from './input/fileupload.styledef';\nimport AppnavbarStyleDef from './navigation/appnavbar.styledef';\nimport BasenavStyleDef from './navigation/basenav.styledef';\nimport MenuStyleDef from './navigation/menu.styledef';\nimport NavbarStyleDef from './navigation/navbar.styledef';\nimport NavitemStyleDef from './navigation/navitem.styledef';\nimport PopoverStyleDef from './navigation/popover.styledef';\nimport ContentStyleDef from './page/content.styledef';\nimport LeftpanelStyleDef from './page/left-panel.styledef';\nimport PagecontentStyleDef from './page/page-content.styledef';\nimport PartialStyleDef from './page/partial.styledef';\nimport PartialcontainerStyleDef from './page/partial-container.styledef';\nimport TabbarStyleDef from './page/tabbar.styledef';\nimport PageStyleDef from './page.styledef';\nimport PrefabStyleDef from './prefab.styledef';\nimport LinechartStyleDef from './chart/line-chart.styledef';\nimport BarchartStyleDef from './chart/bar-chart.styledef';\nimport PiechartStyleDef from './chart/pie-chart.styledef';\nimport AreachartStyleDef from './chart/area-chart.styledef';\nimport ColumnchartStyleDef from './chart/column-chart.styledef';\nimport DonutchartStyleDef from './chart/donut-chart.styledef';\nimport BubblechartStyleDef from './chart/bubble-chart.styledef';\nimport TabheaderStyleDef from './container/tabs/tabheader.styledef';\nimport NetworkinfotoasterStyleDef from './advanced/network-info-toaster.styledef';\nimport SkeletonStyleDef from './basic/skeleton.styledef';\nimport VideoStyleDef from './basic/video.styledef';\nimport CustomStyleDef from './basic/custom.styledef';\nimport LottieStyleDef from './basic/lottie.styledef';\nimport AudioStyleDef from './basic/audio.styledef';\nimport ListactiontemplateStyleDef from './data/list/list-action-template.styledef';\n//ADD_STYLE_IMPORT\n\nexport const StyleDefinitions = new Map<string, StyleDefinition[]>([\n    ['advanced/carousel/carousel-content', CarouselcontentStyleDef.getStyleDefs()],\n    ['advanced/carousel/carousel-template', CarouseltemplateStyleDef.getStyleDefs()],\n    ['advanced/carousel', CarouselStyleDef.getStyleDefs()],\n    ['advanced/login', LoginStyleDef.getStyleDefs()],\n    ['advanced/webview', WebviewStyleDef.getStyleDefs()],\n    ['advanced/network-toast', NetworkinfotoasterStyleDef.getStyleDefs()],\n    ['basic/anchor', AnchorStyleDef.getStyleDefs()],\n    ['basic/button', ButtonStyleDef.getStyleDefs()],\n    ['basic/buttongroup', ButtongroupStyleDef.getStyleDefs()],\n    ['basic/icon', IconStyleDef.getStyleDefs()],\n    ['basic/label', LabelStyleDef.getStyleDefs()],\n    ['basic/message', MessageStyleDef.getStyleDefs()],\n    ['basic/modal', ModalStyleDef.getStyleDefs()],\n    ['basic/picture', PictureStyleDef.getStyleDefs()],\n    ['basic/progress-bar', ProgressbarStyleDef.getStyleDefs()],\n    ['basic/progress-circle', ProgresscircleStyleDef.getStyleDefs()],\n    ['basic/search', SearchStyleDef.getStyleDefs()],\n    ['basic/spinner', SpinnerStyleDef.getStyleDefs()],\n    ['container/accordion/accordionpane', AccordionpaneStyleDef.getStyleDefs()],\n    ['container/accordion', AccordionStyleDef.getStyleDefs()],\n    ['container/layoutgrid/gridcolumn', GridcolumnStyleDef.getStyleDefs()],\n    ['container/layoutgrid/gridrow', GridrowStyleDef.getStyleDefs()],\n    ['container/layoutgrid', LayoutgridStyleDef.getStyleDefs()],\n    ['container/linearlayout/linearlayoutitem', LinearlayoutitemStyleDef.getStyleDefs()],\n    ['container/linearlayout', LinearlayoutStyleDef.getStyleDefs()],\n    ['container/panel/panel-content', PanelcontentStyleDef.getStyleDefs()],\n    ['container/panel/panel-footer', PanelfooterStyleDef.getStyleDefs()],\n    ['container/panel', PanelStyleDef.getStyleDefs()],\n    ['container/tabs/tabpane', TabpaneStyleDef.getStyleDefs()],\n    ['container/tabs', TabsStyleDef.getStyleDefs()],\n    ['container/tile', TileStyleDef.getStyleDefs()],\n    ['container/wizard/wizardstep', WizardstepStyleDef.getStyleDefs()],\n    ['container/wizard', WizardStyleDef.getStyleDefs()],\n    ['container', ContainerStyleDef.getStyleDefs()],\n    ['data/card/card-content', CardcontentStyleDef.getStyleDefs()],\n    ['data/card/card-footer', CardfooterStyleDef.getStyleDefs()],\n    ['data/card', CardStyleDef.getStyleDefs()],\n    ['data/form/form-body', FormbodyStyleDef.getStyleDefs()],\n    ['data/form/form-field', FormfieldStyleDef.getStyleDefs()],\n    ['data/form/form-footer', FormfooterStyleDef.getStyleDefs()],\n    ['data/form', FormStyleDef.getStyleDefs()],\n    ['data/list/list-template', ListtemplateStyleDef.getStyleDefs()],\n    ['data/list', ListStyleDef.getStyleDefs()],\n    ['data/list/list-action-template', ListactiontemplateStyleDef.getStyleDefs()],\n    ['device/barcodescanner', BarcodescannerStyleDef.getStyleDefs()],\n    ['device/camera', CameraStyleDef.getStyleDefs()],\n    ['dialogs/alertdialog', AlertdialogStyleDef.getStyleDefs()],\n    ['dialogs/confirmdialog', ConfirmdialogStyleDef.getStyleDefs()],\n    ['dialogs/dialog', DialogStyleDef.getStyleDefs()],\n    ['dialogs/dialogactions', DialogactionsStyleDef.getStyleDefs()],\n    ['dialogs/dialogcontent', DialogcontentStyleDef.getStyleDefs()],\n    ['input/basedataset', BasedatasetStyleDef.getStyleDefs()],\n    ['input/baseinput', BaseinputStyleDef.getStyleDefs()],\n    ['input/basenumber', BasenumberStyleDef.getStyleDefs()],\n    ['input/calendar/views', ViewsStyleDef.getStyleDefs()],\n    ['input/calendar', CalendarStyleDef.getStyleDefs()],\n    ['input/checkbox', CheckboxStyleDef.getStyleDefs()],\n    ['input/checkboxset', CheckboxsetStyleDef.getStyleDefs()],\n    ['input/chips', ChipsStyleDef.getStyleDefs()],\n    ['input/composite', CompositeStyleDef.getStyleDefs()],\n    ['input/currency', CurrencyStyleDef.getStyleDefs()],\n    ['input/epoch/date', DateStyleDef.getStyleDefs()],\n    ['input/epoch/datetime', DatetimeStyleDef.getStyleDefs()],\n    ['input/epoch/time', TimeStyleDef.getStyleDefs()],\n    ['input/number', NumberStyleDef.getStyleDefs()],\n    ['input/radioset', RadiosetStyleDef.getStyleDefs()],\n    ['input/rating', RatingStyleDef.getStyleDefs()],\n    ['input/select', SelectStyleDef.getStyleDefs()],\n    ['input/slider', SliderStyleDef.getStyleDefs()],\n    ['input/switch', SwitchStyleDef.getStyleDefs()],\n    ['input/text', TextStyleDef.getStyleDefs()],\n    ['input/textarea', TextareaStyleDef.getStyleDefs()],\n    ['input/toggle', ToggleStyleDef.getStyleDefs()],\n    ['navigation/appnavbar', AppnavbarStyleDef.getStyleDefs()],\n    ['navigation/basenav', BasenavStyleDef.getStyleDefs()],\n    ['navigation/menu', MenuStyleDef.getStyleDefs()],\n    ['navigation/navbar', NavbarStyleDef.getStyleDefs()],\n    ['navigation/navitem', NavitemStyleDef.getStyleDefs()],\n    ['navigation/popover', PopoverStyleDef.getStyleDefs()],\n    ['page/content', ContentStyleDef.getStyleDefs()],\n    ['page/left-panel', LeftpanelStyleDef.getStyleDefs()],\n    ['page/page-content', PagecontentStyleDef.getStyleDefs()],\n    ['page/partial', PartialStyleDef.getStyleDefs()],\n    ['page/partial-container', PartialcontainerStyleDef.getStyleDefs()],\n    ['page/tabbar', TabbarStyleDef.getStyleDefs()],\n    ['page', PageStyleDef.getStyleDefs()],\n    ['prefab', PrefabStyleDef.getStyleDefs()],\n    ['input/fileupload', FileuploadStyleDef.getStyleDefs()],\n    ['chart/line-chart', LinechartStyleDef.getStyleDefs()],\n    ['chart/bar-chart', BarchartStyleDef.getStyleDefs()],\n    ['chart/pie-chart', PiechartStyleDef.getStyleDefs()],\n    ['chart/area-chart', AreachartStyleDef.getStyleDefs()],\n    ['chart/column-chart', ColumnchartStyleDef.getStyleDefs()],\n    ['chart/donut-chart', DonutchartStyleDef.getStyleDefs()],\n    ['chart/bubble-chart', BubblechartStyleDef.getStyleDefs()],\n    ['container/tabs/tab-header', TabheaderStyleDef.getStyleDefs()],\n    ['basic/skeleton', SkeletonStyleDef.getStyleDefs()],\n    ['basic/video', VideoStyleDef.getStyleDefs()],\n    ['basic/custom', CustomStyleDef.getStyleDefs()],\n    ['basic/lottie', LottieStyleDef.getStyleDefs()],\n['basic', AudioStyleDef.getStyleDefs()],\n//ADD_STYLE_DEF\n]);\n\nconst scanStyleDocs = () => {\n    const styleDocs = {} as any;\n    const docsPath = `${__dirname}/../../../../style-docs/widgets`;\n    if (!fs.existsSync(docsPath)) {\n        return;\n    }\n    readdir(docsPath, {recursive: true}, (path) => {\n        if (path.endsWith('.md')) {\n            const text = fs.readFileSync(path, 'utf-8') as string;\n            (text.match(/\\|(.*)\\|$/gm) || [])\n                .map(s => s.substring(1, s.length - 1))\n                .map(s => s.split('|'))\n                .filter(a => a.length === 3)\n                .forEach(a => {\n                    const key = a[0].trim();\n                    const value = a[2].trim();\n                    if (key.startsWith('.')) {\n                        styleDocs[key] = value;\n                    }\n                });\n        }\n    });\n    StyleDefinitions.forEach(v => {\n        v.forEach(styleDef => {\n            (styleDef as any).document = styleDocs[styleDef.className];\n        });\n    });\n    return styleDocs;\n};\n\nscanStyleDocs();\nconst studioCSSMappings = {} as any;\nconst rnStyles = {} as any;\nStyleDefinitions.forEach(v => {\n    v.forEach(styleDef => {\n        studioCSSMappings[styleDef.className] = styleDef.studioStyleSelector;\n        rnStyles[styleDef.className] = styleDef.rnStyleSelector;\n    });\n});\n\nexport const getAllCSSSelectorMeta = () => {\n    const meta = {\n        css2rn: {\n\n        },\n        rn2css: {\n\n        }\n    } as any;\n    Object.keys(studioCSSMappings).forEach((k: string) => {\n        const s = studioCSSMappings[k];\n        meta.css2rn[k] = '';\n        if (rnStyles[k]) {\n            meta.rn2css[rnStyles[k]] = k;\n        }\n    });\n    return meta;\n};\n\nexport const getStudioSelector = (cssSelector: string) => {\n    cssSelector = cssSelector.trim();\n    let selector = cssSelector || '';\n    if (cssSelector) {\n        if (!studioCSSMappings[cssSelector]) {\n            const i = cssSelector.indexOf('.', 1);\n            if (i > 0) {\n                const prefix = cssSelector.substring(0, i);\n                selector = (getStudioSelector(prefix.trim()) || prefix)  + getStudioSelector(cssSelector.substring(i));\n            }\n        } else {\n            selector = studioCSSMappings[cssSelector];\n        }\n    }\n    return selector;\n};\n\nexport const getRNSelector = (cssSelector: string, trimApp = false) => {\n    cssSelector = cssSelector.trim();\n    let selector = cssSelector;\n    if (cssSelector) {\n        if (!rnStyles[cssSelector]) {\n            const i = cssSelector.indexOf('.', 1);\n            if (i > 0) {\n                let prefix = cssSelector.substring(1, i).trim();\n                const isPrefabOrPartial = (prefix === 'app-prefab' || prefix === 'app-partial');\n                const suffix = getRNSelector(cssSelector.substring(i), !isPrefabOrPartial);\n                prefix = getRNSelector('.' + prefix) || prefix;\n                if (suffix && isPrefabOrPartial) {\n                    prefix = prefix.substring(0, prefix.lastIndexOf('.root')).trim();\n                    prefix = prefix + '.__child';\n                }\n                selector = prefix + '.' + suffix;\n            } else {\n                selector = cssSelector.substring(1);\n            }\n        } else {\n            selector = rnStyles[cssSelector];\n        }\n    }\n    if (trimApp && selector.startsWith('app-') && selector.indexOf('.') > 0 ) {\n        selector = selector.substring(selector.indexOf('.') + 1);\n    }\n    return selector.startsWith('.') ? selector.substring(1) : selector;\n};\n", "wavemaker-rn-codegen/src/theme/components/base-style-definition.ts": "export interface StyleDefinition {\n    className: string;\n    rnStyleSelector?: string;\n    studioStyleSelector?: string;\n    style?: any;\n}\n\nexport interface ComponentStyle {\n    getStyleDefs(): StyleDefinition[];\n}\n", "wavemaker-rn-codegen/src/theme/components/advanced/carousel.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-carousel',\n        rnStyleSelector: 'app-carousel.root',\n        studioStyleSelector: '.app-carousel',\n        style: {}\n    }, {\n        className: '.app-carousel-btn-panel',\n        rnStyleSelector: 'app-carousel.btnPanel',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-carousel-slide',\n        rnStyleSelector: 'app-carousel.slide',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-carousel-first-slide',\n        rnStyleSelector: 'app-carousel.firstSlide',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-carousel-last-slide',\n        rnStyleSelector: 'app-carousel.lastSlide',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-carousel-active-slide',\n        rnStyleSelector: 'app-carousel.activeSlide',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-carousel-prev-btn',\n        rnStyleSelector: 'app-carousel.prevBtn',\n        studioStyleSelector: '',\n    }, {\n        className: '.app-carousel-prev-btn .app-icon-shape',\n        style: {\n            color: '@carouselPrevBtnColor'\n        }\n    }, {\n        className: '.app-carousel-next-btn',\n        rnStyleSelector: 'app-carousel.nextBtn',\n        studioStyleSelector: '',\n    }, {\n        className: '.app-carousel-prev-btn .app-icon-shape',\n        style: {\n            color: '@carouselNextBtnColor'\n        }\n    }, {\n        className: '.app-carousel-dot-wrapper',\n        rnStyleSelector: 'app-carousel.dotsWrapperStyle',\n        style: {\n            'background-color': '@carouselDotWrapperBgColor'\n        }\n    }, {\n        className: '.app-carousel-dot',\n        rnStyleSelector: 'app-carousel.dotStyle',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@carouselActiveDotColor'\n        }\n    }, {\n        className: '.app-carousel-active-dot',\n        rnStyleSelector: 'app-carousel.activeDotStyle',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@carouselDotColor'\n        },\n    },\n    {\n        className: '.app-carousel-skeleton',\n        rnStyleSelector: 'app-carousel.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    },\n    {\n        className: '.app-carousel-dot-skeleton',\n        rnStyleSelector: 'app-carousel.dotSkeleton',\n        studioStyleSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/advanced/login.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-login',\n        rnStyleSelector: 'app-login.root',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-login-text',\n        rnStyleSelector: 'app-login.text',\n        style: {}\n    }, {\n        className: '.app-login-error-message',\n        rnStyleSelector: 'app-login.errorMsgStyles',\n        style: {}\n    }, {\n        className: '.app-login-form-container',\n        rnStyleSelector: 'app-login.formStyles',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/advanced/webview.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([\n        {\n            className: '.app-webview',\n            rnStyleSelector: 'app-webview.root',\n            studioStyleSelector: '',\n            style: {}\n        },\n        {\n            className: '.app-webview-content',\n            rnStyleSelector: 'app-webview.webview',\n            studioStyleSelector: '',\n            style: {}\n        },\n    ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/advanced/network-info-toaster.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-network-info-toaster',\n        rnStyleSelector: 'app-network-info-toaster.root',\n        style: {}\n    }, {\n        className: '.app-network-info-toaster-text',\n        rnStyleSelector: 'app-network-info-toaster.text',\n        style: {}\n    },  {\n        className: '.app-network-info-toaster-action',\n        rnStyleSelector: 'app-network-info-toaster.action',\n        style: {}\n    },  {\n        className: '.app-network-info-toaster-action-text',\n        rnStyleSelector: 'app-network-info-toaster.actionText',\n        style: {}\n    }, {\n        className: '.app-network-info-toaster-action-separator',\n        rnStyleSelector: 'app-network-info-toaster.actionSeparator',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-content.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-carousel-content',\n        rnStyleSelector: 'app-carousel-content.root',\n        studioStyleSelector: '.app-carousel-item',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/advanced/carousel/carousel-template.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-carousel-template',\n        rnStyleSelector: 'app-carousel-template.root',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page/tabbar.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-tabbar',\n        rnStyleSelector: 'app-tabbar.root',\n        studioStyleSelector: '.app-tabbar',\n        style: {}\n    }, {\n        className: '.app-tabbar-menu',\n        rnStyleSelector: 'app-tabbar.menu',\n        studioStyleSelector: '.app-tabbar',\n        style: {\n            'background-color': '@tabbarBackgroundColor'\n        }\n    }, {\n        className: '.app-tabbar-more-menu',\n        rnStyleSelector: 'app-tabbar.moreMenu',\n        studioStyleSelector: '.app-tabbar .menu-items .dropdown-menu',\n        style: {\n            'background-color': '@tabbarBackgroundColor'\n        }\n    }, {\n        className: '.app-tabbar-more-menu-row',\n        rnStyleSelector: 'app-tabbar.moreMenuRow',\n        studioStyleSelector: '.app-tabbar .menu-items .dropdown-menu',\n        style: {}\n    }, {\n        className: '.app-tabbar-item',\n        rnStyleSelector: 'app-tabbar.tabItem',\n        studioStyleSelector: '.app-tabbar .tab-item',\n        style: {}\n    }, {\n        className: '.app-tabbar-active-item',\n        rnStyleSelector: 'app-tabbar.activeTabItem',\n        studioStyleSelector: '.app-tabbar .tab-item',\n        style: {}\n    }, {\n        className: '.app-tabbar-center-hub-item',\n        rnStyleSelector: 'app-tabbar.centerHubItem',\n        style: {}\n},{\n        className: '.app-tabbar-center-hub-icon',\n        rnStyleSelector: 'app-tabbar.centerHubIcon',\n        style: {}\n},{\n        className: '.app-tabbar-center-hub-label',\n        rnStyleSelector: 'app-tabbar.centerHubLabel',\n        style: {}\n},{\n     className: '.app-tabbar-item-icon',\n        rnStyleSelector: 'app-tabbar.tabIcon',\n        studioStyleSelector: '.app-tabbar .tab-item ',\n        style: {}\n    },  {\n        className: '.app-tabbar-active-icon',\n        rnStyleSelector: 'app-tabbar.activeTabIcon',\n        studioStyleSelector: '.app-tabbar .tab-item.active ',\n        style: {}\n    }, {\n        className: '.app-tabbar-item-icon .app-icon-shape',\n        studioStyleSelector: '.app-tabbar .app-icon',\n        style: {\n            color:  '@tabbarIconColor',\n            'border-bottom-color': '@tabbarIconColor'\n        }\n    },  {\n        className: '.app-tabbar-active-icon .app-icon-shape',\n        studioStyleSelector: '.app-tabbar .tab-item.active .app-icon',\n        style: {}\n    }, {\n        className: '.app-tabbar-item-label',\n        rnStyleSelector: 'app-tabbar.tabLabel',\n        studioStyleSelector: '.app-tabbar label',\n        style: {\n            color:  '@tabbarIconColor'\n        }\n    },  {\n        className: '.app-tabbar-active-label',\n        rnStyleSelector: 'app-tabbar.activeTabLabel',\n        studioStyleSelector: '.app-tabbar .tab-item',\n        style: {}\n    }, ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page/left-panel.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-left-panel',\n        rnStyleSelector: 'app-left-panel.root',\n        studioStyleSelector: '.app-left-panel',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page/partial.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-partial',\n        rnStyleSelector: 'app-partial.root',\n        studioStyleSelector: '.app-partial ',\n        style: {}\n    }, {\n        className: '.app-partial-skeleton',\n        rnStyleSelector: 'app-partial.skeleton',\n        studioStyleSelector: '.app-partial-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page/content.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-content',\n        rnStyleSelector: 'app-content.root',\n        studioStyleSelector: '.app-content',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page/partial-container.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-partial-container',\n        rnStyleSelector: 'app-partial-container.root',\n        studioStyleSelector: '.app-partial-container',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/page/page-content.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-page-content',\n        rnStyleSelector: 'app-page-content.root',\n        studioStyleSelector: '.app-page-content',\n        style: {\n            'background-color': '@pageContentBgColor'\n        }\n    }, {\n        className: '.app-page-content-skeleton',\n        rnStyleSelector: 'app-page-content.skeleton',\n        studioStyleSelector: '.app-page-content-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/rating.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-rating',\n        rnStyleSelector: 'app-rating.root',\n        studioStyleSelector: '.app-ratings',\n        style: {}\n    }, {\n        className: '.app-rating-text',\n        rnStyleSelector: 'app-rating.text',\n        studioStyleSelector: '.app-ratings .caption',\n        style: {\n            color: '@ratingSelectedIconColor'\n        }\n    }, {\n        className: '.app-rating-icon',\n        rnStyleSelector: 'app-rating.icon.text',\n        studioStyleSelector: '.app-ratings label',\n        style: {\n            color: '@ratingIconColor'\n        }\n    }, {\n        className: '.app-rating-selected-icon',\n        rnStyleSelector: 'app-rating.selectedIcon.text',\n        studioStyleSelector: '.app-ratings label.active',\n        style: {\n            color: '@ratingSelectedIconColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/slider.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-slider',\n        rnStyleSelector: 'app-slider.root',\n        studioStyleSelector: '.app-slider',\n        style: {}\n    }, {\n        className: '.app-slider-text',\n        rnStyleSelector: 'app-slider.text',\n        style: {}\n    }, {\n        className: '.app-slider-minimum-text',\n        rnStyleSelector: 'app-slider.minimumValue',\n        style: {}\n    }, {\n        className: '.app-slider-maximum-text',\n        rnStyleSelector: 'app-slider.maximumValue',\n        style: {}\n    },  {\n        className: '.app-slider-value-text',\n        rnStyleSelector: 'app-slider.value',\n        style: {}\n    }, {\n        className: '.app-slider-track',\n        rnStyleSelector: 'app-slider.track',\n        style: {}\n    }, {\n        className: '.app-slider-minimum-track',\n        rnStyleSelector: 'app-slider.minimumTrack',\n        studioStyleSelector: '.app-slider .app-slider-value',\n        style: {\n            'background-color': '@minimumTrackTintColor'\n        }\n    }, {\n        className: '.app-slider-maximum-track',\n        rnStyleSelector: 'app-slider.maximumTrack',\n        studioStyleSelector: '.app-slider .app-slider-value',\n        style: {\n            'background-color': '@maximumTrackTintColor'\n        }\n    }, {\n        className: '.app-slider-thumb',\n        rnStyleSelector: 'app-slider.thumb',\n        studioStyleSelector: '.app-slider .range-input',\n        style: {\n            'background-color': '@thumbTintColor',\n            'color': '@thumbTintColor'\n        }\n    }, {\n        className: '.app-slider-track-style',\n        rnStyleSelector: 'app-slider.trackStyle',\n        style: {}\n    }, {\n        className: '.app-slider-marker-style',\n        rnStyleSelector: 'app-slider.markerStyle',\n        style: {}\n    }, {\n        className: '.app-slider-marker-label-style',\n        rnStyleSelector: 'app-slider.markerLabelStyle',\n        style: {}\n    }, {\n        className: '.app-slider-minimum-track-style',\n        rnStyleSelector: 'app-slider.minimumTrackStyle',\n        style: {}\n    }, {\n        className: '.app-slider-maximum-track-style',\n        rnStyleSelector: 'app-slider.maximumTrackStyle',\n        style: {}\n    }, {\n        className: '.app-slider-active-track-style',\n        rnStyleSelector: 'app-slider.activeTrackStyle',\n        style: {}\n    }, {\n        className: '.app-slider-tooltip',\n        rnStyleSelector: 'app-slider.tooltip',\n        style: {}\n    }, {\n        className: '.app-slider-tooltip-label',\n        rnStyleSelector: 'app-slider.tooltipLabel',\n        style: {}\n    }, {\n        className: '.app-slider-tooltip-triangle',\n        rnStyleSelector: 'app-slider.tooltipTriangle',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/basedataset.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/basenumber.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/text.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-text',\n        rnStyleSelector: 'app-text.root',\n        studioStyleSelector: '.app-textbox',\n        style: {\n            'border-color': '@inputBorderColor',\n            'background-color': '@inputBackgroundColor',\n        }\n    }, {\n        className: '.app-text-text',\n        rnStyleSelector: 'app-text.text',\n        studioStyleSelector: '.app-textbox',\n        style: {}\n    }, {\n        className: '.app-text-invalid',\n        rnStyleSelector: 'app-text.invalid',\n        studioStyleSelector: '.app-textbox.invalid',\n        style: {\n            'border-bottom-color': '@inputInvalidBorderColor',\n        }\n    },{\n        className: '.app-text-focused',\n        rnStyleSelector: 'app-text.focused',\n        studioStyleSelector: '.app-textbox.focused',\n        style: {\n            'border-color': '@inputFocusBorderColor',\n        }\n    },{\n        className: '.app-text-disabled',\n        rnStyleSelector: 'app-text-disabled.root',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-text-flotaing-label',\n        rnStyleSelector: 'app-text.floatingLabel',\n        style: {}\n    }, {\n        className: '.app-text-active-flotaing-label',\n        rnStyleSelector: 'app-text.activeFloatingLabel',\n        style: {}\n    },  {\n        className: '.app-text-skeleton',\n        rnStyleSelector: 'app-text.skeleton',\n        studioStyleSelector: '.app-text-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;\n", "wavemaker-rn-codegen/src/theme/components/input/toggle.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-toggle',\n        rnStyleSelector: 'app-toggle.root',\n        studioStyleSelector: '.app-toggle',\n        style: {}\n    }, {\n        className: '.app-toggle-text',\n        rnStyleSelector: 'app-toggle.text',\n        studioStyleSelector: '.app-toggle .caption',\n        style: {\n            color: '@toggleHandleColor'\n        }\n    }, {\n        className: '.app-toggle-handle',\n        rnStyleSelector: 'app-toggle.handle',\n        studioStyleSelector: '.app-toggle .caption',\n        style: {\n            color: '@toggleHandleColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/fileupload.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n            className: '.app-fileupload',\n            rnStyleSelector: 'app-fileupload.root',\n            studioStyleSelector: '.app-fileupload > .app-single-file-upload',\n            \n            style: {\n                'background-color': '@fileuploadBgColor',\n                'color': '@fileuploadTextColor',\n                'border-color': '@fileuploadBorderColor'\n            }\n        },\n        {\n            className: '.app-fileupload-text',\n            rnStyleSelector: 'app-fileupload.button.text',\n            studioStyleSelector: '.app-fileupload .caption',\n            \n            style: {\n                'color': '@fileuploadTextColor',\n            }\n        },\n        {\n            className: '.app-fileupload-btn',\n            rnStyleSelector: 'app-fileupload.button',\n            studioStyleSelector: '.app-fileupload ',\n            \n            style: {\n                'color': '@fileuploadTextColor',\n            }\n        },\n        {\n            className: '.app-fileupload-icon',\n            rnStyleSelector: 'app-fileupload.button.icon.icon',\n            studioStyleSelector: '.app-fileupload .app-button i',\n            \n            style: {\n                'color': '@fileuploadTextColor',\n            }\n        }\n        ])\n} as ComponentStyle;\n", "wavemaker-rn-codegen/src/theme/components/input/composite.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-composite',\n        rnStyleSelector: 'app-composite.root',\n        studioStyleSelector: '.app-composite',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/textarea.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-textarea',\n        rnStyleSelector: 'app-textarea.root',\n        studioStyleSelector: '.app-textarea',\n        style: {\n            'border-color': '@inputBorderColor',\n            'background-color': '@inputBackgroundColor',\n        }\n    }, {\n        className: '.app-textarea-text',\n        rnStyleSelector: 'app-textarea.text',\n        studioStyleSelector: '.app-textarea',\n        style: {}\n    }, {\n        className: '.app-textarea-invalid',\n        rnStyleSelector: 'app-textarea.invalid',\n        studioStyleSelector: '.app-textarea.invalid',\n        style: {\n            'border-bottom-color': 'red'\n        }\n    },{\n        className: '.app-textarea-focused',\n        rnStyleSelector: 'app-textarea.focused',\n        studioStyleSelector: '.app-textarea.focused',\n        style: {\n            'border-color': '@inputFocusBorderColor'\n        }\n    },{\n        className: '.app-textarea-flotaing-label',\n        rnStyleSelector: 'app-textarea.floatingLabel',\n        style: {}\n    }, {\n        className: '.app-textarea-active-flotaing-label',\n        rnStyleSelector: 'app-textarea.activeFloatingLabel',\n        style: {}\n    },  {\n        className: '.app-textarea-placeholder',\n        rnStyleSelector: 'app-textarea.placeholderText',\n        studioStyleSelector: '',\n        style: {\n            'color': '@inputPlaceholderColor'\n        }\n    },{\n        className: '.app-textarea-help-text',\n        rnStyleSelector: 'app-textarea.helpText',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-textarea-skeleton',\n        rnStyleSelector: 'app-textarea.skeleton',\n        studioStyleSelector: '.app-textarea-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/radioset.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-radioset',\n        rnStyleSelector: 'app-radioset.root',\n        studioStyleSelector: '.app-radioset',\n        style: {}\n    }, {\n        className: '.app-radioset-text',\n        rnStyleSelector: 'app-radioset.text',\n        studioStyleSelector: '',\n        style: {\n            color: '@checkedColor'\n        }\n    }, {\n        className: '.app-radioset-group',\n        rnStyleSelector: 'app-radioset.group',\n        studioStyleSelector: '',\n        style: {\n        }\n    }, {\n        className: '.app-radioset-group-title',\n        rnStyleSelector: 'app-radioset.groupHeaderTitle',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@groupHeadingBgColor'\n        }\n    }, {\n        className: '.app-radioset-item',\n        rnStyleSelector: 'app-radioset.item',\n        studioStyleSelector: '.app-radioset li.radio',\n        style: {}\n    },  {\n        className: '.app-radioset-selected-item',\n        rnStyleSelector: 'app-radioset.selectedItem',\n        studioStyleSelector: '.app-radioset li.radio',\n        style: {}\n    }, {\n        className: '.app-radioset-label',\n        rnStyleSelector: 'app-radioset.radioLabel',\n        studioStyleSelector: '.app-radioset .caption',\n        style: {}\n    }, {\n        className: '.app-radioset-skeleton',\n        rnStyleSelector: 'app-radioset.skeleton',\n        studioStyleSelector: '.app-radioset-skeleton',\n        style: {}\n    }, {\n        className: '.app-radioset-checked-icon',\n        rnStyleSelector: 'app-radioset.checkedRadio',\n        studioStyleSelector: '.app-radioset-checkedRadio',\n        style: {}\n    }, {\n        className: '.app-radioset-unchecked-icon',\n        rnStyleSelector: 'app-radioset.uncheckedRadio',\n        studioStyleSelector: '.app-radioset-uncheckedRadio',\n        style: {}\n    }, {\n        className: '.app-radioset-selected-label',\n        rnStyleSelector: 'app-radioset.selectedLabel',\n        studioStyleSelector: '.app-radioset-selectedLabel',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/select.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-select',\n        rnStyleSelector: 'app-select.root',\n        studioStyleSelector: '.app-select',\n        style: {\n            'border-color': '@inputBorderColor',\n            'background-color': '@inputBackgroundColor'\n        }\n    }, {\n        className: '.app-select-text',\n        rnStyleSelector: 'app-select.text',\n        studioStyleSelector: '.app-select',\n        style: {}\n    }, {\n        className: '.app-select-invalid',\n        rnStyleSelector: 'app-select.invalid',\n        studioStyleSelector: '.app-select.invalid',\n        style: {\n            'border-bottom-color': '@inputInvalidBorderColor',\n        }\n    },{\n        className: '.app-select-item',\n        rnStyleSelector: 'app-select.selectItem',\n        studioStyleSelector: '.app-select.selectItem'\n    },{\n        className: '.app-select-item-text',\n        rnStyleSelector: 'app-select.selectItemText',\n        studioStyleSelector: '.app-select.selectItemText'\n    },{\n        className: '.app-select-last-item',\n        rnStyleSelector: 'app-select.lastSelectItem',\n        studioStyleSelector: '.app-select.lastSelectItem'\n    },{\n        className: '.app-select-active-item',\n        rnStyleSelector: 'app-select.selectedItem',\n        studioStyleSelector: '.app-select.selectedItem'\n    },{\n        className: '.app-select-active-item-text',\n        rnStyleSelector: 'app-select.selectedItemText',\n        studioStyleSelector: '.app-select.selectedItemText'\n    },{\n        className: '.app-select-check-icon',\n        rnStyleSelector: 'app-select.checkIcon',\n        studioStyleSelector: '.app-select.checkIcon'\n    }, {\n        className: '.app-select-arrow-button',\n        rnStyleSelector: 'app-select.arrowButton.root',\n        studioStyleSelector: ''\n    }, {\n        className: '.app-select-arrow-button-icon',\n        rnStyleSelector: 'app-select.arrowButton.icon.icon',\n        studioStyleSelector: ''\n    }, {\n        className: '.app-select-arrow-button-skeleton',\n        rnStyleSelector: 'app-select.arrowButtonSkeleton',\n        studioStyleSelector: 'app-select-arrow-button-skeleton'\n    }, {\n        className: '.app-select-text-skeleton',\n        rnStyleSelector: 'app-select.textSkeleton',\n        studioStyleSelector: 'app-select-text-skeleton'\n    }, {\n        className: '.app-select-dropdown-content',\n        rnStyleSelector: 'app-select.dropDownContent',\n        studioStyleSelector: 'app-select-dropdown-content'\n    }, {\n        className: '.app-select-dropdown',\n        rnStyleSelector: 'app-select.dropdown',\n        studioStyleSelector: 'app-select-dropdown'\n    }, {\n        className: '.app-select-modal',\n        rnStyleSelector: 'app-select.modal',\n        studioStyleSelector: 'app-select-modal'\n    }, {\n        className: '.app-select-modal-content',\n        rnStyleSelector: 'app-select.modalContent',\n        studioStyleSelector: 'app-select-modal-content'\n    },])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/chips.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-chips',\n        rnStyleSelector: 'app-chips.root',\n        studioStyleSelector: '.app-chips',\n        style: {}\n    }, {\n        className: '.app-chips-wrapper',\n        rnStyleSelector: 'app-chips.chipsWrapper',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-chips-item',\n        rnStyleSelector: 'app-chips.chip',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-chips-item-text',\n        rnStyleSelector: 'app-chips.chipText',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-chips-active-item',\n        rnStyleSelector: 'app-chips.activeChip',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@chipSelectedContainerColor',\n            'border-color': '@chipSelectedContainerColor',\n        }\n    }, {\n        className: '.app-chips-active-item-text',\n        rnStyleSelector: 'app-chips.activeChipLabel',\n        studioStyleSelector: '',\n        style: {\n            color: '@chipActiveTextColor'\n        }\n    }, {\n        className: '.app-chips-search-container',\n        rnStyleSelector: 'app-chips.searchContainer',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-chips-search',\n        rnStyleSelector: 'app-chips.search',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-chips-done-icon',\n        rnStyleSelector: 'app-chips.doneIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-chips-clear-icon',\n        rnStyleSelector: 'app-chips.clearIcon',\n        studioStyleSelector: '',\n        style: {\n            color: '@chipActiveTextColor'\n        }\n    }, {\n        className: '.app-chips-picture',\n        rnStyleSelector: 'app-chips.imageStyles',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/number.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-number',\n        rnStyleSelector: 'app-number.root',\n        studioStyleSelector: '.app-textbox[type=\"number\"]',\n        style: {\n            'border-color': '@inputBorderColor',\n            'background-color': '@inputBackgroundColor'\n        }\n    }, {\n        className: '.app-number-invalid',\n        rnStyleSelector: 'app-number.invalid',\n        studioStyleSelector: '',\n        style: {\n            'border-bottom-color': '@inputInvalidBorderColor'\n        }\n    },{\n        className: '.app-number-focused',\n        rnStyleSelector: 'app-number.focused',\n        studioStyleSelector: '',\n        style: {\n            'border-color': '@inputFocusBorderColor'\n        }\n    }, {\n        className: '.app-number-placeholer',\n        rnStyleSelector: 'app-number.placeholderText',\n        studioStyleSelector: '',\n        style: {\n            'color': '@inputPlaceholderColor'\n        }\n    }, {\n        className: '.app-number-skeleton',\n        rnStyleSelector: 'app-number.skeleton',\n        studioStyleSelector: '.app-number-skeleton',\n        style: {}\n    }, {\n        className: '.app-number-flotaing-label',\n        rnStyleSelector: 'app-number.floatingLabel',\n        style: {}\n    }, {\n        className: '.app-number-active-flotaing-label',\n        rnStyleSelector: 'app-number.activeFloatingLabel',\n        style: {}\n    }, {\n        className: '.app-number-skeleton',\n        rnStyleSelector: 'app-number.skeleton',\n        style: {}\n    }, {\n        className: '.app-number-label-skeleton',\n        rnStyleSelector: 'app-number.skeletonLabel',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/checkbox.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-checkbox',\n        rnStyleSelector: 'app-checkbox.root',\n        studioStyleSelector: '.app-checkbox',\n        style: {}\n    }, {\n        // Deprecated\n        className: '.app-checkbox-color',\n        rnStyleSelector: 'app-checkbox.text',\n        studioStyleSelector: '',\n        style: {\n            color: '@checkedColor'\n        }\n    }, {\n        className: '.app-checkbox-label',\n        rnStyleSelector: 'app-checkbox.text',\n        studioStyleSelector: '.app-checkbox label',\n        style: {}\n    }, {\n        className: '.app-checkbox-skeleton',\n        rnStyleSelector: 'app-checkbox.skeleton',\n        studioStyleSelector: '.app-checkbox-skeleton',\n        style: {}\n    }, {\n        className: '.app-checkbox-checkicon',\n        rnStyleSelector: 'app-checkbox.checkicon',\n        studioStyleSelector: '.app-checkbox-selecticon',\n        style: {}\n    }, {\n        className: '.app-checkbox-uncheckicon',\n        rnStyleSelector: 'app-checkbox.uncheckicon',\n        studioStyleSelector: '.app-checkbox-unselecticon',\n        style: {}\n    }, {\n        className: '.app-checkbox-selected-label',\n        rnStyleSelector: 'app-checkbox.selectedLabel',\n        studioStyleSelector: '.app-checkbox-selected-label',\n        style: {}\n    }, {\n        className: '.app-checkbox-checked-item',\n        rnStyleSelector: 'app-checkbox.checkedItem',\n        studioStyleSelector: '.app-checkbox-checked-item',\n        style: {}\n    }, {\n        className: '.app-checkbox-checkicon-skeleton',\n        rnStyleSelector: 'app-checkbox.icon',\n        studioStyleSelector: '.app-checkbox-checkicon-skeleton',\n        style: {}\n    }, {\n        className: '.app-checkbox-label-skeleton',\n        rnStyleSelector: 'app-checkbox.labelSkeleton',\n        studioStyleSelector: '.app-checkbox-label-skeleton',\n        style: {}\n    },\n    {\n        className: '.app-checkbox-icon-skeleton',\n        rnStyleSelector: 'app-checkbox.iconSkeleton',\n        studioStyleSelector: '.app-checkbox-icon-skeleton',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/switch.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-switch',\n        rnStyleSelector: 'app-switch.root',\n        studioStyleSelector: '.app-switch',\n        style: {}\n    }, {\n        className: '.app-switch-btn',\n        rnStyleSelector: 'app-switch.button',\n        studioStyleSelector: '.app-switch .btn',\n        style: {\n            'background-color': '@switchBgColor',\n            'border-color': '@switchBorderColor'\n        }\n    }, {\n        className: '.app-switch-btn-selected',\n        rnStyleSelector: 'app-switch.selectedButton',\n        studioStyleSelector: '.app-switch .btn.selected',\n        style: {\n            color: '@switchActiveTextColor',\n            'background-color': '@switchActiveBgColor'\n        }\n    },{\n        className: '.app-switch-btn-text',\n        rnStyleSelector: 'app-switch.text',\n        studioStyleSelector: '.app-switch .btn',\n        style: {}\n    }, {\n        className: '.app-switch-btn-selected-text',\n        rnStyleSelector: 'app-switch.selectedButtonText',\n        studioStyleSelector: '.app-switch .btn.selected',\n        style: {}\n    }, {\n        className: '.app-switch-first-btn',\n        rnStyleSelector: 'app-switch.firstButton',\n        studioStyleSelector: '.app-switch .btn:first-child',\n        style: {}\n    }, {\n        className: '.app-switch-last-btn',\n        rnStyleSelector: 'app-switch.lastButton',\n        studioStyleSelector: '.app-switch .btn:last-child',\n        style: {}\n    }, {\n        className: '.app-switch-text-skeleton',\n        rnStyleSelector: 'app-switch.skeleton',\n        studioStyleSelector: '.app-switch-text-skeleton',\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/checkboxset.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-checkboxset',\n        rnStyleSelector: 'app-checkboxset.root',\n        studioStyleSelector: '.app-checkboxset',\n        style: {}\n    }, {\n        className: '.app-checkboxset-group-title',\n        rnStyleSelector: 'app-checkboxset.groupHeaderTitle',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@groupHeadingBgColor'\n        }\n    }, {\n        className: '.app-checkboxset-item',\n        rnStyleSelector: 'app-checkboxset.item',\n        studioStyleSelector: '.app-checkboxset li.checkbox',\n        style: {}\n    },  {\n        // Deprecated\n        className: '.app-checkboxset-checked-item',\n        rnStyleSelector: 'app-checkboxset.checkedItem',\n        studioStyleSelector: '.app-checkboxset li.checkbox',\n        style: {}\n    }, {\n        className: '.app-checkboxset-label',\n        rnStyleSelector: 'app-checkboxset.text',\n        studioStyleSelector: '.app-checkboxset .caption',\n        style: {}\n    }, {\n        className: '.app-checkboxset-skeleton',\n        rnStyleSelector: 'app-checkboxset.skeleton',\n        studioStyleSelector: '.app-checkboxset-skeleton',\n        style: {}\n    },, {\n        className: '.app-checkboxset-checkicon',\n        rnStyleSelector: 'app-checkboxset.checkicon',\n        studioStyleSelector: '.app-checkboxset-checkicon',\n        style: {}\n    }, {\n        className: '.app-checkboxset-uncheckicon',\n        rnStyleSelector: 'app-checkboxset.uncheckicon',\n        studioStyleSelector: '.app-checkboxset-uncheckicon',\n        style: {}\n    }, {\n        className: '.app-checkboxset-selected-label',\n        rnStyleSelector: 'app-checkboxset.selectedLabel',\n        studioStyleSelector: '.app-checkboxset-selectedLabel',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/baseinput.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/currency.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-currency',\n        rnStyleSelector: 'app-currency.root',\n        studioStyleSelector: '.app-currency .app-currency-input',\n        style: {\n            'border-color': '@inputBorderColor',\n            'background-color': '@inputBackgroundColor'\n        }\n    }, {\n        className: '.app-currency-label',\n        rnStyleSelector: 'app-currency.label',\n        studioStyleSelector: '.app-currency span',\n        style: {\n            'background-color': '@primaryColor',\n            'color': '@primaryContrastColor'\n        }\n    }, {\n        className: '.app-currency-flotaing-label',\n        rnStyleSelector: 'app-currency.floatingLabel',\n        style: {}\n    }, {\n        className: '.app-currency-active-flotaing-label',\n        rnStyleSelector: 'app-currency.activeFloatingLabel',\n        style: {}\n    }, {\n        className: '.app-currency-invalid',\n        rnStyleSelector: 'app-currency.invalid',\n        studioStyleSelector: '',\n        style: {\n            'border-bottom-color': '@inputInvalidBorderColor'\n        }\n    },{\n        className: '.app-currency-focused',\n        rnStyleSelector: 'app-currency.focused',\n        studioStyleSelector: '',\n        style: {\n            'border-color': '@inputFocusBorderColor'\n        }\n    },{\n        className: '.app-currency-placeholder',\n        rnStyleSelector: 'app-currency.placeholderText',\n        studioStyleSelector: '',\n        style: {\n            'color': '@inputPlaceholderColor'\n        }\n    }, {\n        className: '.app-currency-skeleton',\n        rnStyleSelector: 'app-currency.skeleton',\n        studioStyleSelector: 'app-currency-skeleton',\n        style: {}\n    },  {\n        className: '.app-currency-skeleton-label',\n        rnStyleSelector: 'app-currency.skeletonText',\n        studioStyleSelector: 'app-currency-skeleton-label',\n        style: {}\n    }, {\n        className: '.app-currency-skeleton-label-wrapper',\n        rnStyleSelector: 'app-currency.skeletonLabelWrapper',\n        studioStyleSelector: 'app-currency-skeleton-label-wrapper',\n        style: {}\n    }, {\n        className: '.app-currency-input-wrapper',\n        rnStyleSelector: 'app-currency.skeletonTextInputWrapper',\n        studioStyleSelector: 'app-currency-input-wrapper',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/calendar.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-calendar',\n        rnStyleSelector: 'app-calendar.root',\n        studioStyleSelector: '.uib-datepicker',\n        style: {}\n    }, {\n        className: '.app-calendar-text',\n        rnStyleSelector: 'app-calendar.text',\n        studioStyleSelector: '.uib-datepicker',\n        style: {\n            color: 'calendarDateColor'\n        }\n    }, {\n        className: '.app-calendar-wrapper',\n        rnStyleSelector: 'app-calendar.calendar',\n        studioStyleSelector: '.uib-datepicker table',\n        style: {\n            'background-color': '@calendarBgColor',\n            'border-color': '@calendarHeaderBgColor'\n        }\n    }, {\n        className: '.app-calendar-header',\n        rnStyleSelector: 'app-calendar.calendarHeader',\n        studioStyleSelector: '.uib-datepicker thead',\n        style: {\n            'background-color': '@calendarHeaderBgColor',\n            'border-color': '@calendarHeaderBgColor'\n        }\n    }, {\n        className: '.app-calendar-week-day',\n        rnStyleSelector: 'app-calendar.weekDay',\n        studioStyleSelector: '.uib-datepicker thead tr:nth-child(2)',\n        style: {\n            'background-color': '@calendarHeaderBgColor',\n            'border-color': '@calendarHeaderBgColor'\n        }\n    }, {\n        className: '.app-calendar-week-day-text',\n        rnStyleSelector: 'app-calendar.weekDayText',\n        studioStyleSelector: '.uib-datepicker thead tr:nth-child(2)',\n        style: {\n            color: '@calendarWeekDayTextColor'\n        }\n    }, {\n        className: '.app-calendar-day',\n        rnStyleSelector: 'app-calendar.day',\n        studioStyleSelector: '.uib-datepicker tbody td span',\n        style: {\n            'background-color': '@calendarBgColor',\n            color: '@calendarDateColor'\n        }\n    }, {\n        className: '.app-calendar-not-day-of-month',\n        rnStyleSelector: 'app-calendar.day',\n        studioStyleSelector: '.uib-datepicker tbody td span',\n        style: {\n            color: '@calendarNotCurrentMonthDateColor'\n        }\n    }, {\n        className: '.app-calendar-month-text',\n        rnStyleSelector: 'app-calendar.monthText',\n        studioStyleSelector: '.uib-datepicker thead strong',\n        style: {\n            color: '@calendarHeaderTextColor'\n        }\n    }, {\n        className: '.app-calendar-year-text',\n        rnStyleSelector: 'app-calendar.yearText',\n        studioStyleSelector: '',\n        style: {\n            color: '@calendarHeaderTextColor'\n        }\n    }, {\n        className: '.app-calendar-today',\n        rnStyleSelector: 'app-calendar.today',\n        studioStyleSelector: '.uib-datepicker tbody td button.active span',\n        style: {\n            'background-color': '@calendarTodayBgColor'\n        }\n    }, {\n        className: '.app-calendar-today-text',\n        rnStyleSelector: 'app-calendar.todayText',\n        studioStyleSelector: '.uib-datepicker tbody td button.active span',\n        style: {\n            'background-color': '@transparent'\n        }\n    }, {\n        className: '.app-calendar-eventDay1',\n        rnStyleSelector: 'app-calendar.eventDay1',\n        studioStyleSelector: '',\n        style: {\n            color: '@calendarEventDay1Color'\n        }\n    }, {\n        className: '.app-calendar-eventDay2',\n        rnStyleSelector: 'app-calendar.eventDay2',\n        studioStyleSelector: '',\n        style: {\n            color: '@calendarEventDay2Color'\n        }\n    }, {\n        className: '.app-calendar-eventDay3',\n        rnStyleSelector: 'app-calendar.eventDay3',\n        studioStyleSelector: '',\n        style: {\n            color: '@calendarEventDay3Color'\n        }\n    }, {\n        className: '.app-calendar-selected-day',\n        rnStyleSelector: 'app-calendar.selectedDay',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@calendarSelectedDayBgColor'\n        }\n    }, {\n        className: '.app-calendar-selected-day-text',\n        rnStyleSelector: 'app-calendar.selectedDayText',\n        studioStyleSelector: '',\n        style: {\n            color: '@calendarSelectedDayTextColor'\n        }\n    }, {\n        className: '.app-calendar-prev-month-btn',\n        rnStyleSelector: 'app-calendar.prevMonthBtn',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-calendar-prev-month-btn .app-icon-text',\n        style: {\n            color: '@calendarPrevMonthIconColor'\n        }\n    }, {\n        className: '.app-calendar-next-month-btn',\n        rnStyleSelector: 'app-calendar.nextMonthBtn',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-calendar-next-month-btn .app-icon-text',\n        style: {\n            color: '@calendarNextMonthIconColor'\n        }\n    }, {\n        className: '.app-calendar-prev-year-btn',\n        rnStyleSelector: 'app-calendar.prevMonthBtn',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-calendar-prev-year-btn .app-icon-text',\n        style: {\n            color: '@calendarPrevYearIconColor'\n        }\n    }, {\n        className: '.app-calendar-next-year-btn',\n        rnStyleSelector: 'app-calendar.nextYearBtn',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-calendar-next-year-btn .app-icon-text',\n        style: {\n            color: '@calendarNextYearIconColor'\n        }\n    }, {\n        className: '.app-calendar-header-skeleton',\n        rnStyleSelector: 'app-calendar.headerSkeleton',\n        studioStyleSelector: 'app-calendar-header-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/calendar/views.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-views',\n        rnStyleSelector: 'app-views.root',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/epoch/time.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\nimport { getEpochStyles } from './datetime.styledef';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => getEpochStyles('app-time', 'wm-time')\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/epoch/date.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\nimport { getEpochStyles } from './datetime.styledef';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => getEpochStyles('app-date', 'wm-date')\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/input/epoch/datetime.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport const getEpochStyles = (className: string, widgetType: string): StyleDefinition[] => ([{\n    className: `.${className}`,\n    rnStyleSelector: `${className}.root`,\n    studioStyleSelector: `input[widgettype=\"${widgetType}\"]`,\n    \n    style: {\n        'background-color': '@inputBackgroundColor',\n        'border-color': '@inputBorderColor'\n    }\n}, {\n    className: `.${className}-text`,\n    rnStyleSelector: `${className}.text`,\n    studioStyleSelector: `input[widgettype=\"${widgetType}\"]`,\n    \n    style: {\n        color: '@inputTextColor'\n    }\n}, {\n    className: `.${className}-invalid`,\n    rnStyleSelector: `${className}.invalid`,\n    studioStyleSelector: `input[widgettype=\"${widgetType}\"]`,\n\n    style: {\n        'border-bottom-color': '@inputInvalidBorderColor',\n    }\n}, {\n    className: `.${className}-clear-icon`,\n    rnStyleSelector: `${className}.clearIcon`,\n    studioStyleSelector: '',\n    \n    style: {}\n}, {\n    className: `.${className}-calendar-icon`,\n    rnStyleSelector: `${className}.calendarIcon`,\n    studioStyleSelector: '',\n    \n    style: {}\n}, {\n    className: `.${className}-flotaing-label`,\n    rnStyleSelector: 'app-textarea.floatingLabel',\n    style: {}\n}, {\n    className: `.${className}-active-flotaing-label`,\n    rnStyleSelector: 'app-textarea.activeFloatingLabel',\n    style: {}\n}, {\n    className: `.${className}-action-wrapper`,\n    rnStyleSelector: `${className}.actionWrapper`,\n    style: {}\n}, {\n    className: `.${className}-select-btn`,\n    rnStyleSelector: `${className}.selectBtn`,\n    style: {}\n}, {\n    className: `.${className}-cancel-btn`,\n    rnStyleSelector:  `${className}.cancelBtn`,\n    style: {}\n}, {\n    className: `.${className}-ios-dialog`,\n    rnStyleSelector:  `${className}.dialog`,\n    style: {}\n}, {\n    className: `.${className}-picker-modal-select`,\n    rnStyleSelector: `${className}-picker-modal.selectBtn`,\n    style: {}\n}, {\n    className: `.${className}-picker-modal-cancel`,\n    rnStyleSelector: `${className}-picker-modal.cancelBtn`,\n    style: {}\n}]);\n\nexport default {\n    getStyleDefs: () => getEpochStyles('app-datetime', 'wm-datetime')\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/chart/donut-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-donut-chart',\n        rnStyleSelector: 'app-donut-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-donut-chart-text',\n        rnStyleSelector: 'app-donut-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-donut-chart-title',\n        rnStyleSelector: 'app-donut-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-donut-chart-subtitle',\n        rnStyleSelector: 'app-donut-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-donut-chart-icon',\n        rnStyleSelector: 'app-donut-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-donut-chart-centerlabel',\n        rnStyleSelector: 'app-donut-chart.centerLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-donut-chart-tooltip-container',\n        rnStyleSelector: 'app-donut-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-donut-chart-tooltipx-text',\n        rnStyleSelector: 'app-donut-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-donut-chart-tooltipy-text',\n        rnStyleSelector: 'app-donut-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-donut-chart-tooltip-pointer',\n        rnStyleSelector: 'app-donut-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-donut-chart-skeleton',\n        rnStyleSelector: 'app-donut-chart.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/chart/area-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-area-chart',\n        rnStyleSelector: 'app-area-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-text',\n        rnStyleSelector: 'app-area-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-axis',\n        rnStyleSelector: 'app-area-chart.axis',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-x-axis',\n        rnStyleSelector: 'app-area-chart.xAxis',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-y-axis',\n        rnStyleSelector: 'app-area-chart.yAxis',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-axis-label',\n        rnStyleSelector: 'app-area-chart.axisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-x-axis-label',\n        rnStyleSelector: 'app-area-chart.xAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-y-axis-label',\n        rnStyleSelector: 'app-area-chart.yAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-grid',\n        rnStyleSelector: 'app-area-chart.grid',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-x-grid',\n        rnStyleSelector: 'app-area-chart.xGrid',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-y-grid',\n        rnStyleSelector: 'app-area-chart.yGrid',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },  {\n        className: '.app-area-chart-ticks',\n        rnStyleSelector: 'app-area-chart.ticks',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-x-ticks',\n        rnStyleSelector: 'app-area-chart.xTicks',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-y-ticks',\n        rnStyleSelector: 'app-area-chart.yTicks',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-tick-labels',\n        rnStyleSelector: 'app-area-chart.tickLabels',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-x-tick-labels',\n        rnStyleSelector: 'app-area-chart.xTickLabels',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-y-tick-labels',\n        rnStyleSelector: 'app-area-chart.yTickLabels',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-title',\n        rnStyleSelector: 'app-area-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-subtitle',\n        rnStyleSelector: 'app-area-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-icon',\n        rnStyleSelector: 'app-area-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-area-chart-tooltip-container',\n        rnStyleSelector: 'app-area-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-area-chart-tooltipx-text',\n        rnStyleSelector: 'app-area-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-area-chart-tooltipy-text',\n        rnStyleSelector: 'app-area-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-area-chart-yaxislabel',\n        rnStyleSelector: 'app-area-chart.yAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-area-chart-xaxislabel',\n        rnStyleSelector: 'app-area-chart.xAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },{\n        className: '.app-area-chart-tooltip-pointer',\n        rnStyleSelector: 'app-area-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-area-chart-skeleton',\n        rnStyleSelector: 'app-area-chart.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;\n", "wavemaker-rn-codegen/src/theme/components/chart/bar-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-bar-chart',\n        rnStyleSelector: 'app-bar-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bar-chart-text',\n        rnStyleSelector: 'app-bar-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bar-chart-title',\n        rnStyleSelector: 'app-bar-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bar-chart-subtitle',\n        rnStyleSelector: 'app-bar-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bar-chart-icon',\n        rnStyleSelector: 'app-bar-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bar-chart-tooltip-container',\n        rnStyleSelector: 'app-bar-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bar-chart-tooltipx-text',\n        rnStyleSelector: 'app-bar-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bar-chart-tooltipy-text',\n        rnStyleSelector: 'app-bar-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bar-chart-bar',\n        rnStyleSelector: 'app-bar-chart.bar',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bar-chart-yaxislabel',\n        rnStyleSelector: 'app-bar-chart.yAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bar-chart-xaxislabel',\n        rnStyleSelector: 'app-bar-chart.xAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },{\n        className: '.app-bar-chart-tooltip-pointer',\n        rnStyleSelector: '.app-bar-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bar-chart-skeleton',\n        rnStyleSelector: 'app-bar-chart.skeleton',\n        studioSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;\n", "wavemaker-rn-codegen/src/theme/components/chart/column-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-column-chart',\n        rnStyleSelector: 'app-column-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-column-chart-text',\n        rnStyleSelector: 'app-column-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-column-chart-title',\n        rnStyleSelector: 'app-column-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-column-chart-subtitle',\n        rnStyleSelector: 'app-column-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-column-chart-icon',\n        rnStyleSelector: 'app-column-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-column-chart-tooltip-container',\n        rnStyleSelector: 'app-column-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-column-chart-tooltipx-text',\n        rnStyleSelector: 'app-column-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-column-chart-tooltipy-text',\n        rnStyleSelector: 'app-column-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-column-chart-yaxislabel',\n        rnStyleSelector: 'app-column-chart.yAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-column-chart-xaxislabel',\n        rnStyleSelector: 'app-column-chart.xAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },{\n        className: '.app-column-chart-tooltip-pointer',\n        rnStyleSelector: '.app-column-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-column-chart-skeleton',\n        rnStyleSelector:\".app-column-chart.skeleton\",\n        studioStyleSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/chart/bubble-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-bubble-chart',\n        rnStyleSelector: 'app-bubble-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bubble-chart-text',\n        rnStyleSelector: 'app-bubble-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bubble-chart-title',\n        rnStyleSelector: 'app-bubble-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bubble-chart-subtitle',\n        rnStyleSelector: 'app-bubble-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bubble-chart-icon',\n        rnStyleSelector: 'app-bubble-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-bubble-chart-tooltip-container',\n        rnStyleSelector: 'app-bubble-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bubble-chart-tooltipx-text',\n        rnStyleSelector: 'app-bubble-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bubble-chart-tooltipy-text',\n        rnStyleSelector: 'app-bubble-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bubble-chart-yaxislabel',\n        rnStyleSelector: 'app-bubble-chart.yAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bubble-chart-xaxislabel',\n        rnStyleSelector: 'app-bubble-chart.xAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },{\n        className: '.app-bubble-chart-tooltip-pointer',\n        rnStyleSelector: '.app-bubble-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-bubble-chart-skeleton',\n        rnStyleSelector: 'app-bubble-chart.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/chart/line-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-line-chart',\n        rnStyleSelector: 'app-line-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-line-chart-text',\n        rnStyleSelector: 'app-line-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-line-chart-title',\n        rnStyleSelector: 'app-line-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-line-chart-subtitle',\n        rnStyleSelector: 'app-line-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-line-chart-icon',\n        rnStyleSelector: 'app-line-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-line-chart-tooltip-container',\n        rnStyleSelector: 'app-line-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-line-chart-tooltipx-text',\n        rnStyleSelector: 'app-line-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-line-chart-tooltipy-text',\n        rnStyleSelector: 'app-line-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-line-chart-yaxislabel',\n        rnStyleSelector: 'app-line-chart.yAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-line-chart-xaxislabel',\n        rnStyleSelector: 'app-line-chart.xAxisLabel',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-area-chart-tooltip-pointer',\n        rnStyleSelector: 'app-area-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-line-chart-skeleton',\n        rnStyleSelector: 'app-line-chart.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }\n])\n} as ComponentStyle;\n", "wavemaker-rn-codegen/src/theme/components/chart/pie-chart.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-pie-chart',\n        rnStyleSelector: 'app-pie-chart.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-pie-chart-text',\n        rnStyleSelector: 'app-pie-chart.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-pie-chart-title',\n        rnStyleSelector: 'app-pie-chart.title',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-pie-chart-subtitle',\n        rnStyleSelector: 'app-pie-chart.subHeading',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-pie-chart-icon',\n        rnStyleSelector: 'app-pie-chart.icon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-pie-chart-tooltip-container',\n        rnStyleSelector: 'app-pie-chart.tooltipContainer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-pie-chart-tooltipx-text',\n        rnStyleSelector: 'app-pie-chart.tooltipXText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-pie-chart-tooltipy-text',\n        rnStyleSelector: 'app-pie-chart.tooltipYText',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    },\n    {\n        className: '.app-pie-chart-tooltip-pointer',\n        rnStyleSelector: 'app-pie-chart.tooltipPointer',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-pie-chart-skeleton',\n        rnStyleSelector: 'app-pie-chart.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;\n", "wavemaker-rn-codegen/src/theme/components/basic/modal.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-modal',\n        rnStyleSelector: 'app-modal.root',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-modal-text',\n        rnStyleSelector: 'app-modal.text',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-modal-content',\n        rnStyleSelector: 'app-modal.content',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/progress-circle.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getStyle = (className: string, type: string, color: string): StyleDefinition[] => ([{\n    className: `.${className}.app-progress-circle-bg`,\n    studioStyleSelector: `.app-progress[type=\"${type}\"]>svg path:first-child`,\n    style: {\n        'background-color': `fade(${color}, 60%)`,\n        stroke: `fade(${color}, 60%)`\n    }\n}, {\n    className: `.${className}.app-progress-circle-value`,\n    studioStyleSelector: `.app-progress[type=\"${type}\"]>svg path:nth-child(2)`,\n    \n    style: {\n        color: color,\n        stroke: color\n    }\n}]);\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-progress-circle',\n        rnStyleSelector: 'app-progress-circle.root',\n        studioStyleSelector: '.app-progress',\n        style: {}\n    }, {\n        className: '.app-progress-circle-text',\n        rnStyleSelector: 'app-progress-circle.text',\n        studioStyleSelector: '.app-progress.app-progress-label',\n        style: {}\n    }, {\n        className: '.app-progress-circle-bg',\n        rnStyleSelector: 'app-progress-circle.progressCircle',\n        studioStyleSelector: '.app-progress>svg>path:first-child',\n        style: {\n            'background-color': 'fade(@progressCircleDefaultColor, 60%)',\n            stroke: 'fade(@progressCircleDefaultColor, 60%)'\n        }\n    }, {\n        className: '.app-progress-circle-value',\n        rnStyleSelector: 'app-progress-circle.progressValue',\n        studioStyleSelector: '.app-progress>svg>path:nth-child(2)',\n        style: {\n            color: '@progressCircleDefaultColor',\n            stroke: '@progressCircleDefaultColor'\n        }\n    }, {\n        className: '.app-progress-circle-subtitle',\n        rnStyleSelector: 'app-progress-circle.subTitle',\n        studioStyleSelector: '',\n        style: {\n            color: '@labelTextMutedColor'\n        }\n    },\n    ...getStyle('app-default-progress-circle', 'default', '@progressCircleDefaultColor'),\n    ...getStyle('app-success-progress-circle', 'success', '@progressCircleSuccessColor'),\n    ...getStyle('app-info-progress-circle', 'info', '@progressCircleInfoColor'),\n    ...getStyle('app-danger-progress-circle', 'danger', '@progressCircleDangerColor'),\n    ...getStyle('app-warning-progress-circle', 'warning', '@progressCircleWarningColor'),\n    ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/message.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst rnStyleToStudio = {\n    'success-message': 'alert-success',\n    'error-message': 'alert-danger',\n    'warning-message': 'alert-warning',\n    'info-message': 'alert-info',\n    'loading-message': 'alert-loading'\n} as any;\n\nconst getStyle = (className: string, bgColor: string, closeBtnColor: string, iconcolor: string, textcolor: string, borderColor = 'transparent') => {\n    const studioClass = rnStyleToStudio[className];\n    return [{\n        className: `.${className}.app-message`,\n        studioStyleSelector: `.${studioClass}.app-message`,\n        style: {\n            'background-color': bgColor,\n            'border-color': borderColor\n        }\n    }, {\n        className: `.${className}.app-message-text`,\n        studioStyleSelector: `.${studioClass}.app-message span`,\n        style: {\n            color: textcolor\n        }\n    }, {\n        className: `.${className}.app-message-icon .app-icon-text`,\n        studioStyleSelector: `.${studioClass}.app-message .icon`,\n        style: {\n            color: iconcolor\n        }\n    }, {\n        className: `.${className}.app-message-closebtn .app-button .app-button-icon .app-icon-text`,\n        studioStyleSelector: `.${studioClass}.app-message button.close`,\n        style: {\n            color: closeBtnColor\n        }\n    }];\n};\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-message',\n        rnStyleSelector: 'app-message.root',\n        studioStyleSelector: '.app-message',\n        style: {}\n    }, {\n        className: '.app-message-text',\n        rnStyleSelector: 'app-message.text',\n        studioStyleSelector: '.app-message span',\n        style: {}\n    }, {\n        className: '.app-message-title',\n        rnStyleSelector: 'app-message.title',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-message-text-wrapper',\n        rnStyleSelector: 'app-message.message',\n        studioStyleSelector: '.app-message >div:nth-child(2)',\n        style: {}\n    }, {\n        className: '.app-message-icon',\n        rnStyleSelector: 'app-message.icon',\n        studioStyleSelector: '.app-message ',\n        style: {}\n    }, {\n        className: '.app-message-closebtn',\n        rnStyleSelector: 'app-message.closeBtn',\n        studioStyleSelector: '.app-message button.close',\n        style: {}\n    },\n    ...getStyle('success-dark-message',\n        '@messageSuccessColor',\n        '@defaultColorF',\n        '@defaultColorF',\n        '@defaultColorF'\n    ),\n    ...getStyle('error-dark-message',\n        '@messageErrorColor',\n        '@defaultColorF',\n        '@defaultColorF',\n        '@defaultColorF'\n    ),\n    ...getStyle('warning-dark-message',\n        '@messageWarningColor',\n        '@defaultColorF',\n        '@defaultColorF',\n        '@defaultColorF'\n    ),\n    ...getStyle('info-dark-message',\n        '@messageInfoColor',\n        '@defaultColorF',\n        '@defaultColorF',\n        '@defaultColorF'\n    ),\n    ...getStyle('loading-dark-message',\n        '@messageLoadingColor',\n        '@defaultColorF',\n        '@defaultColorF',\n        '@defaultColorF',\n    ),\n    ...getStyle('success-light-message',\n        '@defaultColorF',\n        '@defaultColor6',\n        '@messageSuccessColor',\n        '@defaultColor6',\n        '@defaultColorD'\n    ),\n    ...getStyle('error-light-message',\n        '@defaultColorF',\n        '@defaultColor6',\n        '@messageErrorColor',\n        '@defaultColor6',\n        '@defaultColorD'\n    ),\n    ...getStyle('warning-light-message',\n        '@defaultColorF',\n        '@defaultColor6',\n        '@messageWarningColor',\n        '@defaultColor6',\n        '@defaultColorD'\n    ),\n    ...getStyle('info-light-message',\n        '@defaultColorF',\n        '@defaultColor6',\n        '@messageInfoColor',\n        '@defaultColor6',\n        '@defaultColorD'\n    ),\n    ...getStyle('loading-light-message',\n        '@defaultColorF',\n        '@defaultColor6',\n        '@messageLoadingColor',\n        '@defaultColor6',\n        '@defaultColorD'\n    ),\n    ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/skeleton.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-skeleton',\n        rnStyleSelector: 'app-skeleton.root',\n        studioStyleSelector: '.app-skeleton.root',\n        style: {}\n    }, {\n        className: '.app-skeleton-gradient',\n        rnStyleSelector: 'app-skeleton.gradient',\n        studioStyleSelector: '.app-skeleton-gradient',\n        style: {}\n    }, {\n        className: '.app-skeleton-gradient-foreground',\n        rnStyleSelector: 'app-skeleton.gradientForeground',\n        studioStyleSelector: '.app-skeleton-gradient-foreground',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/label.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\nconst getLabelStyle = (className: string, bgColor: string, color: string): StyleDefinition[] => [{\n    className: `.${className}.app-label`,\n    style: {\n        'background-color': bgColor,\n    }\n},{\n    className: `.${className}.app-label-text`,\n    style: {\n        'color': color,\n    }\n}];\n\nconst getTextStyle = (className: string, color: string): StyleDefinition[] => [{\n    className: `.${className}.app-label-text`,\n    style: {\n        'color': color,\n    }\n}];\n\nconst getHeadingStyles = (className: string, fontSize: string) => [{\n    className: `.${className}.app-label-text`,\n    style: {\n        'font-size': fontSize,\n        'color': '@labelHeaderColor',\n    }\n}];\n\nexport default {\n    getStyleDefs: () => ([{\n            className: '.app-label',\n            rnStyleSelector: 'app-label.root',\n            studioStyleSelector: '.app-label',\n            \n            style: {\n                color: '@labelDefaultColor'\n            }\n        }, {\n            className: '.app-label-text',\n            rnStyleSelector: 'app-label.text',\n            studioStyleSelector: '.app-label',\n            \n            style: {}\n        }, {\n            className: '.app-label-asterisk',\n            rnStyleSelector: 'app-label.asterisk',\n            studioStyleSelector: '.app-label.required:after',\n            \n            style: {\n                color: '@labelAsteriskColor'\n            }\n        }, {\n            className: '.app-label-skeleton',\n            rnStyleSelector: 'app-label.skeleton',\n            studioStyleSelector: '.app-label-skeleton',\n            style: {}\n        }, {\n            className: '.app-label-link',\n            rnStyleSelector: 'app-label.link',\n            style: {}\n        },\n        ...getLabelStyle('label-danger', '@labelDangerColor', '@labelDangerContrastColor'),\n        ...getLabelStyle('label-primary', '@labelPrimaryColor', '@labelPrimaryContrastColor'),\n        ...getLabelStyle('label-default', '@labelDefaultColor', '@labelDefaultContrastColor'),\n        ...getLabelStyle('label-success', '@labelSuccessColor', '@labelSuccessContrastColor'),\n        ...getLabelStyle('label-warning', '@labelWarningColor', '@labelWarningContrastColor'),\n        ...getLabelStyle('label-info', '@labelInfoColor', '@labelInfoContrastColor'),\n\n        ...getTextStyle('text-danger', '@labelTextDangerColor'),\n        ...getTextStyle('text-primary', '@labelTextPrimaryColor'),\n        ...getTextStyle('text-success', '@labelTextSuccessColor'),\n        ...getTextStyle('text-warning', '@labelTextWarningColor'),\n        ...getTextStyle('text-info', '@labelTextInfoColor'),\n\n        ...getHeadingStyles('h1', '@heading1FontSize'),\n        ...getHeadingStyles('h2', '@heading2FontSize'),\n        ...getHeadingStyles('h3', '@heading3FontSize'),\n        ...getHeadingStyles('h4', '@heading4FontSize'),\n        ...getHeadingStyles('h5', '@heading5FontSize'),\n        ...getHeadingStyles('h6', '@heading6FontSize'), {\n            className: '.text-muted.app-label-text',\n            \n            style: {\n                color: '@labelTextMutedColor'\n            }\n        }, \n    ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/lottie.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-lottie',\n        rnStyleSelector: 'app-lottie.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-lottie-text',\n        rnStyleSelector: 'app-lottie.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-lottie-content',\n        rnStyleSelector: 'app-lottie.content',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/search.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-search',\n        rnStyleSelector: 'app-search.root',\n        studioStyleSelector: '.app-search',\n        style: {}\n    }, {\n        className: '.app-search-text',\n        rnStyleSelector: 'app-search.text',\n        studioStyleSelector: '.app-search>input.app-textbox',\n        style: {\n            'border-color': '@searchBorderColor',\n            'background-color': '@searchDropdownBackgroundColor',\n        }\n    }, {\n        className: '.app-search-invalid',\n        rnStyleSelector: 'app-search.invalid',\n        studioStyleSelector: '.app-search>input.app-textbox.invalid',\n        style: {\n            'border-bottom-color': '@inputInvalidBorderColor',\n        }\n    }, {\n        className: '.app-search-dropdown-content',\n        rnStyleSelector: 'app-search.dropDownContent',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-search-text-wrapper',\n        rnStyleSelector: 'app-search.searchInputWrapper',\n        studioStyleSelector: '.app-search',\n        style: {}\n    }, {\n        className: '.app-search-btn',\n        rnStyleSelector: 'app-search.searchButton',\n        studioStyleSelector: '.app-search .input-group-addon',\n        style: {\n            'background-color': '@searchButtonColor'\n        }\n    }, {\n        className: '.app-search-btn .app-button-icon .app-icon-text',\n        studioStyleSelector: '.app-search .input-group-addon',\n        style: {\n            color: '@searchButtonTextColor'\n        }\n    }, {\n        className: '.app-search-item',\n        rnStyleSelector: 'app-search.searchItem',\n        studioStyleSelector: '',\n        style: {\n            'border-bottom-color': '@searchItemBorderColor',\n            color: '@searchItemTextColor'\n        }\n    }, {\n        className: '.app-search-item-text',\n        rnStyleSelector: 'app-search.searchItemText',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-search-complete-item',\n        rnStyleSelector: 'app-search.dataCompleteItem.root',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-search-placeholder',\n        rnStyleSelector: 'app-search.placeholderText',\n        studioStyleSelector: '',\n        style: {\n            color: '@inputPlaceholderColor'\n        }\n    }, {\n        className: '.app-search-modal',\n        rnStyleSelector: 'app-search.modal',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-search-modal-content',\n        rnStyleSelector: 'app-search.modalContent',\n        studioStyleSelector: '',\n        style: {}\n    }, ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/buttongroup.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-buttongroup',\n        rnStyleSelector: 'app-buttongroup.root',\n        studioStyleSelector: '.app-button-group',\n        style: {\n            'border-color': '@buttonGrpBorderColor',\n            'background-color': '@buttonGrpBgColor'\n        }\n    }, {\n        className: '.btn-group-child',\n        rnStyleSelector: 'btn-group-child',\n        studioStyleSelector: '.app-button-group>.app-button',\n        style: {\n            'border-color': '@buttonGrpBorderColor'\n        }\n    }, {\n        className: '.btn-group-first-child',\n        rnStyleSelector: 'btn-group-first-child',\n        studioStyleSelector: '.app-button-group>.app-button:first-child',\n        style: {\n            'border-color': '@buttonGrpBorderColor'\n        }\n    }, {\n        className: '.app-buttongroup-skeleton',\n        rnStyleSelector: 'app-buttongroup.skeleton',\n        studioStyleSelector: '.app-buttongroup-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/spinner.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-spinner',\n        rnStyleSelector: 'app-spinner.root',\n        studioStyleSelector: '.app-spinner',\n        style: {}\n    }, {\n        className: '.app-spinner-text',\n        rnStyleSelector: 'app-spinner.text',\n        studioStyleSelector: '.app-spinner .spinner-text',\n        style: {}\n    }, {\n        className: '.app-spinner-image',\n        rnStyleSelector: 'app-spinner.image',\n        style: {}\n    }, {\n        className: '.app-spinner-icon',\n        rnStyleSelector: 'app-spinner.icon',\n        studioStyleSelector: '.app-spinner .spinner-image',\n        style: {}\n    }, {\n        className: '.app-spinner-icon .app-icon-text',\n        studioStyleSelector: '.app-spinner .spinner-image',\n        style: {\n            color: '@spinnerIconColor'\n        }\n    },{\n        className: '.app-spinner-lottie',\n        rnStyleSelector: 'app-spinner.lottie',\n        studioStyleSelector: '.app-spinner .spinner-lottie',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/audio.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-audio',\n        rnStyleSelector: 'app-audio.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-audio-text',\n        rnStyleSelector: 'app-audio.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-audio-skeleton',\n        rnStyleSelector: 'app-audio.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-audio-text-skeleton',\n        rnStyleSelector: 'app-audio.textSkeleton',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/progress-bar.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getStyle = (className: string, type: string, color: string) => ([{\n    className: `.${className}.app-progress-bar-bg`,\n    rnStyleSelector: `app-${type}-progress-bar.progressBar`,\n    studioStyleSelector: `.app-progress[type=\"${type}\"]`,\n    style: {\n        'background-color': `fade(${color}, 20%)`\n    }\n}, {\n    className: `.${className}.app-progress-bar-value`,\n    rnStyleSelector: `app-${type}-progress-bar.progressValue`,\n    studioStyleSelector: `.app-progress >.progress-bar-${type}`,\n    \n    style: {\n        color: color\n    }\n}]);\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-progress-bar',\n        rnStyleSelector: 'app-progress-bar.root',\n        studioStyleSelector: '.app-progress',\n        style: {}\n    }, {\n        className: '.app-progress-bar-text',\n        rnStyleSelector: 'app-progress-bar.text',\n        studioStyleSelector: '.app-progress.app-progress-label',\n        style: {}\n    }, {\n        className: '.app-progress-bar-bg',\n        rnStyleSelector: 'app-progress-bar.progressBar',\n        studioStyleSelector: '.app-progress',\n        style: {}\n    }, {\n        className: '.app-progress-bar-value',\n        rnStyleSelector: 'app-progress-bar.progressValue',\n        studioStyleSelector: '.app-progress',\n        style: {}\n    },\n    ...getStyle('app-default-progress-bar', 'default', '@progressBarDefaultColor'),\n    ...getStyle('app-success-progress-bar', 'success', '@progressBarSuccessColor'),\n    ...getStyle('app-info-progress-bar', 'info', '@progressBarInfoColor'),\n    ...getStyle('app-danger-progress-bar', 'danger', '@progressBarDangerColor'),\n    ...getStyle('app-warning-progress-bar', 'warning', '@progressBarWarningColor'),\n    ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/picture.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-picture',\n        rnStyleSelector: 'app-picture.root',\n        studioStyleSelector: '.app-picture',\n        style: {}\n    }, {\n        className: '.app-picture-skeleton',\n        rnStyleSelector: 'app-picture.skeleton',\n        studioStyleSelector: '.app-picture-skeleton',\n        style: {}\n    }, {\n        className: '.thumbnail-image.app-picture',\n        studioStyleSelector: '.img-thumbnail.app-picture',\n        style: {\n            'background-color': '@pictureThumbBgColor',\n            'border-color': '@pictureThumbBorderColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/icon.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-icon',\n        rnStyleSelector: 'app-icon.root',\n        studioStyleSelector: '.app-icon',\n        style: {}\n    }, {\n        className: '.app-icon-text',\n        rnStyleSelector: 'app-icon.text',\n        studioStyleSelector: '.app-icon+.app-label',\n        style: {}\n    }, {\n        className: '.app-icon-shape',\n        rnStyleSelector: 'app-icon.icon',\n        studioStyleSelector: '.app-icon',\n        style: {}\n    }, {\n        className: '.app-icon-skeleton',\n        rnStyleSelector: 'app-icon.skeleton',\n        studioStyleSelector: '.app-icon-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/button.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getButtonStyle = (className: string, bgColor: string, color: string, borderColor = bgColor ): StyleDefinition[] => ([{\n    className: `.${className}.app-button`,\n    style: {\n        'border-color': borderColor,\n        'background-color': bgColor\n    }\n}, {\n    className: `.${className}.app-button-text`,\n    style: {\n        color: color\n    }\n}, {\n    className: `.${className}.app-button-badge`,\n    style: {\n        'background-color': color,\n        'color': bgColor,\n        'border-color': bgColor\n    }\n}, {\n    className: `.${className}.app-button-icon .app-icon`,\n    style: {\n        color: color\n    }\n}]);\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-button',\n        rnStyleSelector: 'app-button.root',\n        studioStyleSelector: '.app-button',\n        style: {}\n    }, {\n        className: '.app-button-text',\n        rnStyleSelector: 'app-button.text',\n        studioStyleSelector: '.app-button>.btn-caption',\n        style: {}\n    }, {\n        className: '.app-button-content',\n        rnStyleSelector: 'app-button.content',\n        studioStyleSelector: '.app-button',\n        style: {}\n    }, {\n        className: '.app-button-badge',\n        rnStyleSelector: 'app-button.badge',\n        studioStyleSelector: '.app-button>.badge',\n        style: {\n            'background-color': '@buttonBadgeBackgroundColor',\n            'color': '@buttonBadgeTextColor',\n            'border-color': '@buttonBadgeTextColor'\n        }\n    }, {\n        className: '.app-button-icon',\n        rnStyleSelector: 'app-button.icon',\n        studioStyleSelector: '.app-button ',\n        style: {}\n    }, {\n        className: '.app-button-skeleton',\n        rnStyleSelector: 'app-button.skeleton',\n        studioStyleSelector: '.app-button-skeleton',\n        style: {}\n    },\n    ...getButtonStyle('btn-default',  '@buttonDefaultColor', '@buttonDefaultTextColor', '@buttonBorderColor'),\n    ...getButtonStyle('btn-info',  '@buttonInfoColor', '@buttonInfoTextColor'),\n    ...getButtonStyle('btn-primary',  '@buttonPrimaryColor', '@buttonPrimaryTextColor'),\n    ...getButtonStyle('btn-secondary',  '@buttonSecondaryColor', '@buttonSecondaryTextColor', '@buttonSecondaryTextColor'),\n    ...getButtonStyle('btn-danger',  '@buttonDangerColor', '@buttonDangerTextColor'),\n    ...getButtonStyle('btn-success',  '@buttonSuccessColor', '@buttonSuccessTextColor'),\n    ...getButtonStyle('btn-warning',  '@buttonWarningColor', '@buttonWarningTextColor'),\n    ...getButtonStyle('btn-link',  '@buttonLinkColor', '@buttonLinkTextColor'),\n    ...getButtonStyle('btn-dark',  '@buttonDarkColor', '@buttonDarkTextColor'),\n    ...getButtonStyle('btn-light',  '@buttonLightColor', '@buttonLightTextColor'),\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/anchor.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getLinkStyles = (className: string, color: string): StyleDefinition[] => {\n    return [ {\n        className: `.${className}.app-anchor-text`,\n        style: {\n            color: color\n        }\n    }, {\n        className: `.${className}.app-anchor-icon .app-icon`,\n        style: {\n            color: color\n        }\n    },  {\n        className: `.${className}.app-anchor-badge`,\n        style: {\n            'background-color': `fade(${color}, 20%)`,\n            color: color\n        }\n    },]\n};\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-anchor',\n        rnStyleSelector: 'app-anchor.root',\n        studioStyleSelector: '.app-anchor',\n        style: {}\n    }, {\n        className: '.app-anchor-text',\n        rnStyleSelector: 'app-anchor.text',\n        studioStyleSelector: '.app-anchor >.anchor-caption',\n        style: {\n            color: '@linkDefaultColor'\n        }\n    }, {\n        className: '.app-anchor-badge',\n        rnStyleSelector: 'app-anchor.badge',\n        studioStyleSelector: '.app-anchor >.badge',\n        style: {}\n    }, {\n        className: '.app-anchor-icon',\n        rnStyleSelector: 'app-anchor.icon',\n        studioStyleSelector: '.app-anchor ',\n    }, {\n        className: '.app-anchor-icon.app-icon',\n        style: {\n            color: '@linkDefaultColor'\n        }\n    }, {\n        className: '.app-anchor-skeleton',\n        rnStyleSelector: 'app-anchor.skeleton',\n        studioStyleSelector: '.app-anchor-skeleton',\n        style: {}\n    },\n    ...getLinkStyles('link-primary', '@linkPrimaryColor'),\n    ...getLinkStyles('link-secondary', '@linkSecondaryColor'),\n    ...getLinkStyles('link-success', '@linkSuccessColor'),\n    ...getLinkStyles('link-danger', '@linkDangerColor'),\n    ...getLinkStyles('link-warning', '@linkWarningColor'),\n    ...getLinkStyles('link-info', '@linkInfoColor'),\n    ...getLinkStyles('link-light', '@linkLightColor'),\n    ...getLinkStyles('link-dark', '@linkDarkColor')\n    ])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/custom.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-custom',\n        rnStyleSelector: 'app-custom.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-custom-text',\n        rnStyleSelector: 'app-custom.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/basic/video.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-video',\n        rnStyleSelector: 'app-video.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-video-text',\n        rnStyleSelector: 'app-video.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-video-skeleton',\n        rnStyleSelector: 'app-video.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/navigation/navitem.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-navitem',\n        rnStyleSelector: 'app-navitem.root',\n        studioStyleSelector: '',\n        style: {\n            'border-color': '@navbarBorderColor'\n        }\n    }, {\n        className: '.app-navitem-anchor',\n        rnStyleSelector: 'app-navitem.navAnchorItem',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-navitem-caret',\n        rnStyleSelector: 'app-navitem.caretIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-navitem-caret .app-icon-text',\n        studioStyleSelector: '',\n        style: {\n            color: '@navbarCaretColor'\n        }\n    }, {\n        className: '.app-navitem-active.app-navitem',\n        style: {\n            'background-color' : '@navitemActiveBackgroundColor'\n        }\n    }, {\n        className: '.app-navitem-active.app-navitem-anchor .app-anchor-text',\n        style: {\n            color: '@navitemActiveTextColor'\n        }\n    }, {\n        className: '.app-navitem-active.app-navitem-anchor .app-anchor-icon .app-icon-shape',\n        style: {\n            color: '@navitemActiveIconColor'\n        }\n    }, {\n        className: '.app-navitem-child.app-navitem',\n        style: {\n            'background-color' : '@navitemChildBackgroundColor'\n        }\n    }, {\n        className: '.app-navitem-child.app-navitem-anchor .app-anchor-text',\n        style: {\n            color: '@navitemChildTextColor'\n        }\n    }, {\n        className: '.app-navitem-child.app-navitem-anchor .app-anchor-icon .app-icon-shape',\n        style: {\n            color: '@navitemChildIconColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/navigation/appnavbar.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-appnavbar',\n        rnStyleSelector: 'app-appnavbar.root',\n        studioStyleSelector: '.app-mobile-navbar',\n        style: {\n            'background-color': '@navbarBackgroundColor'\n        }\n    }, {\n        className: '.app-appnavbar-action',\n        rnStyleSelector: 'app-appnavbar.action',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-left a',\n        style: {}\n    }, {\n        className: '.app-appnavbar-left-section',\n        rnStyleSelector: 'app-appnavbar.leftSection',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-appnavbar-middle-section',\n        rnStyleSelector: 'app-appnavbar.middleSection',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-appnavbar-right-section',\n        rnStyleSelector: 'app-appnavbar.rightSection',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-appnavbar-left-icon',\n        rnStyleSelector: 'app-appnavbar.leftnavIcon',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-left li[ng-if=\"showLeftnav\"] a',\n        style: {}\n    }, {\n        className: '.app-appnavbar-left-icon .app-icon',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-left li[ng-if=\"showLeftnav\"] a',\n        style: {\n            'font-size': '@navbarIconSize',\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.app-appnavbar-back-icon',\n        rnStyleSelector: 'app-appnavbar.backIcon',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-left li[ng-if=\"backbutton\"] a.btn-back',\n        style: {}\n    }, {\n        className: '.app-appnavbar-back-icon .app-icon',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-left li[ng-if=\"backbutton\"] a.btn-back',\n        style: {\n            'font-size': '@navbarIconSize',\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.app-appnavbar-image',\n        rnStyleSelector: 'app-appnavbar.image',\n        studioStyleSelector: '.app-mobile-navbar .brand-image',\n        style: {\n            width: '@navbarImageSize',\n            height: '@navbarImageSize'\n        }\n    }, {\n        className: '.app-appnavbar-content',\n        rnStyleSelector: 'app-appnavbar.content',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-center',\n        style: {\n            'color': '@navbarTextColor',\n            'font-size': 'unit(@navbarFontSize, px)'\n        }\n    },  {\n        className: '.app-appnavbar-badge',\n        rnStyleSelector: 'app-appnavbar.badge',\n        style: {\n            'background-color': '@titleBadgeBackgroundColor',\n            'color': '@titleBadgeTextColor',\n        }\n    }, {\n        className: '.navbar-anchor',\n        rnStyleSelector: 'navbarAnchorItem.root',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-anchor',\n        style: {}\n    }, {\n        className: '.navbar-anchor-text',\n        rnStyleSelector: 'navbarAnchorItem.text',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-anchor .anchor-caption',\n        style: {\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbar-anchor-icon',\n        rnStyleSelector: 'navbarAnchorItem.icon.text',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-anchor .app-icon',\n        style: {\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbar-button-icon',\n        rnStyleSelector: 'navbarButton.icon.text',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-button',\n        style: {\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbar-button-text',\n        rnStyleSelector: 'navbarButton.text',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-button .app-icon',\n        style: {\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbarMenu.app-menu-trigger',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-menu',\n        style: {\n            'background-color': 'transparent'\n        }\n    }, {\n        className: '.navbarMenu.app-menu-trigger .app-anchor-icon .app-icon',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-menu .app-anchor .app-icon',\n        style: {\n            'font-size': '@navbarIconSize',\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbarMenu.app-menu-trigger .app-anchor-text',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-menu .app-anchor .caption',\n        style: {\n            'font-size': '@navbarIconSize',\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbarPopover.app-popover-link .app-anchor-icon .app-icon',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-anchor[widgettype=\"wm-popover\"] .app-icon',\n        style: {\n            'font-size': '@navbarIconSize',\n            color: '@navbarTextColor'\n        }\n    }, {\n        className: '.navbarPopover.app-popover-link .app-anchor-text',\n        studioStyleSelector: '.app-mobile-navbar .mobile-navbar-right .app-anchor[widgettype=\"wm-popover\"] .caption',\n        style: {\n            'font-size': '@navbarIconSize',\n            color: '@navbarTextColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/navigation/basenav.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-basenav',\n        rnStyleSelector: 'app-basenav.root',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/navigation/popover.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-popover',\n        rnStyleSelector: 'app-popover.popover',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@popoverBackgroundColor'\n        }\n    }, {\n        className: '.app-popover-title',\n        rnStyleSelector: 'app-popover.title',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@popoverTitleBackgroundColor',\n            color: '@popoverTitleColor'\n        }\n    }, {\n        className: '.app-popover-link',\n        rnStyleSelector: 'app-popover.link',\n        studioStyleSelector: 'a[widgettype=\"wm-popover\"]',\n    }, {\n        className: '.app-popover-content',\n        rnStyleSelector: 'app-popover.popoverContent.root',\n        studioStyleSelector: '',\n    }, {\n        className: '.app-popover-modal-content',\n        rnStyleSelector: 'app-popover.modalContent',\n        studioStyleSelector: '',\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/navigation/navbar.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-navbar',\n        rnStyleSelector: 'app-navbar.nav',\n        studioStyleSelector: '.app-nav',\n        style: {}\n    }, {\n        className: '.app-navbar-item',\n        rnStyleSelector: 'app-navbar.navitem',\n        studioStyleSelector: '.app-nav .app-nav-item',\n        style: {}\n    },  {\n        className: '.app-navbar-child-nav',\n        rnStyleSelector: 'app-navbar.childNav',\n        studioStyleSelector: '.app-nav .app-nav-item .app-nav',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/navigation/menu.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-menu',\n        rnStyleSelector: 'app-menu.root',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@popoverBackgroundColor'\n        }\n    }, {\n        className: '.app-menu-trigger',\n        rnStyleSelector: 'app-menu.link',\n        studioStyleSelector: '.app-menu >.app-anchor',\n    },  {\n        className: '.app-menu-trigger .app-anchor-icon .app-icon',\n        studioStyleSelector: '.app-menu >.app-anchor',\n        style: {\n            color: '@menuIconColor'\n        }\n    },  {\n        className: '.app-menu-trigger .app-anchor-text',\n        studioStyleSelector: '.app-menu >.app-anchor',\n        style: {\n            color: '@menuTextColor'\n        }\n    }, {\n        className: '.app-menu-content',\n        rnStyleSelector: 'app-menu.menu',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@menuBackgroundColor'\n        }\n    }, {\n        className: '.app-menu-item',\n        rnStyleSelector: 'app-menu.menuItem',\n        studioStyleSelector: '',\n    }, {\n        className: '.app-menu-item .app-anchor',\n        style: {\n            'border-bottom-color': '@menuItemBorderColor'\n        }\n    }, {\n        className: '.app-menu-item .app-anchor-icon .app-icon-shape',\n        style: {\n            color: '@menuItemIconColor'\n        }\n    }, {\n        className: '.app-menu-item .app-anchor-text',\n        style: {\n            color: '@menuItemTextColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/tile.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getTileBgStyles = (className: string, color: string) => {\n    return {\n        className: `.${className}.app-tile`,\n        style: {\n            'background-color': color\n        }\n    };\n  };\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-tile',\n        rnStyleSelector: 'app-tile.root',\n        studioStyleSelector: '.app-tile',\n        style: {}\n    },\n    {\n        className: \".app-tile-skeleton\",\n        rnStyleSelector: \"app-tile.skeleton\",\n        studioStyleSelector: \".app-tile-skeleton\",\n        style: {}\n    },\n    getTileBgStyles('bg-danger', '@tileDangerColor'),\n    getTileBgStyles('bg-info', '@tileInfoColor'),\n    getTileBgStyles('bg-primary', '@tilePrimaryColor'),\n    getTileBgStyles('bg-success', '@tileSuccessColor'),\n    getTileBgStyles('bg-warning', '@tileWarningColor'),\n    {\n        className: `.well.app-tile`,\n        style: {\n            'background-color': '@tileWellbgColor',\n            'border-color': '@tileWellBorderColor'\n        }\n    },\n    {\n        className: '.tile-template-text',\n        rnStyleSelector: '.tile-template-text.text',\n        studioStyleSelector: '.tile-template-text',\n        style: {\n            color: '@primaryContrastColor'\n        }\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/tabs.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-tabs',\n        rnStyleSelector: 'app-tabs.root',\n        studioStyleSelector: '.app-tabs',\n        style: {\n            'border-color': '@tabBorderColor'\n        }\n    }, {\n        className: '.app-tabs-text',\n        rnStyleSelector: 'app-tabs.text',\n        studioStyleSelector: '.app-tabs',\n        style: {}\n    },  {\n        className: '.app-tabs-header',\n        rnStyleSelector: 'app-tabs.tabHeader',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-tabs-content',\n        rnStyleSelector: 'app-tabs.tabContent',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/wizard.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-wizard',\n        rnStyleSelector: 'app-wizard.root',\n        studioStyleSelector: '.app-wizard',\n        style: {\n            'background-color': '@wizardBackgroundColor'\n        }\n    }, {\n        className: '.app-wizard-text',\n        rnStyleSelector: 'app-wizard.text',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-header',\n        rnStyleSelector: 'app-wizard.wizardHeader',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading',\n        style: {}\n    }, {\n        className: '.app-wizard-step-wrapper',\n        rnStyleSelector: 'app-wizard.stepWrapper',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading .app-wizard-step',\n        style: {}\n    }, {\n        className: '.app-wizard-step-title',\n        rnStyleSelector: 'app-wizard.stepTitle',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading .step-title',\n        style: {\n            color: '@wizardStepTitleColor'\n        }\n    },{\n        className: '.app-wizard-step-sub-title',\n        rnStyleSelector: 'app-wizard.stepSubTitle',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading .step-sub-title',\n        style: {\n            color: '@wizardStepTitleColor'\n        }\n    }, {\n        className: '.app-wizard-progress-circle',\n        rnStyleSelector: 'app-wizard.progressCircle',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-popover',\n        rnStyleSelector: 'app-wizard.popover',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-menu-label',\n        rnStyleSelector: 'app-wizard.stepMenuLabel',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-menu-active-label',\n        rnStyleSelector: 'app-wizard.stepMenuActiveLabel',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-menu-icon',\n        rnStyleSelector: 'app-wizard.stepMenuIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-menu-active-icon',\n        rnStyleSelector: 'app-wizard.stepMenuActiveIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-menu',\n        rnStyleSelector: 'app-wizard.stepMenu',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step-menu-active',\n        rnStyleSelector: 'app-wizard.activeStepMenu',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-wizard-step',\n        rnStyleSelector: 'app-wizard.step',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading .app-wizard-step',\n        style: {\n            'background-color': '@wizardBackgroundColor',\n            'color': '@wizardStepColor',\n            'border-color': '@wizardStepColor'\n        }\n    }, {\n        className: '.app-wizard-active-step',\n        rnStyleSelector: 'app-wizard.activeStep',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading .app-wizard-step.current a .wizard-step-number',\n        style: {\n            'background-color': '@wizardStepActiveColor',\n            'border-color': '@wizardStepActiveColor',\n            'color': '@wizardActiveStepColor'\n        }\n    }, {\n        className: '.app-wizard-done-step',\n        rnStyleSelector: 'app-wizard.doneStep',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@wizardStepDoneColor',\n            'border-color': '@wizardDoneStepColor',\n            'color': '@wizardStepDoneColor'\n        }\n    },  {\n        className: '.app-wizard-step-icon',\n        rnStyleSelector: 'app-wizard.stepIcon',\n        studioStyleSelector: '.app-wizard-step-icon .no-studio-class',\n        style: {}\n    }, {\n        className: '.app-wizard-step-icon .app-icon-shape',\n        style: {}\n    }, {\n        className: '.app-wizard-body',\n        rnStyleSelector: 'app-wizard.wizardBody',\n        studioStyleSelector: '.app-wizard .app-wizard-body',\n        style: {\n            'border-color': '@wizardBorderColor'\n        }\n    }, {\n        className: '.app-wizard-footer',\n        rnStyleSelector: 'app-wizard.wizardFooter',\n        studioStyleSelector: '.app-wizard >.app-wizard-actions',\n        style: {}\n    }, {\n        className: '.app-wizard-action',\n        rnStyleSelector: 'app-wizard.wizardActions',\n        studioStyleSelector: '.app-wizard >.app-wizard-actions .app-button',\n        style: {}\n    }, {\n        className: '.app-wizard-next-btn',\n        rnStyleSelector: 'app-wizard.nextButton',\n        studioStyleSelector: '.app-wizard >.app-wizard-actions .app-button.btn-primary',\n    },  {\n        className: '.app-wizard-prev-btn',\n        rnStyleSelector: 'app-wizard.prevButton',\n    }, {\n        className: '.app-wizard-cancel-btn',\n        rnStyleSelector: 'app-wizard.cancelButton',\n    }, {\n        className: '.app-wizard-next-btn .app-button',\n        style: {\n            'background-color': '@wizardNextBtnColor',\n            'border-color': '@wizardNextBtnColor'\n        }\n    }, {\n        className: '.app-wizard-done-btn',\n        rnStyleSelector: 'app-wizard.doneButton',\n        studioStyleSelector: '.app-wizard >.app-wizard-actions .app-button.btn-success',\n    }, {\n        className: '.app-wizard-done-btn .app-button',\n        style: {\n            'background-color': '@wizardDoneBtnColor'\n        }\n    }, {\n        className: '.app-wizard-skip-link',\n        rnStyleSelector: 'app-wizard.skipLink.root',\n        studioStyleSelector: '.app-wizard >.app-wizard-actions .app-wizard-skip',\n        style: {}\n    },  {\n        className: '.app-wizard-step-connector',\n        rnStyleSelector: 'app-wizard.stepConnector',\n        studioStyleSelector: '.no-studio-class',\n        style: {\n            'background-color': '@wizardStepConnectorColor'\n        }\n    }, {\n        className: '.app-wizard-step-counter',\n        rnStyleSelector: 'app-wizard.stepCounter',\n        studioStyleSelector: '.app-wizard >.app-wizard-heading .app-wizard-step .wizard-step-number .count',\n        style: {\n            color: '@wizardStepColor'\n        }\n    },  {\n        className: '.app-wizard-active-step-counter',\n        rnStyleSelector: 'app-wizard.activeStepCounter',\n        style: {\n        }\n    }, {\n        className: '.app-wizard-number-text-step-connector',\n        rnStyleSelector: 'app-wizard.numberTextStepConnector',\n        studioStyleSelector: '',\n        style: {\n            color: '@wizardStepColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/linearlayout.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-linearlayout',\n        rnStyleSelector: 'app-linearlayout.root',\n        studioStyleSelector: '.app-linear-layout',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/layoutgrid.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-layoutgrid',\n        rnStyleSelector: 'app-layoutgrid.root',\n        studioStyleSelector: '.app-grid-layout',\n        style: {}\n    }, {\n        className: '.app-layoutgrid-text',\n        rnStyleSelector: 'app-layoutgrid.text',\n        studioStyleSelector: '.app-grid-layout',\n        style: {}\n    }, {\n        className: '.table.app-layoutgrid',\n        style: {\n            'background-color': '@layoutGridBgColor',\n            'border-color': '@layoutGridBorderColor'\n        }\n    }, {\n        className: '.table-header-label',\n        rnStyleSelector: 'text',\n        style: {\n            color: '@layoutGridHeaderTextColor'\n        }\n    }, {\n        className: '.app-layoutgrid-skeleton',\n        rnStyleSelector: 'app-layoutgrid.skeleton',\n        studioStyleSelector: '.app-layoutgrid-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/accordion.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getBadgeStyle = (badgeClass: string, color: string) => ({\n    className: `.app-accordion-header-${badgeClass}-badge`,\n    rnStyleSelector: `app-accordion.${badgeClass}`,\n    studioStyleSelector: `.app-accordion >.app-accordion-panel >.panel-heading .panel-actions .label.label-${badgeClass}`,\n    \n    style: {\n        'background-color': color\n    }\n});\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-accordion',\n        rnStyleSelector: 'app-accordion.root',\n        studioStyleSelector: 'app-accordion',\n        style: {\n            'border-color': '@accordionBorderColor',\n            'background-color': '@accordionBgColor'\n        }\n    }, {\n        className: '.app-accordion-text',\n        rnStyleSelector: 'app-accordion.text',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading .heading',\n        style: {\n            color: '@accordionTitleColor'\n        }\n    }, {\n        className: '.app-accordion-header',\n        rnStyleSelector: 'app-accordion.header',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading',\n        style: {\n            'border-color': '@accordionBorderColor',\n            'background-color': '@accordionHeaderBgColor'\n        }\n    }, {\n        className: '.app-accordion-active-header',\n        rnStyleSelector: 'app-accordion.activeHeader',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading.active',\n        style: {\n            'border-color': '@accordionActiveHeaderBgColor',\n            'background-color': '@accordionActiveHeaderBgColor'\n        }\n    }, {\n        className: '.app-accordion-active-header-title',\n        rnStyleSelector: 'app-accordion.activeHeaderTitle',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading.active .heading',\n        style: {\n            'color': '@accordionActiveHeaderTextColor'\n        }\n    }, {\n        className: '.app-accordion-header-subtitle',\n        rnStyleSelector: 'app-accordion.subheading',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading .description',\n        style: {}\n    }, {\n        className: '.app-accordion-header-expand-icon',\n        rnStyleSelector: 'app-accordion.icon',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading .wi-plus',\n        style: {}\n    }, {\n        className: '.app-accordion-header-left-toggle-icon',\n        rnStyleSelector: 'app-accordion.leftToggleIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-accordion-header-right-toggle-icon',\n        rnStyleSelector: 'app-accordion.rightToggleIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-accordion-header-collapse-icon',\n        rnStyleSelector: 'app-accordion.activeIcon',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading .wi-minus',\n        style: {\n            'color': '@accordionActiveHeaderTextColor'\n        }\n    }, {\n        className: '.app-accordion-header-badge',\n        rnStyleSelector: 'app-accordion.badge',\n        studioStyleSelector: '.app-accordion >.app-accordion-panel >.panel-heading .panel-actions .label',\n        style: {\n            'color': '@accordionIconColor'\n        }\n    }, {\n        className: '.app-accordion-active-header-badge',\n        rnStyleSelector: 'app-accordion.activeBadge',\n        studioStyleSelector: '',\n        style: {\n            'border-color': '@accordionActiveHeaderTextColor',\n            'color': '@accordionActiveHeaderTextColor'\n        }\n    }, {\n        className: '.app-accordion-skeleton',\n        rnStyleSelector: 'app-accordion.skeleton',\n        studioStyleSelector: '.app-accordion-skeleton',\n        style: {}\n    }, {\n        className: '.app-accordion-title-icon',\n        rnStyleSelector: 'app-accordion.titleIcon',\n        studioStyleSelector: '',\n        style: {}\n    },\n    getBadgeStyle('default', '@transparent'),\n    getBadgeStyle('danger', '@labelDangerColor'),\n    getBadgeStyle('success', '@labelSuccessColor'),\n    getBadgeStyle('warning', '@labelWarningColor'),\n    getBadgeStyle('info', '@labelInfoColor'),\n    getBadgeStyle('primary', '@labelPrimaryColor')\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/panel.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nconst getPanelStyle = (type: string, color: string): StyleDefinition[] => ([\n    {\n        className: `.panel-${type}.app-panel-header`,\n        style: {\n            'background-color': color\n        }\n    }, {\n        className: `.panel-${type}.app-panel-title`,\n        style: {\n            'color': '@panelTextColor'\n        }\n    }, {\n        className: `.panel-${type}.app-panel-sub-title`,\n        style: {\n            'color': '@panelTextColor'\n        }\n    }, {\n        className: `.panel-${type}.app-panel-icon .app-icon-text`,\n        style: {\n            'color': '@panelTextColor'\n        }\n    }\n]);\n\nconst getBadgeStyle = (badgeClass: string, color: string) => ({\n    className: `.app-panel-${badgeClass}-badge`,\n    rnStyleSelector: `app-panel.${badgeClass}`,\n    studioStyleSelector: `.app-panel .panel-heading .panel-actions .label.label-${badgeClass}`,\n    \n    style: {\n        'background-color': color,\n        'color': '@defaultColorF'\n    }\n});\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-panel',\n        rnStyleSelector: 'app-panel.root',\n        studioStyleSelector: '.app-panel',\n        style: {\n            'background-color': '@panelBgColor'\n        }\n    }, {\n        className: '.app-panel-title',\n        rnStyleSelector: 'app-panel.text',\n        studioStyleSelector: '.app-panel .panel-heading .heading',\n        style: {\n            color: '@panelHeaderTextColor'\n        }\n    }, {\n        className: '.app-panel-header',\n        rnStyleSelector: 'app-panel.header',\n        studioStyleSelector: '.app-panel .panel-heading',\n        style: {\n            'background-color': '@panelHeaderBgColor',\n            'border-color': '@panelHeaderBgColor'\n        }\n    }, {\n        className: '.app-panel-sub-title',\n        rnStyleSelector: 'app-panel.subHeading',\n        studioStyleSelector: '.app-panel .panel-heading .description',\n        style: {}\n    }, {\n        className: '.app-panel-icon',\n        rnStyleSelector: 'app-panel.icon',\n        studioStyleSelector: '.app-panel .panel-heading ',\n        style: {}\n    }, {\n        className: '.app-panel-toggle-icon',\n        rnStyleSelector: 'app-panel.toggleIcon',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-panel-badge',\n        rnStyleSelector: 'app-panel.badge',\n        studioStyleSelector: '.app-panel .panel-heading .app-badge',\n        style: {\n            color: '@badgeTextColor'\n        }\n    },\n    getBadgeStyle('default', '@labelDefaultColor'),\n    getBadgeStyle('danger', '@labelDangerColor'),\n    getBadgeStyle('success', '@labelSuccessColor'),\n    getBadgeStyle('warning', '@labelWarningColor'),\n    getBadgeStyle('info', '@labelInfoColor'),\n    getBadgeStyle('primary', '@labelPrimaryColor'),\n    ...getPanelStyle('default', '@panelDefaultColor'),\n    ...getPanelStyle('danger', '@panelDangerColor'),\n    ...getPanelStyle('success', '@panelSuccessColor'),\n    ...getPanelStyle('warning', '@panelWarningColor'),\n    ...getPanelStyle('info', '@panelInfoColor'),\n    ...getPanelStyle('primary', '@panelPrimaryColor')\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/tabs/tabpane.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-tabpane',\n        rnStyleSelector: 'app-tabpane.root',\n        studioStyleSelector: '.app-tabs .tab-pane .tab-body ',\n        style: {\n            'background-color': '@tabContentBgColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/tabs/tabheader.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-tabheader',\n        rnStyleSelector: 'app-tabheader.root',\n        studioStyleSelector: '.app-tabs .tab-header',\n        document: '',\n        style: {\n            'background-color': '@tabHeaderBgColor'\n        }\n    }, {\n        className: '.app-tabheader-text',\n        rnStyleSelector: 'app-tabheader.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-tabheader-item',\n        rnStyleSelector: 'app-tabheader.header',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-tabheader-item-text',\n        rnStyleSelector: 'app-tabheader.headerText',\n        studioStyleSelector: '.app-tabs .tab-header .tab-heading span .tab-heading span',\n        document: '',\n        style: {\n            color: '@tabHeaderTextColor'\n        }\n    }, {\n        className: '.app-tabheader-item-icon',\n        rnStyleSelector: 'app-tabheader.headerIcon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-tabheader-active-item',\n        rnStyleSelector: 'app-tabheader.activeHeader',\n        studioStyleSelector: '',\n        document: '',\n        style: {\n            'background-color': '@tabActiveHeaderBgColor'\n        }\n    }, {\n        className: '.app-tabheader-active-item-text',\n        rnStyleSelector: 'app-tabheader.activeHeaderText',\n        studioStyleSelector: '.app-tabs .tab-header.active .tab-heading span, .app-tabs .tab-header.active a, .app-tabs .tab-header.active a:focus',\n        document: '',\n        style: {\n            color: '@tabActiveHeaderTextColor'\n        }\n    }, {\n        className: '.app-tabheader-active-item-icon',\n        rnStyleSelector: 'app-tabheader.activeHeaderIcon',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-tabheader-active-indicator',\n        rnStyleSelector: 'app-tabheader.activeIndicator',\n        studioStyleSelector: '',\n        document: '',\n        style: {\n            'background-color': '@tabActiveIndicatorBgColor'\n        }\n    }, {\n        className: '.app-tabheader-arrow-indicator',\n        rnStyleSelector: 'app-tabheader.arrowIndicator',\n        studioStyleSelector: '',\n        document: '',\n        style: {\n            'background-color': '@tabActiveHeaderBgColor'\n        }\n    }, {\n        className: '.app-tabheader-arrow-indicator-dot',\n        rnStyleSelector: 'app-tabheader.arrowIndicatorDot',\n        studioStyleSelector: '',\n        document: '',\n        style: {\n            'background-color': '@tabActiveHeaderBgColor'\n        }\n    }, {\n        className: '.app-tabheader-skeleton',\n        rnStyleSelector: 'app-tabheader.skeleton',\n        studioStyleSelector: '.app-tabheader-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridrow.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-gridrow',\n        rnStyleSelector: 'app-gridrow.root',\n        studioStyleSelector: '.app-grid-row',\n        style: {}\n    }, {\n        className: '.table-row.app-gridrow',\n        style: {\n            'border-color': '@gridColumnBorderColor'\n        }\n    }, {\n        className: '.table-header-row.app-gridrow',\n        style: {\n            'background-color': '@layoutGridHeaderBgColor'\n        }\n    }, {\n        className: '.table-striped-row0.app-gridrow',\n        studioStyleSelector: '.table-striped .app-grid-row:nth-child(even)',\n        style: {\n            'background-color': '@layoutGridStripColor1'\n        }\n    }, {\n        className: '.table-striped-row1.app-gridrow',\n        studioStyleSelector: '.table-striped .app-grid-row:nth-child(old)',\n        style: {\n            'background-color': '@layoutGridStripColor2'\n        }\n    },])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/layoutgrid/gridcolumn.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-gridcolumn',\n        rnStyleSelector: 'app-gridcolumn.root',\n        studioStyleSelector: '.app-gridcolumn',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/panel/panel-footer.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-panel-footer',\n        rnStyleSelector: 'app-panel-footer.root',\n        studioStyleSelector: '.app-panel-footer',\n        style: {\n            'background-color': '@panelFooterColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/panel/panel-content.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-panel-content',\n        rnStyleSelector: 'app-panel-content.root',\n        studioStyleSelector: '.panel-content',\n        style: {\n            'border-color': '@panelHeaderBgColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/accordion/accordionpane.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-accordionpane',\n        rnStyleSelector: 'app-accordionpane.root',\n        studioStyleSelector: '.app-accordionpane>.app-accordion-panel .panel-body',\n        style: {\n            'border-color': '@accordionBorderColor',\n            'backgroundColor': '@accordionPaneBgColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/wizard/wizardstep.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-wizardstep',\n        rnStyleSelector: 'app-wizardstep.root',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/container/linearlayout/linearlayoutitem.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-linearlayoutitem',\n        rnStyleSelector: 'app-linearlayoutitem.root',\n        studioStyleSelector: '.app-linearlayoutitem',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/dialogs/confirmdialog.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-confirmdialog',\n        rnStyleSelector: 'app-confirmdialog.dialog',\n        studioStyleSelector: '.app-confirm-dialog',\n        style: {}\n    }, {\n        className: '.app-confirmdialog-content',\n        rnStyleSelector: 'app-confirmdialog.dialogContent',\n        studioStyleSelector: '.app-confirm-dialog ',\n        style: {}\n    },  {\n        className: '.app-confirmdialog-actions',\n        rnStyleSelector: 'app-confirmdialog.dialogActions',\n        studioStyleSelector: '.app-confirm-dialog ',\n        style: {}\n    },  {\n        className: '.app-confirmdialog-ok',\n        rnStyleSelector: 'app-confirmdialog.okButton',\n        studioStyleSelector: '.app-confirm-dialog .app-dialog-footer .ok-action',\n        style: {}\n    },  {\n        className: '.app-confirmdialog-cancel',\n        rnStyleSelector: 'app-confirmdialog.cancelButton',\n        studioStyleSelector: '.app-confirm-dialog .app-dialog-footer .cancel-action',\n        style: {}\n    },  {\n        className: '.app-confirmdialog-message',\n        rnStyleSelector: 'app-confirmdialog.message.text',\n        studioStyleSelector: '.app-confirm-dialog .app-dialog-message',\n        style: {\n            color: '@alertMessageColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/dialogs/dialogcontent.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-dialogcontent',\n        rnStyleSelector: 'app-dialogcontent.root',\n        studioStyleSelector: '.app-dialog-body',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/dialogs/dialog.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-dialog',\n        rnStyleSelector: 'app-dialog.root',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@dialogBackgroundColor'\n        }\n    }, {\n        className: '.app-dialog-modal',\n        rnStyleSelector: 'app-dialog.modal',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-dialog-modal-content',\n        rnStyleSelector: 'app-dialog.content',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-dialog-header',\n        rnStyleSelector: 'app-dialog.header',\n        studioStyleSelector: '.app-dialog>.modal-content>.app-dialog-header',\n        style: {\n            'border-color': '@dialogBorderColor'\n        }\n    }, {\n        className: '.app-dialog-title',\n        rnStyleSelector: 'app-dialog.headerLabel',\n        studioStyleSelector: '.app-dialog>.modal-content>.app-dialog-header .modal-title',\n        style: {}\n    }, {\n        className: '.app-dialog-icon',\n        rnStyleSelector: 'app-dialog.icon',\n        studioStyleSelector: '.app-dialog>.modal-content>.app-dialog-header .app-dialog-title i',\n        style: {}\n    }, {\n        className: '.app-dialog-close-btn',\n        rnStyleSelector: 'app-dialog.closeBtn',\n        studioStyleSelector: '.app-dialog .app-dialog-footer .btn-primary',\n        style: {}\n    },])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/dialogs/alertdialog.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: (): StyleDefinition[] => ([{\n        className: '.app-alertdialog',\n        rnStyleSelector: 'app-alertdialog.dialog',\n        studioStyleSelector: '.app-alert-dialog',\n        style: {}\n    }, {\n        className: '.app-alertdialog-content',\n        rnStyleSelector: 'app-alertdialog.dialogContent',\n        studioStyleSelector: '.app-alert-dialog ',\n        style: {}\n    },  {\n        className: '.app-alertdialog-actions',\n        rnStyleSelector: 'app-alertdialog.dialogActions',\n        studioStyleSelector: '.app-alert-dialog ',\n        style: {}\n    },  {\n        className: '.app-alertdialog-ok',\n        rnStyleSelector: 'app-alertdialog.okButton',\n        studioStyleSelector: '.app-alert-dialog .app-dialog-footer .ok-action',\n        style: {}\n    },  {\n        className: '.app-alertdialog-message',\n        rnStyleSelector: 'app-alertdialog.message.text',\n        studioStyleSelector: '.app-alert-dialog .app-dialog-message',\n        style: {\n            color: '@alertMessageColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/dialogs/dialogactions.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-dialogactions',\n        rnStyleSelector: 'app-dialogactions.root',\n        studioStyleSelector: '.app-dialog-footer',\n        style: {\n            'border-color': '@dialogBorderColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/device/barcodescanner.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-barcodescanner',\n        rnStyleSelector: 'app-barcodescanner.button.root',\n        studioStyleSelector: '.app-barcode',\n        style: {\n            'background-color': '@barcodeScannerBgColor',\n            'border-color': '@barcodeScannerBorderColor'\n        }\n    }, {\n        className: '.app-barcodescanner-text',\n        rnStyleSelector: 'app-barcodescanner.button.text',\n        studioStyleSelector: '.app-barcode .btn-caption',\n        style: {\n            'color': '@barcodeScannerTextColor'\n        }\n    }, {\n        className: '.app-barcodescanner-icon',\n        rnStyleSelector: 'app-barcodescanner.button.icon.icon',\n        studioStyleSelector: '.app-barcode',\n        style: {\n            'color': '@barcodeScannerTextColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/device/camera.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-camera',\n        rnStyleSelector: 'app-camera.button.root',\n        studioStyleSelector: '.app-camera',\n        style: {\n            'background-color': '@cameraBgColor',\n            'border-color': '@cameraBorderColor'\n        }\n    }, {\n        className: '.app-camera-text',\n        rnStyleSelector: 'app-camera.button.text',\n        studioStyleSelector: '.app-camera .btn-caption',\n        style: {\n            'color': '@cameraTextColor'\n        }\n    }, {\n        className: '.app-camera-icon',\n        rnStyleSelector: 'app-camera.button.icon.icon',\n        studioStyleSelector: '.app-camera',\n        style: {\n            'color': '@cameraTextColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/list.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-list',\n        rnStyleSelector: 'app-list.root',\n        studioStyleSelector: '.app-livelist',\n        style: {}\n    }, {\n        className: '.app-list-icon',\n        rnStyleSelector: 'app-list.listIcon',\n        studioStyleSelector: '.app-livelist .panel-heading .panel-title ',\n        style: {}\n    }, {\n        className: '.app-list-loading-icon',\n        rnStyleSelector: 'app-list.loadingIcon',\n        style: {}\n    }, {\n        className: '.app-list-loading-icon .app-icon-text',\n        style: {\n            color: '@listSubTitleColor'\n        }\n    }, {\n        className: '.app-list-heading',\n        rnStyleSelector: 'app-list.heading',\n        studioStyleSelector: '.app-livelist .panel-heading',\n        style: {\n            'background-color': '@listHeaderBgColor'\n        }\n    }, {\n        className: '.app-list-group-heading',\n        rnStyleSelector: 'app-list.groupHeading',\n        studioStyleSelector: '',\n        style: {\n            'background-color': '@groupHeadingBgColor,'\n        }\n    }, {\n        className: '.app-list-title',\n        rnStyleSelector: 'app-list.title.text',\n        studioStyleSelector: '.app-livelist .panel-heading .panel-title .heading',\n        style: {\n            color: '@listTitleColor'\n        }\n    }, {\n        className: '.app-list-sub-title',\n        rnStyleSelector: 'app-list.subheading.text',\n        studioStyleSelector: '.app-livelist .panel-heading .panel-title .description',\n        style: {\n            color: '@listSubTitleColor'\n        }\n    }, {\n        className: '.app-list-empty-message',\n        rnStyleSelector: 'app-list.emptyMessage.text',\n        studioStyleSelector: '',\n        style: {\n            color: '@listSubTitleColor'\n        }\n    },  {\n        className: '.app-list-on-demand-data-message',\n        rnStyleSelector: 'app-list.onDemandMessage.text',\n        studioStyleSelector: '',\n        style: {\n            color: '@listSubTitleColor'\n        }\n    }, {\n        className: '.app-list-on-demand-data-message-container',\n        rnStyleSelector: 'app-list.onDemandMessage.root',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-list-item',\n        rnStyleSelector: 'app-list.item',\n        studioStyleSelector: '',\n        style: {}\n    },\n    {\n        className: '.app-list-item-container',\n        rnStyleSelector: 'app-list.itemContainer',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-list-selected-item',\n        rnStyleSelector: 'app-list.selectedItem',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.app-list-selected-icon',\n        rnStyleSelector: 'app-list.selectedIcon',\n        style: {}\n    }, {\n        className: '.app-list-group',\n        rnStyleSelector: 'app-list.group',\n        style: {}\n    },\n    {\n        className: '.app-list-item-skeleton',\n        rnStyleSelector: '.app-list.skeleton',\n        style: {}\n    }\n])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/form.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-form',\n        rnStyleSelector: 'app-form.root',\n        studioStyleSelector: '.app-form',\n        style: {}\n    }, {\n        className: '.app-form-header',\n        rnStyleSelector: 'app-form.heading',\n        studioStyleSelector: '.app-form .panel-heading',\n        style: {\n            'border-color': '@formBorderColor'\n        }\n    }, {\n        className: '.app-form-title',\n        rnStyleSelector: 'app-form.title.text',\n        studioStyleSelector: '.app-form .panel-heading .heading',\n        style: {\n            'font-size': '@heading4FontSize',\n            color: '@formTitleColor'\n        }\n    }, {\n        className: '.app-form-sub-title',\n        rnStyleSelector: 'app-form.subheading.text',\n        studioStyleSelector: '.app-form .panel-heading .description',\n        style: {\n            color: '@formSubTitleColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/card.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-card',\n        rnStyleSelector: 'app-card.root',\n        studioStyleSelector: '.app-card',\n        style: {\n            'border-color': '@cardBorderColor',\n            'shadowColor': '@cardShadowColor',\n            'background-color': '@cardBgColor'\n        }\n    }, {\n        className: '.app-card-icon',\n        rnStyleSelector: 'app-card.cardIcon',\n        studioStyleSelector: '.app-card .app-card-avatar ',\n        style: {}\n    }, {\n        className: '.app-card-header',\n        rnStyleSelector: 'app-card.heading',\n        studioStyleSelector: '.app-card .app-card-header',\n        style: {\n            'background-color': '@cardHeaderBgColor'\n        }\n    }, {\n        className: '.app-card-title',\n        rnStyleSelector: 'app-card.title.root',\n        studioStyleSelector: '.app-card .app-card-header .card-heading',\n        style: {\n            color: '@cardTitleColor'\n        }\n    }, {\n        className: '.app-card-sub-title',\n        rnStyleSelector: 'app-card.subheading.root',\n        studioStyleSelector: '.app-card .app-card-header .card-subheading',\n        style: {\n            color: '@cardSubTitleColor'\n        }\n    }, {\n        className: '.app-card-picture',\n        rnStyleSelector: 'app-card.picture',\n        studioStyleSelector: '.app-card .app-card-header .img-circle',\n        style: {}\n    }, {\n        className: '.app-card-skeleton',\n        rnStyleSelector: 'app-card.skeleton',\n        studioStyleSelector: '.app-card-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/form/form-footer.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-form-footer',\n        rnStyleSelector: 'app-form-footer.root',\n        studioStyleSelector: '',\n        style: {\n            'border-color': '@formBorderColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/form/form-action.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-form-action',\n        rnStyleSelector: 'app-form-action.root',\n        studioStyleSelector: 'To style the outermost wrapper element of form-action.',\n        style: {}\n    }, {\n        className: '.app-form-action-icon',\n        rnStyleSelector: 'app-form-action.icon',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/form/form-field.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-form-field',\n        rnStyleSelector: 'app-form-field.root',\n        studioStyleSelector: '',\n        style: {}\n    }, {\n        className: '.form-label.app-label-text',\n        style: {\n            fontSize: '@heading5FontSize'\n        }\n    }, {\n        className: '.app-form-field-error-msg',\n        rnStyleSelector: 'app-form-field.errorMsg',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/form/form-body.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-form-body',\n        rnStyleSelector: 'app-form-body.root',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/card/card-content.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-card-content',\n        rnStyleSelector: 'app-card-content.root',\n        studioStyleSelector: '.app-card>.content',\n        style: {\n            'background-color': '@cardContentBgColor'\n        }\n    }, {\n        className: '.app-card-content-skeleton',\n        rnStyleSelector: 'app-card-content.skeleton',\n        studioStyleSelector: '.app-card-content-skeleton',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/card/card-footer.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-card-footer',\n        rnStyleSelector: 'app-card-footer.root',\n        studioStyleSelector: '.app-card>.footer',\n        style: {\n            'background-color': '@cardFooterBgColor',\n            'border-color': '@cardFooterBorderColor'\n        }\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/list/list-template.styledef.ts": "import { ComponentStyle, StyleDefinition } from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-list-template',\n        rnStyleSelector: 'app-list-template.root',\n        studioStyleSelector: '',\n        style: {\n            borderBottomColor: '@listDividerColor',\n            backgroundColor: '@itemBgColor',\n        }\n    }, {\n        className: \".app-list-template-skeleton\",\n        rnStyleSelector: 'app-list-template.skeleton',\n        studioStyleSelector: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/theme/components/data/list/list-action-template.styledef.ts": "import { ComponentStyle} from '../../base-style-definition';\n\nexport default {\n    getStyleDefs: () => ([{\n        className: '.app-list-action-template',\n        rnStyleSelector: 'app-list-action-template.root',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }, {\n        className: '.app-list-action-template-text',\n        rnStyleSelector: 'app-list-action-template.text',\n        studioStyleSelector: '',\n        document: '',\n        style: {}\n    }])\n} as ComponentStyle;", "wavemaker-rn-codegen/src/variables/variable.transformer.ts": "import transformEx from '../transpile/bind.ex.transformer';\nimport { isEmpty, forEach, isBoolean, isNumber, isObject, isArray, clone, upperFirst, get, set } from \"lodash\";\nfunction transformDataItem(d: any, scope: string) {\n    let v = isArray(d.value) ? d.value[0] : d.value;\n    if (v) {\n        if (v.startsWith && v.startsWith('bind:')) {\n            v = v.substr(5);\n            v = v === 'null' ? null : `${scope}.eval(() => ${transformEx(v, scope, 'attr').replace(/\\\\n/g,'')})`;\n        } else if (d.type === 'string') {\n            v = `${v}`;\n        }\n    }\n    return {\n        name: d.target,\n        value: v\n    };\n}\n\nfunction appendIfNotEmpty(input: string, str: string) {\n    return input && (input + '');\n}\n\nfunction checkEmptyObject(obj: any) {\n    let isVariableEmpty = true;\n    forEach(obj, (value: any) => {\n        if (isEmpty(value) && !isBoolean(value) && !isNumber(value)) {\n            return;\n        }\n        if (!isObject(value)) {\n            isVariableEmpty = false;\n        } else if (isArray(value)) {\n            isVariableEmpty = isEmpty(value) || (value.length === 1 ? isEmpty(value[0]) : false);\n        } else {\n            isVariableEmpty = checkEmptyObject(value);\n        }\n        return isVariableEmpty;\n    });\n    return isVariableEmpty;\n};\n\nfunction transformVariable(variable: any, scope: string) {\n    let params: any = {}, filters: any = {};\n    if (variable.category !== 'wm.DeviceVariable') {\n        if (isArray(variable.dataSet)) {\n            if (variable.category === 'wm.NavigationVariable') {\n                variable.dataSet.forEach((d: any) => {\n                    const {name, value} = transformDataItem(d, scope);\n                    set(params, name, value);\n                });\n            } else if (variable.isList && variable.category === 'wm.Variable') {\n                params = clone(variable.dataSet);\n            }\n        } else if (variable.dataSet) {\n            Object.keys(variable.dataSet).forEach((k) => {\n                if (params[k] == undefined || params[k] == null) {\n                    set(params, k, get(variable.dataSet, k));\n                }\n            });\n        }\n    }\n    if (variable.dataBinding) {\n        variable.dataBinding.forEach((d: any) => {\n            const {name, value} = transformDataItem(d, scope);\n            set(params, name, value);\n        });\n        if (params.dataBinding) {\n            params = params.dataBinding;\n        }\n    }\n    const filterProvider = (rules: any) => {\n        rules?.forEach((r: any) => {\n            if (r.rules) {\n                filterProvider(r.rules);\n            } else {\n                const {name, value} = transformDataItem(r, scope);\n                filters[name] = value;\n            }\n        })\n    }\n\n    if (variable.filterExpressions) {\n        filterProvider(variable.filterExpressions.rules);\n    }\n\n\n    // Todo: these properties directly on variable are to be handled from studio\n    if (variable.category === 'wm.DeviceVariable' && variable.operation === 'scanBarCode') {\n        params['barcodeFormat'] = variable.barcodeFormat;\n    }\n    if (variable.category === 'wm.DeviceVariable' && variable.service === 'file' && variable.operation === 'upload') {\n        params['browse'] = !variable.localFile;\n    }\n    const obj: any = {\n        name: variable.name,\n        group: 'variable',\n        params: params,\n        filters: filters,\n        onSuccess: appendIfNotEmpty(transformEx(variable.onSuccess, scope, 'event'), ';'),\n        onError: appendIfNotEmpty(transformEx(variable.onError, scope, 'event'), ';')\n    };\n    if (variable.onCanUpdate) {\n        obj.onCanUpdate = appendIfNotEmpty(transformEx(variable.onCanUpdate, scope, 'event'), ';');\n    }\n    if (variable.onBeforeUpdate) {\n        obj.onBeforeUpdate = appendIfNotEmpty(transformEx(variable.onBeforeUpdate, scope, 'event'), ';');\n    }\n    if (variable.onResult) {\n        obj.onResult = appendIfNotEmpty(transformEx(variable.onResult, scope, 'event'), ';');\n    }\n    if (variable.onOnline) {\n        obj.onOnline = appendIfNotEmpty(transformEx(variable.onOnline, scope, 'event'), ';');\n    }\n    if (variable.onOffline) {\n        obj.onOffline = appendIfNotEmpty(transformEx(variable.onOffline, scope, 'event'), ';');\n    }\n    if (variable.onBeforeDatasetReady) {\n        obj.onBeforeDatasetReady = appendIfNotEmpty(transformEx(variable.onBeforeDatasetReady, scope, 'event'), ';');\n    }\n    if (variable.spinnerContext) {\n        obj.spinnerContext = variable.spinnerContext;\n        obj.spinnerMessage = variable.spinnerMessage;\n    }\n    if (variable.category === 'wm.LoginVariable' || variable.category === 'wm.LogoutVariable') {\n        obj.useDefaultSuccessHandler = variable.useDefaultSuccessHandler;\n    }\n    return obj;\n}\n\nfunction transformModelVariable(variable: any, scope: string) {\n    if (isArray(variable.dataSet) && variable.dataSet.length === 1 && checkEmptyObject(variable.dataSet[0])) {\n        variable.dataSet = [];\n    }\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'ModelVariable';\n    tv.twoWayBinding = variable.twoWayBinding;\n    tv.isList = !!variable.isList;\n    return tv;\n}\n\nfunction transformServiceVariable(variable: any, scope: string) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'ServiceVariable';\n    tv.operationId = variable.operationId;\n    tv.isList = !!variable.isList;\n    tv.inFlightBehavior = variable.inFlightBehavior;\n    tv.service = variable.service;\n    tv.operation = variable.operation;\n    tv.operationType = variable.operationType;\n    tv.maxResults = variable.maxResults;\n    tv._context = variable._context;\n    tv.serviceType = variable.serviceType;\n    tv.controller = variable.controller;\n    return tv;\n}\n\nfunction transformNavigationAction(variable: any, scope: string) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'NavigationAction';\n    tv.group = 'action';\n    tv.operation = variable.operation;\n    tv.params = isArray(tv.params) && tv.params.length == 0 ? {} : tv.params;\n    if (!tv.params['pageName'] && variable.pageName) {\n        tv.params['pageName'] = variable.pageName\n    }\n    return tv;\n}\n\nfunction transformTimerAction(variable: any, scope: string) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'TimerAction';\n    tv.group = 'action';\n    tv.repeating = variable.repeating;\n    tv.delay = variable.delay;\n    if (variable.onTimerFire) {\n        tv.onTimerFire = appendIfNotEmpty(transformEx(variable.onTimerFire, scope, 'event'), ';');\n    }\n    return tv;\n}\n\nfunction transformNotificationAction(variable: any, scope: string) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'NotificationAction';\n    tv.group = 'action';\n    tv.operation = variable.operation;\n    const partialContent = variable.dataBinding.filter((binding: any) => {\n        return binding.target === 'page';\n    })[0];\n    if (variable.onOk || variable.onClick) {\n        tv.onOk = appendIfNotEmpty(transformEx(variable.onOk || variable.onClick, scope, 'event'), ';');\n    }\n    if (variable.onCancel) {\n        tv.onCancel = appendIfNotEmpty(transformEx(variable.onCancel, scope, 'event'), ';');\n    }\n    if (variable.onClose || variable.onHide) {\n        tv.onClose = appendIfNotEmpty(transformEx(variable.onClose || variable.onHide, scope, 'event'), ';');\n    }\n    if (variable.operation === 'alert' || variable.operation === 'confirm') {\n        const owner = scope === 'App' ? 'App.commonPartial' : scope;\n        const widgetName = scope === 'App' ? `Common${upperFirst(variable.operation)}Dialog` : `notification${variable.operation}dialog`;\n        tv.showDialog = `${owner}.notification = options;${owner}.Widgets.${widgetName}.open();`;\n    }\n    if (partialContent) {\n        tv.partialContent = {content: partialContent.value};\n    }\n    return tv;\n}\n\nfunction transformDeviceVariable(variable: any, scope: string, appUrl?: string) {\n    if (isArray(variable.dataSet) && variable.dataSet.length === 1 && checkEmptyObject(variable.dataSet[0])) {\n        variable.dataSet = [];\n    }\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'DeviceVariable';\n    tv.operation = variable.operation;\n    tv.service = variable.service;\n    if (variable.service === 'file') {\n        tv.params.serverUrl = `${scope}.eval(() => ${scope}.appConfig.url)`;\n    }\n    return tv;\n}\n\nfunction transformLoginVariable(variable: any, scope: any) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'LoginAction';\n    tv.group = 'action';\n    return tv;\n}\n\nfunction transformLogoutVariable(variable: any, scope: any) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'LogoutAction';\n    tv.group = 'action';\n    tv.redirectTo = variable.redirectTo;\n    return tv;\n}\n\nfunction transformLiveVariable(variable: any, scope: any) {\n    const tv: any = transformVariable(variable, scope);\n    tv.classname = 'LiveVariable';\n    tv.isList = !!variable.isList;\n    tv.inFlightBehavior = variable.inFlightBehavior;\n    tv.maxResults = variable.maxResults;\n    tv._context = variable._context;\n    tv.operation = variable.operation;\n    tv.type = variable.type;\n    tv.autoUpdate = variable.autoUpdate;\n    tv.orderBy = variable.orderBy;\n    tv.liveSource = variable.liveSource;\n    tv.category = variable.category;\n    tv.tableName = variable.tableName;\n    tv.tableType = variable.tableType;\n    tv.relatedTables = variable.relatedTables;\n    tv.filterExpressions = variable.filterExpressions;\n    return tv;\n}\n\nexport default (variable: any, scope: string, appUrl: string) => {\n    switch(variable.category) {\n        case 'wm.Variable':\n            return transformModelVariable(variable, scope);\n        case 'wm.ServiceVariable':\n            return transformServiceVariable(variable, scope);\n        case 'wm.NavigationVariable':\n            return transformNavigationAction(variable, scope);\n        case 'wm.TimerVariable':\n            return transformTimerAction(variable, scope);\n        case 'wm.NotificationVariable':\n            return transformNotificationAction(variable, scope);\n        case 'wm.DeviceVariable':\n            return transformDeviceVariable(variable, scope, appUrl);\n        case 'wm.LoginVariable':\n            return transformLoginVariable(variable, scope);\n        case 'wm.LogoutVariable':\n            return transformLogoutVariable(variable, scope);\n        case 'wm.LiveVariable':\n            return transformLiveVariable(variable, scope);\n    }\n    return null;\n};\n", "wavemaker-rn-codegen/src/templates/project/polyfills.js": "export default {};", "wavemaker-rn-codegen/src/templates/project/index.js": "import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);", "wavemaker-rn-codegen/src/templates/project/font.config.js": "export default {\n    baseFont: '',\n    fonts: [\n        /**\n         * {\n         *  name: fontName,\n         *  path: 'relative (from webapp) path of font files in webapp folder.'\n         * }\n         */\n    ]\n};", "wavemaker-rn-codegen/src/templates/project/metro.config.js": "const { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\nmodule.exports = (async () => {\n    try {\n        const projectRoot = __dirname;\n        const config = getDefaultConfig(projectRoot);\n        config.watchFolders = [projectRoot];\n        config.resolver.nodeModulesPaths = [\n            path.resolve(projectRoot, 'node_modules')\n        ];\n        config.resolver.disableHierarchicalLookup = true;\n        config.transformer = {\n            ...config.transformer,\n            minifierPath: 'metro-minify-terser',\n            minifierConfig: {\n                compress:{\n                    drop_debugger: false\n                }\n            },\n            babelTransformerPath: require.resolve('react-native-svg-transformer'),\n            getTransformOptions: async () => ({\n                transform: {\n                    experimentalImportSupport: false,\n                    inlineRequires: false\n                }\n            })\n        }\n        config.resolver = {\n            ...config.resolver,\n            assetExts: config.resolver.assetExts.filter(ext => ext !== 'svg'),\n            sourceExts: [...config.resolver.sourceExts, 'svg']\n        }\n        return config;\n    }\n    catch (e) {\n        console.log('error in metro config file');\n    }\n})();", "wavemaker-rn-codegen/src/templates/project/revert-to-1.0.styles.js": "import BASE_THEME from '@wavemaker/app-rn-runtime/styles/theme';\n\nconst oldStyles = {\n\n    'app-label': {\n        root: {\n            alignSelf: 'auto'\n        }\n    },\n    'app-search': {\n        text: {\n            height: 48,\n            minHeight: 0,\n            paddingLeft: 12,\n            paddingRight: 12,\n            borderTopLeftRadius: 6,\n            borderBottomLeftRadius: 6,\n        },\n        focusedText: {\n            borderBottomLeftRadius: 0,\n        },\n        searchButton: {\n            root: {\n                height: 48,\n                borderTopRightRadius: 4,\n                borderBottomRightRadius: 4,\n            },\n            icon: {\n                icon: {\n                    marginRight: 0,\n                },\n            },\n        },\n    },\n    'app-message': {\n        closeBtn: {\n            paddingRight: 8,\n        },\n    },\n    'app-anchor': {\n        text: {\n            paddingRight: 0,\n        },\n    },\n    'app-popover': {\n        link: {\n            text: {\n                paddingRight: 0,\n            },\n        },\n        popover: {\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n        },\n        modalContent: {\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0,\n        },\n    },\n    'app-select': {\n        arrowButton: {\n            paddingTop: 0,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n        }\n    },\n    'app-alertdialog': {\n        okButton: {\n            root: {\n                width: '100%',\n                borderRadius: 4,\n            },\n        },\n    },\n    'app-buttongroup': {\n        root: {\n            overflow: 'hidden'\n        }\n\n    },\n    'app-barcodescanner': {\n        button: {\n            root: {\n                minheight: 0\n            },\n            icon: {\n                icon: {\n                    paddingLeft: 8,\n                    fontsize: 24\n                },\n            },\n        },\n    },\n    'app-camera': {\n        button: {\n            root: {\n                minheight: 0,\n                borderRadius: 0,\n            },\n            icon: {\n                icon: {\n                    paddingLeft: 8,\n                },\n            },\n        },\n    },\n    'app-confirmdialog': {\n        okButton: {\n            root: {\n                flexGrow: 1,\n                flexShrink: 1,\n                flexBasis: 0,\n            },\n        },\n        cancelButton: {\n            root: {\n                flexGrow: 1,\n                flexShrink: 1,\n                flexBasis: 0,\n                marginRight: 8,\n            },\n        },\n    },\n    'app-dialog': {\n        root: {\n            borderRadius: 6,\n            paddingTop: 24,\n            paddingBottom: 24,\n            paddingLeft: 24,\n            paddingRight: 24,\n            elevation: 6,\n        },\n        icon: {\n            text: {\n                fontSize: 20,\n            },\n        },\n        headerLabel: {\n            paddingBottom: 0,\n        },\n        closeBtn: {\n            root: {\n                paddingTop: 8,\n                paddingRight: 8,\n                paddingBottom: 8,\n                paddingLeft: 8,\n            },\n        },\n    },\n    'app-text': {\n        root: {\n            paddingTop: 12,\n            paddingRight: 12,\n            paddingBottom: 12,\n            paddingLeft: 12,\n        },\n    },\n    'app-number': {\n        root: {\n            paddingTop: 12,\n            paddingRight: 12,\n            paddingBottom: 12,\n            paddingLeft: 12,\n        },\n    },\n    'app-currency': {\n        label: {\n            marginTop: 0,\n            marginBottom: 0,\n        },\n    },\n    'app-icon': {\n        icon: {\n            paddingRight: 0\n        }\n    },\n    'app-button': {\n        root: {\n            paddingTop: 12,\n            paddingBottom: 12,\n            paddingLeft: 12,\n            paddingRight: 12,\n            borderRadius: 6,\n            height: null\n        },\n        text: {\n            fontSize: 16,\n            marginHorizontal: 4\n        },\n        badge: {\n            top: -16,\n            marginLeft: -16,\n            marginRight: null,\n            bottom: null,\n            borderWidth: 1\n        },\n        icon: {\n            root: {\n                paddingLeft: 0,\n                paddingRight: 0,\n                alignSelf: 'auto'\n            },\n        },\n    },\n\n    'app-progress-bar': {\n        progressBar: {\n            height: 2,\n        },\n    },\n    'app-spinner': {\n        text: {\n            fontSize: 14,\n        },\n        icon: {\n            text: {\n                fontSize: 24,\n            },\n        },\n    },\n    'app-slider': {\n        thumb: {\n            height: 16,\n            width: 16,\n            marginTop: -18,\n            backgroundSize: '100% 100%',\n            backgroundPosition: 'center'\n        }\n    },\n    'app-tabheader': {\n        header: {\n            paddingTop: 0,\n            paddingBottom: 0,\n        },\n        headerIcon: {\n            icon: {\n                fontSize: 16,\n            },\n        },\n        headerText: {\n            fontWeight: 'bold',\n            fontSize: 16,\n            paddingTop: 16\n        },\n        activeIndicator: {\n            height: 4,\n            marginTop: -4\n        },\n    },\n    'app-wizard': {\n        stepIcon: {\n            root: {\n                paddingLeft: 0\n            }\n        },\n        wizardFooter: {\n            paddingTop: 12,\n            paddingBottom: 12,\n            paddingLeft: 12,\n            paddingRight: 12,\n            marginLeft: 0,\n        },\n    },\n    'app-list': {\n        listIcon: {\n            root: {\n                marginTop: 4,\n            },\n        },\n        subheading: {\n            text: {\n                fontSize: 12,\n                lineHeight: 16,\n            },\n        },\n        item: {\n            minHeight: 0,\n        },\n    },\n    'app-vertical-list': {\n        item: {\n            paddingTop: 0,\n            paddingBottom: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n            flexGrow: null,\n            flexShrink: null,\n            flexBasis: null\n        }\n    },\n    'app-chips': {\n        chip: {\n            borderRadius: 500,\n            minHeight: 40,\n        },\n    },\n    'app-fileupload': {\n        root: {\n            borderRadius: 6,\n\n        }\n    },\n    'app-switch': {\n        button: {\n            fontSize: 16,\n            minHeight: 0,\n            borderRadius: 0,\n            fontWeight: 'bold',\n        },\n    },\n    'app-switch-first-btn': {\n        borderTopLeftRadius: 6,\n        borderBottomLeftRadius: 6\n    },\n    'app-switch-last-btn': {\n        borderTopRightRadius: 6,\n        borderBottomRightRadius: 6\n\n    },\n    'app-toggle': {\n        root: {\n            width: 36,\n            height: null,\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            borderRadius: 18,\n            borderWidth: 1,\n            animation: 'none'\n        },\n        handle: {\n            width: 18,\n            height: 18,\n            borderRadius: 18,\n            backgroundSize: '100% 100%',\n            backgroundPosition: 'center'\n        }\n    },\n    'app-toggle-on': {\n        root: {\n            justifyContent: 'flex-end'\n        },\n        handle: {\n            width: 18,\n            height: 18,\n            marginLeft: 0,\n            marginRight: 0,\n            borderRadius: 18,\n            backgroundSize: '100% 100%',\n            backgroundPosition: 'center',\n        },\n    },\n    'app-toggle-off': {\n        handle: {\n            width: 18,\n            height: 18,\n            marginLeft: 0,\n            marginRight: 0,\n            borderRadius: 18,\n            backgroundSize: '100% 100%',\n            backgroundPosition: 'center',\n        },\n    },\n    'app-tabbar': {\n        root: {\n            height: 88\n        },\n        tabItem: {\n            minWidth: 60,\n            opacity: 0.4,\n            marginBottom: 0,\n            paddingBottom: 14\n        },\n        activeTabItem: {\n            backgroundColor: 'transparent',\n            height: null,\n            borderRadius: 0,\n            marginBottom: 0\n        },\n        tabLabel: {\n            fontSize: 14,\n            marginTop: -32,\n            textAlign: 'center',\n        },\n        tabIcon: {\n            icon: {\n                fontSize: 36\n            },\n            root: {\n                paddingBottom: 32,\n                borderBottomWidth: 4,\n                zIndex: 1\n            },\n        },\n    },\n    'app-menu': {\n        menu: {\n            paddingTop: 12,\n            paddingBottom: 12,\n            paddingLeft: 12,\n            paddingRight: 12,\n            borderRadius: 6,\n        },\n        menuItem: {\n            root: {\n                width: '100%',\n                paddingTop: 8,\n                paddingRight: 8,\n                paddingBottom: 8,\n                paddingLeft: 8,\n            },\n            icon: {\n                root: {\n                    fontSize: 16,\n                },\n            },\n        },\n    },\n    'app-navitem': {\n        root: {\n            borderWidth: 0,\n            borderBottomWidth: 1,\n            borderStyle: 'solid',\n        },\n        navAnchorItem: {\n            text: {\n                fontSize: 18,\n                fontWeight: '400',\n            },\n            icon: {\n                text: {\n                    fontSize: 16,\n                },\n            },\n        },\n    },\n    'app-navitem-active': {\n        text: {\n            fontSize: 18,\n            fontWeight: 'bold',\n        },\n    },\n    'app-navitem-child': {\n        text: {\n            textDecorationLine: 'underline',\n            textDecorationColor: 'black',\n            textDecorationStyle: 'solid',\n        },\n    },\n    'app-left-panel': {\n        root: {\n            borderTopRightRadius: 0,\n            borderBottomRightRadius: 0,\n        },\n    }\n};\nexport const resetTheme = (theme) => {\n    const overrideTheme = BASE_THEME.$new('material3-override', oldStyles);\n    let target = theme;\n\n    while (target.parent.name !== 'default' && target.parent.name !== 'material3-override') {\n        target = target.parent;\n    }\n\n    target.parent = overrideTheme;\n};", "wavemaker-rn-codegen/src/templates/project/wavepulse/constants.js": "export const EVENTS = {\n    CONSOLE: {\n        LOG: 'console-log'\n    },\n    DOM: {\n        REFRESH: 'refresh'\n    },\n    VARIABLE: {\n        BEFORE_INVOKE: 'variable-before-invoke',\n        AFTER_INVOKE: 'variable-after-invoke'\n    },\n    SERVICE: {\n        BEFORE_CALL: 'service_before_call',\n        AFTER_CALL: 'service_after_call'\n    },\n    TIMELINE: {\n        EVENT: 'timeline-event'\n    }\n};\n\nexport const CALLS = {\n    APP: {\n        INFO: 'GET_APP_INFO',\n    },\n    PLATFORM: {\n        INFO: 'GET_PLATFORM_INFO',\n    },\n    HANDSHAKE: {\n        RELOAD: 'RELOAD',\n        WISH: 'SAY_HELLO'\n    },\n    WIDGET: {\n        GET: 'GET_WIDGET',\n        HIGHLIGHT: 'HIGHLIGHT',\n        GET_PROPERTIES_N_STYLES: 'GET_PROPERTIES_N_STYLES',\n        TREE: 'GET_WIDGET_TREE'\n    },\n    EXPRESSION: {\n        EVAL: 'EVAL'\n    },\n    UI: {\n        REFRESH: 'REFRESH'\n    },\n    STATS: {\n        START_UP: 'START_UP_METRICS',\n        NAVIGATION: 'NAVIGATION_METRICS'\n    },\n    THEME: {\n        GET: 'GET_THEME',\n        GET_ACTIVE_THEME: 'GET_ACTIVE_THEME'\n    },\n    STORAGE: {\n        GET: 'GET',\n        SET: 'SET',\n        REMOVE: 'REMOVE',\n        GET_ALL: 'GET_ALL'\n    },\n    LOCALE: {\n        GET: 'GET_LOCALE'\n    }\n};\n", "wavemaker-rn-codegen/src/templates/project/wavepulse/wavepulse.agent.js": "\"use strict\";\nimport { Agent, WebSocketChannel } from '@wavemaker/wavepulse-agent/index';\nimport { EVENTS, CALLS } from './constants';\nimport axios from 'axios';\nimport RN2CSS from './rn2css.json';\nimport { Platform } from 'react-native';\n\nconst MAX_WAITING_TIME_FOR_CONNECTION = 30 * 1000;\nlet wavePulseAgent = new (class WavePulseAgent extends Agent {\n    onConnection;\n    onConnectionFailed;\n    constructor() {\n        super(...arguments);\n        this.isConnected = false;\n        this.closed = false;\n    }\n    isFlushAllowed() {\n        return this.isConnected;\n    }\n    connect(serverUrl, channelId) {\n        const pathIndex = serverUrl.indexOf('/', serverUrl.indexOf('//') + 2);\n        const serverOrigin = pathIndex > 0 ? serverUrl.substring(0, pathIndex) : serverUrl;\n        const contextPath = pathIndex > 0  ? serverUrl.substring(pathIndex) : undefined;\n        this.setChannel(WebSocketChannel.connect({\n            'url': serverOrigin || '',\n            'path': contextPath + '/socket.io',\n            'channelId': channelId\n        }));\n        this.onConnectionFailed && this.onConnectionFailed();\n        setTimeout(() => {\n            this.invoke(CALLS.HANDSHAKE.RELOAD);\n        }, 1000);\n        setTimeout(() => {\n            if (!this.isConnected) {\n                this.closed = true;\n                this.buffer = [];\n                this.onConnectionFailed && this.onConnectionFailed();\n            }\n        }, MAX_WAITING_TIME_FOR_CONNECTION);\n        return new Promise((resolve, reject) => {\n            this.onConnection = () => {\n                this.onConnection = undefined;\n                resolve();\n            };\n            this.onConnectionFailed = () => {\n                this.onConnectionFailed = undefined;\n                reject();\n            };\n        });\n    }\n    notify(event, type, args, buffer) {\n        if (!this.closed) {\n            super.notify(event, type, args, buffer);\n        }\n    }\n})();\nconst _console = console;\nlet tryWith = (fn) => {\n    return function() {\n        try {\n            return fn && fn.apply(undefined, arguments);\n        } catch(e) {\n            _console.defaultError(e);\n        }\n    }\n};\nlet currentPage = null;\nlet currentWidgets = {};\nlet handler = null;\nfunction wrapConsole() {\n    const prepareLogFn = (logType, original) => {\n        return tryWith(function () {\n            let args = [...arguments];\n            if (logType === 'error' && arguments[0].stack) {\n                args.splice(0, 1, arguments[0].stack.toString());\n            }\n            wavePulseAgent && wavePulseAgent.notify(EVENTS.CONSOLE.LOG, 'event', [{\n                    type: logType,\n                    date: Date.now(),\n                    message: Array.from(args)\n                }]);\n            original.call(_console, ...arguments);\n        });\n    };\n    _console.defaultLog = console.log;\n    _console.log = prepareLogFn('log', _console.defaultLog);\n    _console.defaultError = console.error;\n    _console.error = prepareLogFn('error', _console.defaultError);\n    _console.defaultWarn = console.warn;\n    _console.warn = prepareLogFn('warn', _console.defaultWarn);\n    _console.defaultDebug = console.debug;\n    _console.debug = prepareLogFn('debug', _console.defaultDebug);\n    _console.defaultInfo = console.info;\n    _console.info = prepareLogFn('info', _console.defaultInfo);\n}\nfunction listenPageEvents() {\n    handler.subscribe('pageReady', tryWith((p) => {\n        currentPage = p;\n        wavePulseAgent && wavePulseAgent.notify(EVENTS.TIMELINE.EVENT, 'event', [{\n                name: 'PAGE_READY',\n                data: {\n                    name: currentPage.pageName\n                },\n                startTime: handler.appConfig.diagnostics.pageStartTime,\n                endTime: handler.appConfig.diagnostics.pageReadyTime\n            }]);\n    }));\n    handler.subscribe('pageAttached', tryWith((p) => {\n        currentPage = p;\n        wavePulseAgent && wavePulseAgent.notify(EVENTS.TIMELINE.EVENT, 'event', [{\n                name: 'PAGE_READY',\n                data: {\n                    name: currentPage.pageName\n                },\n                startTime: handler.appConfig.diagnostics.pageStartTime,\n                endTime: handler.appConfig.diagnostics.pageReadyTime\n            }]);\n    }));\n    handler.subscribe('pageDestroyed', tryWith((p) => {\n        currentPage = null;\n    }));\n}\nfunction listenVariableEvents() {\n    handler.subscribe('beforeInvoke', tryWith((v) => {\n        wavePulseAgent && wavePulseAgent.notify(EVENTS.VARIABLE.BEFORE_INVOKE, 'event', []);\n        v.__diagnostics = v.__diagnostics || {};\n        v.__diagnostics.invocationStartTime = Date.now();\n        v.__diagnostics.processed = false;\n    }));\n    handler.subscribe('afterInvoke', tryWith((v) => {\n        wavePulseAgent && wavePulseAgent.notify(EVENTS.VARIABLE.AFTER_INVOKE, 'event', []);\n        if (v.__diagnostics.processed) {\n            return;\n        }\n        v.__diagnostics.invocationEndTime = Date.now();\n        v.__diagnostics.processed = true;\n        wavePulseAgent && wavePulseAgent.notify(EVENTS.TIMELINE.EVENT, 'event', [{\n                name: 'VARIABLE_INVOKE',\n                data: {\n                    name: v.name,\n                    context: v.config._context === handler ? 'App' : v.config._context.pageName\n                },\n                startTime: v.__diagnostics.invocationStartTime,\n                endTime: v.__diagnostics.invocationEndTime\n            }]);\n    }));\n}\nfunction listenServiceCalls() {\n    const _axios = global['axios'] || axios;\n    _axios.interceptors.request.use(tryWith(function (config) {\n        try {\n            config.__startTime = Date.now();\n            // Do something before request is sent\n            wavePulseAgent && wavePulseAgent.notify(EVENTS.SERVICE.BEFORE_CALL, 'event', [config]);\n        } finally {\n            return config;\n        }\n    }), tryWith(function (error) {\n        // Do something with request error\n        return Promise.reject(error);\n    }));\n    // Add a response interceptor\n    _axios.interceptors.response.use(tryWith(function (response) {\n        try {\n            // Any status code that lie within the range of 2xx cause this function to trigger\n            // Do something with response data\n            response.config.__endTime = Date.now();\n            wavePulseAgent && wavePulseAgent.notify(EVENTS.SERVICE.AFTER_CALL, 'event', [response.config, response]);\n            if (!response.config.__wmVariable) {\n                const config = response.config;\n                wavePulseAgent && wavePulseAgent.notify(EVENTS.TIMELINE.EVENT, 'event', [{\n                        name: 'NETWORK_REQUEST',\n                        data: {\n                            url: config.url,\n                            method: config.method\n                        },\n                        startTime: config.__startTime,\n                        endTime: config.__endTime\n                    }]);\n            }\n        } finally {\n            return response;\n        }\n    }), tryWith(function (error) {\n        try {\n            // Any status codes that falls outside the range of 2xx cause this function to trigger\n            // Do something with response error\n            error.config.__endTime = Date.now();\n            wavePulseAgent && wavePulseAgent.notify(EVENTS.SERVICE.AFTER_CALL, 'event', [error.config, error]);\n            if (!error.config.__wmVariable) {\n                const config = error.config;\n                wavePulseAgent && wavePulseAgent.notify(EVENTS.TIMELINE.EVENT, 'event', [{\n                        name: 'NETWORK_REQUEST',\n                        data: {\n                            url: config.url,\n                            method: config.method\n                        },\n                        startTime: config.__startTime,\n                        endTime: config.__endTime\n                    }]);\n            }\n        } finally{\n            return Promise.reject(error);\n        }\n    }));\n}\nfunction buildComponentTree(componentNode) {\n    if (!componentNode.instance.props.cname) {\n        return;\n    }\n    currentWidgets[componentNode.id + ''] = componentNode.instance;\n    return {\n        tagName: componentNode.instance.props.cname || componentNode.instance.constructor.name,\n        name: componentNode.instance.props.name,\n        id: componentNode.id + '',\n        children: componentNode.children.map((c) => buildComponentTree(c)).filter(c => !!c)\n    };\n}\nfunction getComponentTree() {\n    currentPage = handler.activePage;\n    const pageIns = currentPage && Object.values(currentPage.Widgets)\n        .map((w) => w.componentNode)\n        .find((w) => { var _a, _b; return ((_b = (_a = w === null || w === void 0 ? void 0 : w.instance) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.cname) === 'WmPage'; });\n    currentWidgets = {};\n    return pageIns && buildComponentTree(pageIns);\n}\nfunction getComponentById(id) {\n    return currentWidgets[id];\n}\nfunction bindCalls() {\n    let lastHighLightedWidgetId = '';\n    wavePulseAgent.onInvoke(CALLS.WIDGET.GET, tryWith((args) => {\n        const name = args[0].name;\n        return Promise.resolve(currentPage === null || currentPage === void 0 ? void 0 : currentPage.Widgets[name]);\n    }));\n    wavePulseAgent.onInvoke(CALLS.WIDGET.HIGHLIGHT, tryWith((args) => {\n        const lw = getComponentById(lastHighLightedWidgetId);\n        lw === null || lw === void 0 ? void 0 : lw.setState({\n            highlight: false\n        });\n        const widgetIdToHighlight = args[0];\n        const w = getComponentById(widgetIdToHighlight);\n        w === null || w === void 0 ? void 0 : w.setState({\n            highlight: true\n        });\n        lastHighLightedWidgetId = widgetIdToHighlight;\n        return Promise.resolve('');\n    }));\n    wavePulseAgent.onInvoke(CALLS.WIDGET.GET_PROPERTIES_N_STYLES, tryWith((args) => {\n        const widgetId = args[0];\n        const w = getComponentById(widgetId);\n        const ins = w.componentNode.instance;\n        const styles = JSON.parse(JSON.stringify(ins.styles));\n        const inlineStyles = JSON.parse(JSON.stringify(ins.proxy.styles));\n        inlineStyles && Object.keys(inlineStyles).forEach(k => {\n            styles[k] = styles[k] || {};\n            styles[k].__trace = styles[k].__trace || [];\n            styles[k].__trace.unshift({name: '@inline:' + k, value: inlineStyles[k]});\n        });\n        const pp = ins.propertyProvider;\n        const properties = Object.keys(pp.oldProps)\n            .map(k => [k, pp.overriddenProps[k] || pp.oldProps[k]])\n            .filter(([k, v]) => v !== undefined && v !== null && (typeof v !== 'object' || typeof v === 'string'))\n            .reduce((r, c) => {\n            r[c[0]] = c[1];\n            return r;\n        }, {});\n        Object.keys(styles).forEach(k => {\n            const rnStyle = (properties.cname || '')\n                .replace( /([a-z])([A-Z])/g, '$1-$2' )\n                .toLowerCase().replace('wm-', 'app-')\n                + '.' + k;\n            if (!rnStyle || !RN2CSS[rnStyle]) {\n                delete styles[k];\n                return;\n            }\n            styles[k].__label = RN2CSS[rnStyle];\n            (styles[k].__trace)?.forEach(s => {\n                s['source'] = s.name.split(':')[0].substring(1);\n                if (s['source'] === 'inline') {\n                    return;\n                }\n                let cssClassname = s.name.split(':')[1]\n                    .replace(new RegExp(`\\.?${rnStyle}$`), '')\n                    .replace(new RegExp(`.${k}$`), '');\n                cssClassname = cssClassname && ('.' + cssClassname);\n                s['cssSelector'] = `${cssClassname}${RN2CSS[rnStyle]}`;\n            })\n        });\n        return Promise.resolve({ styles, properties });\n    }));\n    wavePulseAgent.onInvoke(CALLS.HANDSHAKE.WISH, tryWith((args) => {\n        setTimeout(() => {\n            wavePulseAgent.isConnected = true;\n            wavePulseAgent.isClosed = false;\n            wavePulseAgent.onConnection && wavePulseAgent.onConnection();\n            wavePulseAgent.processBuffer();\n        }, 2000);\n        return Promise.resolve('Hello');\n    }));\n    wavePulseAgent.onInvoke(CALLS.EXPRESSION.EVAL, tryWith((args) => {\n        const expr = args[0].expr;\n        if (expr) {\n            return new Promise((resolve, reject) => {\n                try {\n                    const App = handler;\n                    const Page = currentPage;\n                    resolve('Expression evaluation is disabled.');\n                }\n                catch (e) {\n                    reject(JSON.stringify(e));\n                }\n            });\n        }\n        return Promise.resolve();\n    }));\n    wavePulseAgent.onInvoke(CALLS.UI.REFRESH, tryWith(() => {\n        return Promise.resolve(currentPage === null || currentPage === void 0 ? void 0 : currentPage.refresh());\n    }));\n    wavePulseAgent.onInvoke(CALLS.APP.INFO, tryWith(() => {\n        const appConfig = handler.appConfig;\n        const App = handler;\n        return Promise.resolve({\n            name: appConfig.appProperties.displayName,\n            applicationId: appConfig.appId,\n            version: appConfig.appProperties.version,\n            description: '',\n            icon: '',\n            defaultLocale: appConfig.appProperties.defaultLanguage,\n            selectedLocale: App.getSelectedLocale(),\n            defaultTheme: appConfig.appProperties.activeTheme,\n            activeTheme: App.activeTheme,\n            activeLandingPage: appConfig.landingPage,\n            defaultLandingPage: appConfig.appProperties.homePage,\n            securityEnabled: appConfig.appProperties.securityEnabled,\n            serverPath: appConfig.url\n        });\n    }));\n    wavePulseAgent.onInvoke(CALLS.STORAGE.GET_ALL, tryWith(() => {\n        const App = handler;\n        return App.getDependency('StorageService').getAll();\n    }));\n    wavePulseAgent.onInvoke(CALLS.PLATFORM.INFO, tryWith(() => {\n        return Promise.resolve({\n            os: Platform.OS,\n            version: (Platform.Version || '') + '',\n            device: ''\n        });\n    }));\n    wavePulseAgent.onInvoke(CALLS.WIDGET.TREE, tryWith((args) => {\n        let result = null;\n        try {\n            result = getComponentTree();\n        }\n        catch (e) {\n            console.error(e.stack.toString());\n        }\n        return Promise.resolve(result);\n    }));\n}\nwrapConsole();\nlistenServiceCalls();\nexport const createWavePulseAgent = (args) => {\n    handler = args.handler;\n    if (args.agent) {\n        wavePulseAgent = args.agent;\n    }\n    else {\n        handler.subscribe('appReady', tryWith((p) => {\n            wavePulseAgent && wavePulseAgent.notify(EVENTS.TIMELINE.EVENT, 'event', [{\n                    name: 'APP_STARTUP',\n                    startTime: handler.appConfig.diagnostics.appStartTime,\n                    endTime: handler.appConfig.diagnostics.appReadyTime\n                }]);\n        }));\n    }\n    listenPageEvents();\n    listenVariableEvents();\n    bindCalls();\n    return wavePulseAgent;\n};", "wavemaker-rn-codegen/src/templates/project/component/dynamic/component-generator.js": "import WmText from \"@wavemaker/app-rn-runtime/components/input/text/text.component\";\nimport WmTextarea from '@wavemaker/app-rn-runtime/components/input/textarea/textarea.component';\nimport WmNumber from \"@wavemaker/app-rn-runtime/components/input/number/number.component\";\nimport WmCurrency from '@wavemaker/app-rn-runtime/components/input/currency/currency.component';\nimport WmSelect from '@wavemaker/app-rn-runtime/components/input/select/select.component';\nimport WmSearch from '@wavemaker/app-rn-runtime/components/basic/search/search.component';\nimport WmChips from '@wavemaker/app-rn-runtime/components/input/chips/chips.component';\nimport WmCheckbox from '@wavemaker/app-rn-runtime/components/input/checkbox/checkbox.component';\nimport WmCheckboxset from '@wavemaker/app-rn-runtime/components/input/checkboxset/checkboxset.component';\nimport WmToggle from '@wavemaker/app-rn-runtime/components/input/toggle/toggle.component';\nimport WmSwitch from '@wavemaker/app-rn-runtime/components/input/switch/switch.component';\nimport WmRadioset from '@wavemaker/app-rn-runtime/components/input/radioset/radioset.component';\nimport WmDate from '@wavemaker/app-rn-runtime/components/input/epoch/date/date.component';\nimport WmDatetime from '@wavemaker/app-rn-runtime/components/input/epoch/datetime/datetime.component';\nimport WmTime from '@wavemaker/app-rn-runtime/components/input/epoch/time/time.component';\nimport WmSlider from '@wavemaker/app-rn-runtime/components/input/slider/slider.component';\nimport WmRating from '@wavemaker/app-rn-runtime/components/input/rating/rating.component';\nimport WmLayoutgrid from '@wavemaker/app-rn-runtime/components/container/layoutgrid/layoutgrid.component';\nimport WmGridrow from '@wavemaker/app-rn-runtime/components/container/layoutgrid/gridrow/gridrow.component';\nimport WmGridcolumn from '@wavemaker/app-rn-runtime/components/container/layoutgrid/gridcolumn/gridcolumn.component';\nimport registerTransformers from '@wavemaker/rn-codegen/src/transpile/components/transform-register';\nimport WmFormField from '@wavemaker/app-rn-runtime/components/data/form/form-field/form-field.component';\nimport WmLabel from '@wavemaker/app-rn-runtime/components/basic/label/label.component';\n\nimport {transpileMarkup}  from '@wavemaker/rn-codegen/src/transpile/transpile';\nimport {transform} from '@babel/standalone';\nimport React from \"react\";\n\n// this is to avoid tree shaking\nexport const components = {WmText};\n\nregisterTransformers();\n\nexport const generate = (wavemakerMarkup, fragment) => {\n    // transpile wavemaker markup into react markup\n    const transpiledComponents = transpileMarkup(wavemakerMarkup, false, false);\n    try {\n        // use babel library convert it into React.creatElement\n        const transformedCode = transform(transpiledComponents.markup, {\n            presets: ['react']\n        }).code;\n\n        const importedComponents = {\n            'WmText': WmText,\n            'WmTextarea': WmTextarea,\n            'WmNumber': WmNumber,\n            'WmCurrency': WmCurrency,\n            'WmSelect': WmSelect,\n            'WmSearch': WmSearch,\n            'WmChips': WmChips,\n            'WmCheckbox': WmCheckbox,\n            'WmCheckboxset': WmCheckboxset,\n            'WmToggle': WmToggle,\n            'WmSwitch': WmSwitch,\n            'WmRadioset': WmRadioset,\n            'WmDate': WmDate,\n            'WmDatetime': WmDatetime,\n            'WmTime': WmTime,\n            'WmSlider': WmSlider,\n            'WmRating': WmRating,\n            'WmLayoutgrid': WmLayoutgrid,\n            'WmGridrow': WmGridrow,\n            'WmGridcolumn': WmGridcolumn,\n            'WmFormField': WmFormField,\n            'WmLabel': WmLabel\n        }\n\n        // Evaluate the transformed code synchronously\n        const dynamicComponentFunction = new Function(['React, fragment', ...Object.keys(importedComponents)].join(', '), `return ${transformedCode}`);\n        const dynamicComponent = dynamicComponentFunction(React, fragment, ...Object.values(importedComponents));\n        return dynamicComponent;\n    } catch (error) {\n        console.error('Error generating component:', error);\n        return null;\n    }\n\n}", "wavemaker-rn-codegen/src/templates/project/component/dynamic/form.generator.js": "import {generate} from './component-generator';\nimport {forEach, isArray} from \"lodash\";\n\n// Generate the form field with given field definition. Add a grid column wrapper around the form field.\nconst setMarkupForFormField = (field, columnWidth) =>  {\n    let propsTmpl = '';\n    forEach(field, (value, key) => {\n        propsTmpl = `${propsTmpl} ${key}=\"${value}\"`;\n    });\n    return `<wm-gridcolumn columnwidth=\"${columnWidth}\"><wm-form-field ${propsTmpl}></wm-form-field></wm-gridcolumn>`;\n};\n\n// Function to generate and compile the form fields from the metadata\nconst generateFormFields = (metadata, formName) => {\n    let noOfColumns = 1;\n    const columnWidth = 12 / noOfColumns;\n    let fieldTemplate = '';\n    let colCount = 0;\n    let fields = metadata;\n\n    if (!isArray(fields)) {\n        return;\n    }\n\n    while (fields[colCount]) {\n        let colTmpl = '';\n        if (fields[colCount]) {\n            colTmpl += setMarkupForFormField(fields[colCount], columnWidth);\n        }\n        colCount++;\n        fieldTemplate += `<wm-gridrow>${colTmpl}</wm-gridrow>`;\n    }\n    fieldTemplate = `<wm-layoutgrid type=\"dynamic\" dynamicForm = \"${formName}\">${fieldTemplate}</wm-layoutgrid>`;\n\n    return fieldTemplate;\n}\n\n\nexport const dynamicForm = (metadata, formName, fragment) => {\n    // convert metadata into wavemaker markup\n    const wmMarkup = generateFormFields(metadata, formName);\n\n   // using component generator transform wavemaker markup into react elements\n    return generate(wmMarkup, fragment);\n}\n", "wavemaker-rn-codegen/src/templates/project/scripts/wm-babel.transform.plugin.js": "const t = require(\"@babel/types\");\nconst babel = require(\"@babel/core\");\nconst jsx = require('@babel/plugin-syntax-jsx').default;\n\nfunction isWatchableExpression(path) {\n  const exp = path && path.container && path.container.value && path.container.value.expression;\n  const key = path.parent && path.parent.name && path.parent.name.name;\n  return exp \n    && key\n    && !key.startsWith('on')\n    && key !== 'fragment'\n    && key !== 'listener'\n    && key !== 'watcher'\n    && key !== 'serviceDefinitions'\n    && key !== 'styles'\n    && key !== 'themeToUse'\n    && key !== '$item'\n    && key !== '$index'\n    && t.isExpression(exp)\n    && !t.isFunctionExpression(exp)\n    && !t.isArrowFunctionExpression(exp)\n    && !t.isBooleanLiteral(exp)\n    && !t.isStringLiteral(exp)\n    && !t.isNullLiteral(exp)\n    && !t.isObjectExpression(exp)\n    && !t.isNumericLiteral(exp);\n}\n\nfunction isEventCallback(path) {\n  const exp = path && path.container && path.container.value && path.container.value.expression;\n  const name = path && path.container && path.container.name && path.container.name.name;\n  return exp && (t.isFunctionExpression(exp) || t.isArrowFunctionExpression(exp));\n}\n\nconst JSXVisitor = {\n  JSXExpressionContainer(path, state) {\n    const exp = path.getSource();\n    if (exp && isWatchableExpression(path)) {\n        const tExp = `watch(() => (${exp.substring(1, exp.length -1)}))`;\n        path.replaceWith(t.jsxExpressionContainer(babel.template.expression.ast(tExp)));\n    } else if (exp && isEventCallback(path)) {\n      path.traverse({\n        'ArrowFunctionExpression|FunctionExpression':  function(path, state) {\n          const container = path.get('body');\n          if (container && container.node['body']) {\n            container.pushContainer('body', babel.template.statement.ast('fragment.refresh();'));\n          }\n        }\n      })\n    }\n  }\n};\nconst canMemoize = (node) => {\n  const attr = node.openingElement.attributes.find(a => a.name.name === 'memoize');\n  return !(attr && (attr.value == null || attr.value.value === 'false')); \n};\nconst plugin = function() {\n    return {\n      inherits: jsx,\n      visitor: {\n        JSXElement: {\n          exit(path, state) {\n            const { node, parentPath } = path;\n            const nodeName = node.openingElement && node.openingElement.name && node.openingElement.name.name;\n            if (node.__wm_processed || !nodeName || !nodeName.startsWith('Wm')) {\n              return;\n            }\n            const nameAttribute = t.jsxAttribute(\n              t.jsxIdentifier('cname'), \n              t.stringLiteral(nodeName)\n            );\n            node.openingElement.attributes.push(nameAttribute);\n            node.__wm_processed = true;\n            path.traverse(JSXVisitor);\n            if (canMemoize(node)) {\n              const replacer = t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier('WmMemo'), [\n                t.jsxAttribute(t.jsxIdentifier('watcher'), t.jsxExpressionContainer(t.memberExpression(t.identifier('fragment'), t.identifier('watcher')))),\n                t.jsxAttribute(t.jsxIdentifier('render'), t.jsxExpressionContainer(t.arrowFunctionExpression([t.identifier('watch')], node)))\n              ]), null, [], true);\n              replacer.__wm_processed = true;\n              path.replaceWith(replacer);\n            }\n          }\n        }\n      }\n    };\n};\n\nmodule.exports = plugin;", "wavemaker-rn-codegen/src/templates/project/scripts/post-build.js": "const fs = require('fs');\n\nasync function readAndReplaceFileContent(path, writeFn) {\n    const content = fs.readFileSync(path, 'utf-8');\n    return Promise.resolve().then(() => {    \n        return writeFn && writeFn(content);\n    }).then((modifiedContent) => {\n        if (modifiedContent !== undefined && modifiedContent !== null) {\n            fs.writeFileSync(path, modifiedContent);\n            return modifiedContent;\n        }\n        return content;\n    });\n}\n\nfunction patch() {\n    return null;\n}\n\npatch();", "wavemaker-rn-codegen/src/templates/project/esbuild/esbuild-plugin-babel.js": "const babel = require('@babel/core');\nconst fs = require('fs');\nconst path = require('path');\n\nconst pluginBabel = (options = {}) => ({\n\tname: 'babel',\n\tsetup(build, { transform } = {}) {\n\t\tconst { filter = /.*/, namespace = '', config = {} } = options;\n\n\t\tconst transformContents = ({ args, contents }) => {\n\t\t\tconst babelOptions = babel.loadOptions({\n\t\t\t\t...config,\n\t\t\t\tfilename: args.path,\n\t\t\t\tcaller: {\n\t\t\t\t\tname: 'esbuild-plugin-babel',\n\t\t\t\t\tsupportsStaticESM: true\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!babelOptions) return { contents };\n\n\t\t\tif (babelOptions.sourceMaps) {\n\t\t\t\tconst filename = path.relative(process.cwd(), args.path);\n\n\t\t\t\tbabelOptions.sourceFileName = filename;\n\t\t\t}\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tbabel.transform(contents, babelOptions, (error, result) => {\n\t\t\t\t\terror ? reject(error) : resolve({ contents: result.code });\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tif (transform) return transformContents(transform);\n\n\t\tbuild.onLoad({ filter, namespace }, async args => {\n\t\t\tconst contents = await fs.promises.readFile(args.path, 'utf8');\n\n\t\t\treturn transformContents({ args, contents });\n\t\t});\n\t}\n});\n\nmodule.exports = pluginBabel;\n", "wavemaker-rn-codegen/src/templates/project/esbuild/esbuild.script.js": "const esbuild = require('esbuild');\nconst resolve = require('esbuild-plugin-resolve');\nconst fs = require('fs-extra');\nconst { exec } = require('child_process');\nconst babel = require('./esbuild-plugin-babel');\nconst path = require('path')\n\nconst BUILD_DIR = './web-build';\n\nasync function readAndReplaceFileContent(path, writeFn) {\n  const content = fs.readFileSync(path, 'utf-8');\n  return Promise.resolve().then(() => {    \n      return writeFn && writeFn(content);\n  }).then((modifiedContent) => {\n      if (modifiedContent !== undefined && modifiedContent !== null) {\n          fs.writeFileSync(path, modifiedContent);\n          return modifiedContent;\n      }\n      return content;\n  });\n}\n\nclass EsBuilder {\n  cleanBuildDir() {\n    if (fs.existsSync(BUILD_DIR)) {\n      fs.removeSync(BUILD_DIR);\n    }\n  }\n\n  prepareIndexHtml(result) {\n    console.log('build success');\n    try {\n    const bundleName = fs.readdirSync('./web-build').find(n => /^bundle.*js$/.test(n));\n    let content = fs.readFileSync(__dirname + '/index.html', 'utf-8');\n    content = content.replace(/\".\\/bundle.js\"/, `\"./${bundleName}\"`);\n    fs.writeFileSync('./web-build/index.html', content);\n\n    const metafilePath = path.join(__dirname, './', 'metafile.json');\n    fs.writeFileSync(metafilePath, JSON.stringify(result.metafile));\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  patchPackageLib(paths) {\n    paths.forEach((path) => {\n      const packageFile = `${__dirname}/../node_modules/${path}/package.json`;\n      if (fs.existsSync(packageFile)) {\n        const _package = fs.readJSONSync(packageFile);\n        console.log('patch applied on package at.. ', packageFile);\n        delete _package['module'];\n        delete _package['type'];\n        fs.writeFileSync(packageFile, JSON.stringify(_package, null, 4));\n      }\n    });\n  }\n\n  async patchCamera() {\n    return readAndReplaceFileContent(`${__dirname}/../node_modules/expo-camera/build/useWebQRScanner.js`, (c) => {\n      if (c.indexOf('@koale/useworker') > 0) {\n          return fs.readFileSync(`${__dirname}/expo-camera-patch/useWebQRScanner.js`, {\n              encoding: 'utf-8'\n          })\n      }\n      return c;\n    });\n  }\n\n  async patchReactNativeAssets() {\n    const path = `${__dirname}/../node_modules/@react-native/assets-registry/`\n    fs.removeSync(path+'registry.js');\n    const registry_content = `\n    'use strict';\n\n    export type PackagerAsset = {\n      __packager_asset: boolean,\n      fileSystemLocation: string,\n      httpServerLocation: string,\n      width?: number,\n      height?: number,\n      scales: Array<number>,\n      hash: string,\n      name: string,\n      type: string,\n    };\n    \n    const assets: Array<PackagerAsset> = [];\n    \n    export function registerAsset(asset: PackagerAsset): number {\n      // push returns new array length, so the first asset will\n      // get id 1 (not 0) to make the value truthy\n      return assets.push(asset);\n    }\n    \n    export function getAssetByID(assetId: number): PackagerAsset {\n      return assets[assetId - 1];\n    }\n    `;\n    fs.writeFileSync(path+'registry.ts', registry_content);\n    const content = fs.readFileSync(path+'path-support.js', 'utf-8');\n    fs.removeSync(path+'path-support.js')\n    fs.writeFileSync(path+'path-support.ts', content);\n    await readAndReplaceFileContent(path+'path-support.ts', (content)=>{\n      return content.replace(`import type {PackagerAsset} from './registry.js';`,`import type {PackagerAsset} from './registry.ts';`)\n      .replace(` | $TEMPORARY$string<'raw'> `, '');\n    });\n  }\n\n  async patchReactNativeWeb() {\n    const path = `${__dirname}/../node_modules/react-native-web/dist/cjs/exports/render/index.js`;\n    await readAndReplaceFileContent(path, (content) => {\n        return content.replace(\n            'var _reactDom = require(\"react-dom\");',\n            `var React = require(\"react\");\n            var _reactDom = require(\"react-dom\");\n            var _reactDomClient = require(\"react-dom/client\");`\n        ).replace('hydrate(element', 'hydrateOld(element')\n        .replace('render(element', 'renderOld(element') + \n        `\n        function hydrate(element, root, callback) {\n          (0, _dom.createSheet)(root);\n          return (0, _reactDomClient.hydrateRoot)(element, root, callback);\n        }\n        \n        function AppWithCallbackAfterRender(props) {\n          React.useEffect(() => {props.callback && props.callback()});\n          return props.element;\n        }\n        \n        function render(element, root, callback) {\n          (0, _dom.createSheet)(root);\n          return (0, _reactDomClient.createRoot)(root).render(\n            React.createElement(AppWithCallbackAfterRender, \n              {\n                \"callback\": callback,\n                element: element\n              }\n            )\n          );\n        }`;\n    });\n    const target = `${__dirname}/../node_modules/react-native-web/dist/cjs/exports/BackHandler/index.js`;\n    await readAndReplaceFileContent(target, content => {\n      return content.replace('console.error', '// console.error');\n    });\n    console.log('Patched react-native-web');\n  }\n\n  patchWithDevTools(path) {\n    const packageFile = `${__dirname}/../node_modules/${path}`;\n    if (fs.existsSync(packageFile)) {\n      const _package = \"import * as React from 'react';export function withDevTools(AppRootComponent) {return (props) => React.createElement(AppRootComponent, { ...props });}\"\n      fs.writeFileSync(packageFile, _package);\n    }\n  }\n\n  async patchReactNativeAssetRegistry() {\n    const content = `\n    /**\n     * Copyright (c) Meta Platforms, Inc. and affiliates.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     *\n     * @flow strict\n     * @format\n     */\n    \n    'use strict';\n    \n    const assets = [];\n    \n    function registerAsset(asset) {\n      // push returns new array length, so the first asset will\n      // get id 1 (not 0) to make the value truthy\n      return assets.push(asset);\n    }\n    \n    function getAssetByID(assetId) {\n      return assets[assetId - 1];\n    }\n    \n    module.exports = {registerAsset, getAssetByID};\n    \n    `;\n    fs.writeFileSync(`${__dirname}/../node_modules/@react-native/assets-registry/registry.js`, content);\n    const expoAssetRegistry = `${__dirname}/../node_modules/expo-asset/node_modules/@react-native/assets-registry/registry.js`;\n    readAndReplaceFileContent(expoAssetRegistry, () => content);\n    console.log('Patched @react-native/assets-registry');\n  }\n\n  async patchBabelExpoPreset() {\n    const target = `${__dirname}/../node_modules/babel-preset-expo/build/index.js`;\n    await readAndReplaceFileContent(target, content => {\n      return content.replace(\n        `(0, common_1.hasModule)('react-native-reanimated') &&`,\n        `//(0, common_1.hasModule)('react-native-reanimated') &&`)\n        .replace(\n          `platformOptions.reanimated !== false && [require.resolve('react-native-reanimated/plugin')],`,\n          `//platformOptions.reanimated !== false && [require.resolve('react-native-reanimated/plugin')],`\n        )\n    });\n    console.log('Patched babel-expo-preset');\n  }\n\n  async patchUUID() {\n    const target = `${__dirname}/../node_modules/expo-modules-core/build/uuid/uuid.web.js`;\n    await readAndReplaceFileContent(target, content => {\n      return content.replace(`require('crypto')`, 'crypto');\n    });\n    console.log('Patched UUID.');\n  }\n\n  async patchExpoRootComponent() {\n    const target = `${__dirname}/../node_modules/expo/build/launch/registerRootComponent.js`;\n    await readAndReplaceFileContent(target, content => {\n      return content.replace(`export default`, \n      `\n      const process = {env: {\n        NODE_ENV: 'development',\n        EXPO_PUBLIC_USE_STATIC: '0'\n      }};\n      export default `);\n    });\n    console.log('Patched Expo Root Component.');\n  }\n\n  async patchReactNavigation() {\n    // https://github.com/react-navigation/react-navigation/pull/11496/files\n    fs.copyFileSync(\n      `${__dirname}/@react-navigation/drawer/6.6.3/lib/module/views/modern/Drawer.js`,\n      `${__dirname}/../node_modules/@react-navigation/drawer/lib/module/views/modern/Drawer.js`\n    );\n    fs.copyFileSync(\n      `${__dirname}/@react-navigation/drawer/6.6.3/lib/module/views/modern/Overlay.js`,\n      `${__dirname}/../node_modules/@react-navigation/drawer/lib/module/views/modern/Overlay.js`\n    );\n    console.log('Patched React Navigation.');\n  }\n\n  async patchReactNativeReanimated() {\n    await readAndReplaceFileContent(`${__dirname}/../node_modules/react-native-reanimated/lib/module/reanimated2/PlatformChecker.js`, (c) => {\n      return c.replace(\n        '!!process.env.JEST_WORKER_ID',\n        'false; // !!process.env.JEST_WORKER_ID'\n      )\n    });\n    await readAndReplaceFileContent(`${__dirname}/../node_modules/react-native-reanimated/src/reanimated2/hook/useSharedValue.ts`, (c) => {\n      return c.replace(\n        'useRef<SharedValue<Value>>',\n        'useRef'\n      )\n    });\n    console.log('Patched React Native Reanimated.');\n  }\n\n  async patchExpoVideo() {\n    await readAndReplaceFileContent(`${__dirname}/../node_modules/expo-video/build/index.js`, (c) => {\n      return c.replace(\n        '{ VideoThumbnail }',\n        '{ default as VideoThumbnail }'\n      )\n    });\n    console.log('Patched Expo video.')\n  }\n\n\n  buildLibraries() {\n    const promises = [{\n      name: 'expo-web-browser',\n      build: (path) => {\n        fs.writeFileSync(`${path}/build/WebBrowser.js`, `\n        export const openBrowserAsync = (url) => {\n          window.open(url, '_blank');\n        };`);\n      }\n    }].map(p => {\n      let libPath = `${__dirname}/../node_modules/${p.name}`;\n      if (!fs.existsSync(libPath)) {\n        libPath = `${__dirname}/../node_modules/@wavemaker/app-rn-runtime/node_modules/${p.name}`;\n      }\n      if (!fs.existsSync(libPath)) {\n        const msg = `${p.name} library is not found`;\n        console.error(msg);\n        return Promise.reject(msg);\n      }\n      const destPath = `${__dirname}/node_modules/${p.name}`;\n      if (fs.existsSync(destPath)) {\n        fs.removeSync(destPath);\n      }\n      fs.copySync(libPath, destPath);\n      return p.build && p.build(destPath);\n    });\n    return Promise.all(promises)\n        .then(() => this.patchPackageLib(['@koale/useworker', 'victory',\n          'd3-array', 'd3-color', 'd3-ease', 'd3-format', 'd3-interpolate', \n          'd3-path', 'd3-scale', 'd3-shape', 'd3-time', 'd3-time-format',\n          'd3-timer', 'd3-voronoi']))\n        .then(() => this.patchWithDevTools('expo/build/launch/withDevTools.js'))\n        .then(() => this.patchReactNativeWeb())\n        .then(() => this.patchReactNativeAssets())\n        .then(() => this.patchBabelExpoPreset())\n        .then(() => this.patchReactNavigation())\n        .then(() => this.patchReactNativeReanimated())\n        .then(() => this.patchExpoVideo())\n        .then(() => {\n          console.log('*********** LIBRARIES ARE BUILT FOR ESBUILD **************');\n        }, (e) => {\n          console.error(e);\n          console.log('*********** FAILED TO BUILD LIBRARIES FOR ESBUILD **************');\n        });\n  }\n\n  build() {\n    console.log('excluded react-native-vector-icons module in esbuild');\n    const appJsonPath = path.resolve('app.json');\n     //static process.env.APP_MANIFEST data for (process is not defined expo-constants esbuild web preview issue)\n    const appJson = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));\n    return esbuild.build({\n      entryPoints: ['./node_modules/expo/AppEntry.js'],\n      external:['./node_modules/react-native-vector-icons'],\n      bundle: true,\n      entryNames: 'bundle-[hash]',\n      outdir: 'web-build',\n      jsxFragment: 'React.Fragment',\n      tsconfig: './esbuild/jsconfig.json',\n      define: {'process.env.NODE_ENV': '\"development\"', '__DEV__': false, global:'window', 'process.env.EXPO_OS': '\"web\"', 'process.env.APP_MANIFEST': JSON.stringify(appJson.expo)},\n      resolveExtensions: ['.web.tsx','.web.ts','.web.jsx','.web.js','.tsx','.ts','.jsx','.js',],\n      loader: {\".png\": \"file\", \".jpeg\": \"file\", \".ttf\": \"file\", \".js\": \"jsx\", \".gif\": \"file\", \".svg\": \"file\" },\n      minifyWhitespace: true,\n      minifySyntax: true,\n      metafile: true,\n      sourcemap: true,\n      plugins: [babel({\n        filter: /\\/src\\/.*jsx?/,\n        config : {\n          targets: {\n            browsers: 'last 2 versions',\n            esmodules: true\n          },\n          sourceMaps: 'inline',\n          plugins: [\n            __dirname + '/../scripts/wm-babel.transform.plugin.js', \n            '@babel/plugin-proposal-export-namespace-from',\n            'react-native-reanimated/plugin',\n          ]\n        }\n      }), resolve({\n        'victory-native': 'victory'\n      })]\n    })\n  }\n\n  triggerBuild() {\n    console.log('*********** REACT NATIVE ESBUILD STARTED **************');\n    console.time('react native with esbuild');\n    this.cleanBuildDir();\n    this.build()\n    .then((result) => this.prepareIndexHtml(result))\n    .then(() => {\n      console.timeEnd('react native with esbuild');\n      console.log('*********** REACT NATIVE ESBUILD SUCCESSFUL **************');\n    }).catch((error) => {\n      console.log('*********** REACT PROJECT ESBUILD ERROR **************');\n      console.error(error);\n      console.timeEnd('react native with esbuild');\n      console.log('*********** REACT PROJECT ESBUILD FAILED **************');\n    });\n  }\n}\n\nif (process.argv[2] === '--prepare-lib') {\n  (new EsBuilder()).buildLibraries();\n} else {\n  (new EsBuilder()).triggerBuild();\n}\n", "wavemaker-rn-codegen/src/templates/project/esbuild/expo-camera-patch/useWebQRScanner.js": "// import { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from './WebCameraUtils';\nconst qrWorkerMethod = ({ data, width, height }) => {\n    // eslint-disable-next-line no-undef\n    const decoded = self.jsQR(data, width, height, {\n        inversionAttempts: 'attemptBoth',\n    });\n    let parsed;\n    try {\n        parsed = JSON.parse(decoded);\n    }\n    catch {\n        parsed = decoded;\n    }\n    if (parsed?.data) {\n        const nativeEvent = {\n            type: 'qr',\n            data: parsed.data,\n            cornerPoints: [],\n            bounds: { origin: { x: 0, y: 0 }, size: { width: 0, height: 0 } },\n        };\n        if (parsed.location) {\n            nativeEvent.cornerPoints = [\n                parsed.location.topLeftCorner,\n                parsed.location.bottomLeftCorner,\n                parsed.location.topRightCorner,\n                parsed.location.bottomRightCorner,\n            ];\n        }\n        return nativeEvent;\n    }\n    return parsed;\n};\nfunction useRemoteJsQR() {\n    /*return useWorker(qrWorkerMethod, {\n        remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n        autoTerminate: false,\n    });*/\n}\nexport function useWebQRScanner(video, { isEnabled, captureOptions, interval, onScanned, onError, }) {\n    const isRunning = React.useRef(false);\n    const timeout = React.useRef(undefined);\n    const [decode, clearWorker] = useRemoteJsQR();\n    async function scanAsync() {\n        // If interval is 0 then only scan once.\n        if (!isRunning.current || !onScanned) {\n            stop();\n            return;\n        }\n        try {\n            const data = captureImageData(video.current, captureOptions);\n            if (data) {\n                const nativeEvent = await decode(data);\n                if (nativeEvent?.data) {\n                    onScanned({\n                        nativeEvent,\n                    });\n                }\n            }\n        }\n        catch (error) {\n            if (onError) {\n                onError({ nativeEvent: error });\n            }\n        }\n        finally {\n            // If interval is 0 then only scan once.\n            if (interval === 0) {\n                stop();\n                return;\n            }\n            const intervalToUse = !interval || interval < 0 ? 16 : interval;\n            // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n            timeout.current = setTimeout(() => {\n                scanAsync();\n            }, intervalToUse);\n        }\n    }\n    function stop() {\n        isRunning.current = false;\n        clearTimeout(timeout.current);\n    }\n    React.useEffect(() => {\n        if (isEnabled) {\n            isRunning.current = true;\n            scanAsync();\n        }\n        else {\n            stop();\n        }\n    }, [isEnabled]);\n    React.useEffect(() => {\n        return () => {\n            stop();\n            clearWorker.kill();\n        };\n    }, []);\n}\n//# sourceMappingURL=useWebQRScanner.js.map", "wavemaker-rn-codegen/src/profiles/expo-preview.profile.ts": "import { Profile, default as defaultProfile } from './profile';\n\nexport default {\n    ...defaultProfile,\n    copyResources: true,\n    useLocalMetadata: false,\n    lazyloadPages: false,\n    lazyloadPartials: false,\n    lazyloadPrefabs: false\n} as Profile;", "wavemaker-rn-codegen/src/profiles/profile.ts": "import { assignIn } from \"lodash\";\n\nexport interface Profile {\n    generateWeb: boolean,\n    copyResources: boolean,\n    lazyloadPages: boolean,\n    lazyloadPartials: boolean,\n    lazyloadPrefabs: boolean,\n    linkNodeModules: boolean,\n    useLocalMetadata: boolean,\n    targetPlatform: 'web' | 'native',\n    packageLockFilePath: string,\n    yarnLockFilePath: string,\n};\n\n/**\n * Default profile\n */\nconst DefaultProfile = {\n    generateWeb: false,\n    copyResources: true,\n    lazyloadPages: true,\n    lazyloadPartials: true,\n    lazyloadPrefabs: true,\n    linkNodeModules: false,\n    useLocalMetadata: true,\n    targetPlatform: 'native'\n} as Profile;\n\nconst profile = {\n    ...DefaultProfile\n} as Profile;\n\nexport const setProfile = (p: Profile) => assignIn(profile, DefaultProfile, p);\n\nexport default profile;", "wavemaker-rn-codegen/src/profiles/web-preview.profile.ts": "import { Profile, default as defaultProfile } from './profile';\n\nexport default {\n    ...defaultProfile,\n    generateWeb: true,\n    linkNodeModules: true,\n    copyResources: false,\n    useLocalMetadata: false,\n    targetPlatform: 'web'\n} as Profile;", "wavemaker-rn-codegen/src/profiles/expo-web-preview.profile.ts": "import { Profile, default as defaultProfile } from './profile';\n\nexport default {\n    ...defaultProfile,\n    copyResources: false,\n    useLocalMetadata: false,\n    lazyloadPages: false,\n    lazyloadPartials: false,\n    lazyloadPrefabs: false,\n    targetPlatform: 'web'\n} as Profile;", "wavemaker-rn-codegen/src/profiles/development.profile.ts": "import { Profile, default as defaultProfile } from './profile';\n\nexport default {\n    ...defaultProfile,\n    generateWeb: false,\n    copyResources: false,\n    useLocalMetadata: false\n} as Profile;"}}